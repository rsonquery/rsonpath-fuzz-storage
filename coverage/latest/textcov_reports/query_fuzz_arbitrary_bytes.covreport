_RNvXNtNtNtCs3HmALEVcYcb_9arbitrary7foreign4core3strReNtB8_9Arbitrary9size_hintCs8VN6UyQo1Oz_26query_fuzz_arbitrary_bytes:
   36|  2.14k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
   37|  2.14k|        (0, None)
   38|  2.14k|    }
_RNvNtNtNtCs3HmALEVcYcb_9arbitrary7foreign4core3str13arbitrary_str:
    6|  2.14k|fn arbitrary_str<'a>(u: &mut Unstructured<'a>, size: usize) -> Result<&'a str> {
    7|  2.14k|    match str::from_utf8(u.peek_bytes(size).unwrap()) {
    8|  1.74k|        Ok(s) => {
    9|  1.74k|            u.bytes(size).unwrap();
   10|  1.74k|            Ok(s)
   11|       |        }
   12|    397|        Err(e) => {
   13|    397|            let i = e.valid_up_to();
   14|    397|            let valid = u.bytes(i).unwrap();
   15|    397|            let s = unsafe {
   16|    397|                debug_assert!(str::from_utf8(valid).is_ok());
   17|    397|                str::from_utf8_unchecked(valid)
   18|    397|            };
   19|    397|            Ok(s)
   20|       |        }
   21|       |    }
   22|  2.14k|}
_RNvXNtNtNtCs3HmALEVcYcb_9arbitrary7foreign4core3strReNtB8_9Arbitrary19arbitrary_take_rest:
   30|  2.14k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
   31|  2.14k|        let size = u.len();
   32|  2.14k|        arbitrary_str(&mut u, size)
   33|  2.14k|    }

_RNvMNtCs3HmALEVcYcb_9arbitrary12unstructuredNtB2_12Unstructured3new:
   86|  2.14k|    pub fn new(data: &'a [u8]) -> Self {
   87|  2.14k|        Unstructured { data }
   88|  2.14k|    }
_RNvMNtCs3HmALEVcYcb_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  109|  2.14k|    pub fn len(&self) -> usize {
  110|  2.14k|        self.data.len()
  111|  2.14k|    }
_RNvMNtCs3HmALEVcYcb_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  585|  2.14k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  586|  2.14k|        if self.data.len() < size {
  587|      0|            return Err(Error::NotEnoughData);
  588|  2.14k|        }
  589|  2.14k|
  590|  2.14k|        let (for_buf, rest) = self.data.split_at(size);
  591|  2.14k|        self.data = rest;
  592|  2.14k|        Ok(for_buf)
  593|  2.14k|    }
_RNvMNtCs3HmALEVcYcb_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  616|  2.14k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  617|  2.14k|        self.data.get(..size)
  618|  2.14k|    }

LLVMFuzzerInitialize:
  312|      2|            pub extern "C" fn LLVMFuzzerInitialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
  313|      2|                $crate::initialize(_argc, _argv);
  314|      2|
  315|      2|                // Supplied init code
  316|      2|                $init;
  317|      2|                0
  318|      2|            }
rust_fuzzer_test_input:
  321|  2.14k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  322|       |                use $crate::arbitrary::{Arbitrary, Unstructured};
  323|       |
  324|       |                // Early exit if we don't have enough bytes for the `Arbitrary`
  325|       |                // implementation. This helps the fuzzer avoid exploring all the
  326|       |                // different not-enough-input-bytes paths inside the `Arbitrary`
  327|       |                // implementation. Additionally, it exits faster, letting the fuzzer
  328|       |                // get to longer inputs that actually lead to interesting executions
  329|       |                // quicker.
  330|  2.14k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  331|      0|                    return -1;
  332|  2.14k|                }
  333|  2.14k|
  334|  2.14k|                let mut u = Unstructured::new(bytes);
  335|  2.14k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  336|       |
  337|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  338|       |                // formatting of the input to that file. This is only intended for
  339|       |                // `cargo fuzz`'s use!
  340|       |
  341|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  342|  2.14k|                if let Some(path) = $crate::rust_libfuzzer_debug_path() {
  343|       |                    use std::io::Write;
  344|      0|                    let mut file = std::fs::File::create(path)
  345|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  346|      0|                    (match data {
  347|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  348|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  349|       |                    })
  350|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  351|      0|                    return -1;
  352|  2.14k|                }
  353|  2.14k|
  354|  2.14k|                let data = match data {
  355|  2.14k|                    Ok(d) => d,
  356|      0|                    Err(_) => return -1,
  357|       |                };
  358|       |
  359|  2.14k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  360|  2.14k|                result.to_libfuzzer_code()
  361|       |            }
_RNvNvCs8VN6UyQo1Oz_26query_fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  364|  2.14k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  365|  2.14k|                $body
  366|  2.14k|            }
_RNvXCskkpDSEEzbp3_13libfuzzer_sysNtB2_6CorpusINtNtCshZc3FwCJ069_4core7convert4FromuE4from:
   30|  2.14k|    fn from(_: ()) -> Self {
   31|  2.14k|        Self::Keep
   32|  2.14k|    }
_RNvMs_CskkpDSEEzbp3_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  2.14k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.14k|        match self {
   42|  2.14k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  2.14k|    }
LLVMFuzzerTestOneInput:
   59|  2.14k|pub unsafe fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   60|  2.14k|    let test_input = ::std::panic::catch_unwind(|| {
   61|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   62|       |        rust_fuzzer_test_input(data_slice)
   63|  2.14k|    });
   64|  2.14k|
   65|  2.14k|    match test_input {
   66|  2.14k|        Ok(i) => i,
   67|       |        Err(_) => {
   68|       |            // hopefully the custom panic hook will be called before and abort the
   69|       |            // process before the stack frames are unwinded.
   70|      0|            ::std::process::abort();
   71|       |        }
   72|       |    }
   73|  2.14k|}
_RNCNvCskkpDSEEzbp3_13libfuzzer_sys15test_input_wrap0B3_:
   60|  2.14k|    let test_input = ::std::panic::catch_unwind(|| {
   61|  2.14k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   62|  2.14k|        rust_fuzzer_test_input(data_slice)
   63|  2.14k|    });
_RNvCskkpDSEEzbp3_13libfuzzer_sys25rust_libfuzzer_debug_path:
   76|  2.14k|pub fn rust_libfuzzer_debug_path() -> &'static Option<String> {
   77|       |    static RUST_LIBFUZZER_DEBUG_PATH: OnceLock<Option<String>> = OnceLock::new();
   78|  2.14k|    RUST_LIBFUZZER_DEBUG_PATH.get_or_init(|| std::env::var("RUST_LIBFUZZER_DEBUG_PATH").ok())
   79|  2.14k|}
_RNCNvCskkpDSEEzbp3_13libfuzzer_sys25rust_libfuzzer_debug_path0B3_:
   78|      1|    RUST_LIBFUZZER_DEBUG_PATH.get_or_init(|| std::env::var("RUST_LIBFUZZER_DEBUG_PATH").ok())
_RNvCskkpDSEEzbp3_13libfuzzer_sys10initialize:
   82|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   83|      2|    // Registers a panic hook that aborts the process before unwinding.
   84|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   85|      2|    // able to analyse the process stack frames to tell different bugs appart.
   86|      2|    //
   87|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   88|      2|    // impossible to build code using compiler plugins with this flag.
   89|      2|    // We will be able to remove this code when
   90|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   91|      2|    let default_hook = std::panic::take_hook();
   92|      2|    std::panic::set_hook(Box::new(move |panic_info| {
   93|       |        default_hook(panic_info);
   94|       |        std::process::abort();
   95|      2|    }));
   96|      2|    0
   97|      2|}

_RNvXs_NtCs9XyeddurhEe_3nom6branchTNCINvNtNtB6_9character8complete4charReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0Bw_EINtB4_3AltB16_cB18_E6choiceB1c_:
  134|  3.57k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  3.57k|        match self.0.parse(input.clone()) {
  136|  3.37k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    194|          res => res,
  138|       |        }
  139|  3.57k|      }
_RNvXs_NtCs9XyeddurhEe_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB28_6digit1BY_B14_EE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|  3.63M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  3.63M|        match self.0.parse(input.clone()) {
  136|  3.63M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  7.10k|          res => res,
  138|       |        }
  139|  3.63M|      }
_RNvXs_NtCs9XyeddurhEe_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0NvNvNtB18_6parser5float10base_floatE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|   819k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   819k|        match self.0.parse(input.clone()) {
  136|   818k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    220|          res => res,
  138|       |        }
  139|   819k|      }
_RNvXs_NtCs9XyeddurhEe_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Q_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1Q_E6choiceB15_:
  134|  2.60M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  2.60M|        match self.0.parse(input.clone()) {
  136|  2.60M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  3.70k|          res => res,
  138|       |        }
  139|  2.60M|      }
_RNvXs0_NtCs9XyeddurhEe_3nom6branchTNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12filter_query0NCBz_s_0NCINvBB_28failed_segment_within_filterNtBD_7SegmentE0EINtB5_3AltReB2e_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  1.36M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.36M|        match self.0.parse(input.clone()) {
  136|   875k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   492k|          res => res,
  138|       |        }
  139|  1.36M|      }
_RNvXs0_NtCs9XyeddurhEe_3nom6branchTNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser7segment0NCBz_s_0NCINvBB_14failed_segmentNtBD_7SegmentE0EINtB5_3AltReB1U_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  18.6k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  18.6k|        match self.0.parse(input.clone()) {
  136|  13.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  5.54k|          res => res,
  138|       |        }
  139|  18.6k|      }
_RNvXs1_NtCs9XyeddurhEe_3nom6branchTNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser18descendant_segment0NCINvNtB7_10combinator3mapReNtBD_8SelectorNtBD_9SelectorsNtNtBD_5error18InternalParseErrorNvBB_17wildcard_selectorNvMst_BD_B2g_3oneE0NvBB_21member_name_shorthandNCINvBB_14failed_segmentB2g_E0EINtB5_3AltB20_B2g_B2v_E6choiceBD_:
  134|   497k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   497k|        match self.0.parse(input.clone()) {
  136|   493k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  4.07k|          res => res,
  138|       |        }
  139|   497k|      }
_RNvXs3_NtCs9XyeddurhEe_3nom6branchTNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1z_NvBC_17wildcard_selectorB27_E0NCIBA_B1z_NvBC_14slice_selectorB27_E0NCIBA_B1z_NvBC_14index_selectorB27_E0NCIBA_B1z_NCNvBC_8selector0B27_E0NvBC_15failed_selectorEINtB5_3AltReB1z_B27_E6choiceBE_:
  134|  1.80M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.80M|        match self.0.parse(input.clone()) {
  136|  1.78M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  12.9k|          res => res,
  138|       |        }
  139|  1.80M|      }
_RNvXs_NtCs9XyeddurhEe_3nom6branchTNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser13child_segment0NCINvNtB6_8sequence8precededRecNtBC_9SelectorsNtNtBC_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1W_B2e_E0NCINvNtB6_10combinator3cutB1W_B1Z_B2e_NCINvB4_3altB1W_B1Z_B2e_TNCINvB3A_3mapB1W_NtBC_8SelectorB1Z_B2e_NvBA_17wildcard_selectorNvMst_BC_B1Z_3oneE0NvBA_21member_name_shorthandNCINvBA_14failed_segmentB1Z_E0EE0E0E0EINtB4_3AltB1W_B1Z_B2e_E6choiceBC_:
  134|   888k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   888k|        match self.0.parse(input.clone()) {
  136|  75.7k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   812k|          res => res,
  138|       |        }
  139|   888k|      }
_RNvXs_NtCs9XyeddurhEe_3nom6branchTNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvBy_9name_char0ReNtNtBC_5error18InternalParseErrorE0EINtB4_3AltB2I_cB2K_E6choiceBC_:
  134|   137k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   137k|        match self.0.parse(input.clone()) {
  136|  66.9k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  70.7k|          res => res,
  138|       |        }
  139|   137k|      }
_RINvNtCs9XyeddurhEe_3nom6branch3altReBx_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2j_6digit1Bx_BC_EE0B2W_EEBG_:
   47|  3.63M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  3.63M|  mut l: List,
   49|  3.63M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  3.63M|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReBx_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0NvNvNtBG_6parser5float10base_floatE0B2W_EEBG_:
   47|   819k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   819k|  mut l: List,
   49|   819k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   819k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax10ComparableNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtBB_7LiteralBz_B1i_B1i_NvNtBB_6parser7literalE0NCNvB2K_10comparable0EEBB_:
   47|   174k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   174k|  mut l: List,
   49|   174k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   174k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1k_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1k_E0E0B1S_B1S_B1S_NCIB1V_Bx_Bz_cB1k_NCINvNtNtB4_9character8complete4charBx_B1k_E0E0B3s_EEBB_:
   47|   273k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   273k|  mut l: List,
   49|   273k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   273k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtNtBB_3num10JsonNumberBz_B1e_B1e_NvNtBB_6parser6numberE0NCIB1P_Bx_NtNtBB_3str10JsonStringBz_B1e_B1e_NvB2Q_14string_literalE0NCINvB1R_5valueBx_Bz_Bx_B1e_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1e_E0E0B4h_B4h_EEBB_:
   47|   819k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   819k|  mut l: List,
   49|   819k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   819k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser12filter_query0NCB1O_s_0NCINvB1Q_28failed_segment_within_filterBz_E0EEBB_:
   47|  1.36M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.36M|  mut l: List,
   49|  1.36M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.36M|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser7segment0NCB1O_s_0NCINvB1Q_14failed_segmentBz_E0EEBB_:
   47|  18.6k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  18.6k|  mut l: List,
   49|  18.6k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  18.6k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1S_13name_selectorB1f_E0NCIB1Q_Bz_NvB1S_17wildcard_selectorB1f_E0NCIB1Q_Bz_NvB1S_14slice_selectorB1f_E0NCIB1Q_Bz_NvB1S_14index_selectorB1f_E0NCIB1Q_Bz_NCNvB1S_8selector0B1f_E0NvB1S_15failed_selectorEEBB_:
   47|  1.80M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.80M|  mut l: List,
   49|  1.80M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.80M|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvNtBB_6parser17wildcard_selectorNvMst_BB_Bz_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBz_E0EEBB_:
   47|   888k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   888k|  mut l: List,
   49|   888k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   888k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser13child_segment0NCINvNtB4_8sequence8precededBx_cBz_B1g_NCINvNtNtB4_9character8complete4charBx_B1g_E0NCINvNtB4_10combinator3cutBx_Bz_B1g_NCIB0_Bx_Bz_B1g_TNCINvB3L_3mapBx_NtBB_8SelectorBz_B1g_NvB1S_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|   888k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   888k|  mut l: List,
   49|   888k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   888k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser18descendant_segment0NCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvB1S_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBz_E0EEBB_:
   47|  1.38M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.38M|  mut l: List,
   49|  1.38M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.38M|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1o_NCINvNtNtB4_9character8complete4charBx_B1o_E0NCNvNtBD_6parser6string0E0B1W_EEBD_:
   47|  2.60M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.60M|  mut l: List,
   49|  2.60M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.60M|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtNtCs9kVGM5uEiCY_15rsonpath_syntax6parser16RootSelectorTypeNtNtBD_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_cB1x_NCINvNtNtB4_9character8complete4charBx_B1x_E0E0B25_EEBD_:
   47|   803k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   803k|  mut l: List,
   49|   803k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   803k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBF_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1F_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1F_E0E0B2d_EEBF_:
   47|   100k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   100k|  mut l: List,
   49|   100k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   100k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB4_9character8complete4charBx_BA_E0B1A_EEBE_:
   47|   819k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   819k|  mut l: List,
   49|   819k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   819k|}
_RINvNtCs9XyeddurhEe_3nom6branch3altRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBE_6parser21member_name_shorthand10name_firstNCINvNtNtB4_9character8complete7satisfyNCNvB1C_9name_char0Bx_BA_E0EEBE_:
   47|   137k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   137k|  mut l: List,
   49|   137k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   137k|}
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReBz_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2l_6digit1Bz_BE_EE0B2Y_EE0BI_:
   50|  3.63M|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReBz_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0NvNvNtBI_6parser5float10base_floatE0B2Y_EE0BI_:
   50|   819k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax10ComparableNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtBD_7LiteralBB_B1k_B1k_NvNtBD_6parser7literalE0NCNvB2M_10comparable0EE0BD_:
   50|   174k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1m_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1m_E0E0B1U_B1U_B1U_NCIB1X_Bz_BB_cB1m_NCINvNtNtB6_9character8complete4charBz_B1m_E0E0B3u_EE0BD_:
   50|   273k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtNtBD_3num10JsonNumberBB_B1g_B1g_NvNtBD_6parser6numberE0NCIB1R_Bz_NtNtBD_3str10JsonStringBB_B1g_B1g_NvB2S_14string_literalE0NCINvB1T_5valueBz_BB_Bz_B1g_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1g_E0E0B4j_B4j_EE0BD_:
   50|   819k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser12filter_query0NCB1Q_s_0NCINvB1S_28failed_segment_within_filterBB_E0EE0BD_:
   50|  1.36M|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser7segment0NCB1Q_s_0NCINvB1S_14failed_segmentBB_E0EE0BD_:
   50|  18.6k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1U_13name_selectorB1h_E0NCIB1S_BB_NvB1U_17wildcard_selectorB1h_E0NCIB1S_BB_NvB1U_14slice_selectorB1h_E0NCIB1S_BB_NvB1U_14index_selectorB1h_E0NCIB1S_BB_NCNvB1U_8selector0B1h_E0NvB1U_15failed_selectorEE0BD_:
   50|  1.80M|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvNtBD_6parser17wildcard_selectorNvMst_BD_BB_3oneE0NvB2G_21member_name_shorthandNCINvB2G_14failed_segmentBB_E0EE0BD_:
   50|  73.7k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser13child_segment0NCINvNtB6_8sequence8precededBz_cBB_B1i_NCINvNtNtB6_9character8complete4charBz_B1i_E0NCINvNtB6_10combinator3cutBz_BB_B1i_NCIB2_Bz_BB_B1i_TNCINvB3N_3mapBz_NtBD_8SelectorBB_B1i_NvB1U_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1U_21member_name_shorthandNCINvB1U_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|   888k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser18descendant_segment0NCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvB1U_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1U_21member_name_shorthandNCINvB1U_14failed_segmentBB_E0EE0BD_:
   50|   497k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1q_NCINvNtNtB6_9character8complete4charBz_B1q_E0NCNvNtBF_6parser6string0E0B1Y_EE0BF_:
   50|  2.60M|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtNtCs9kVGM5uEiCY_15rsonpath_syntax6parser16RootSelectorTypeNtNtBF_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_cB1z_NCINvNtNtB6_9character8complete4charBz_B1z_E0E0B27_EE0BF_:
   50|   803k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBH_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1H_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1H_E0E0B2f_EE0BH_:
   50|   100k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB6_9character8complete4charBz_BC_E0B1C_EE0BG_:
   50|  3.57k|  move |i: I| l.choice(i)
_RNCINvNtCs9XyeddurhEe_3nom6branch3altRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBG_6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvB1E_9name_char0Bz_BC_E0EE0BG_:
   50|   137k|  move |i: I| l.choice(i)
_RNvXs0_NtCs9XyeddurhEe_3nom6branchTNCINvNtB7_10combinator3mapReNtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorNtB11_9SelectorsNtNtB11_5error18InternalParseErrorNvNtB11_6parser17wildcard_selectorNvMst_B11_B1F_3oneE0NvB2v_21member_name_shorthandNCINvB2v_14failed_segmentB1F_E0EINtB5_3AltBX_B1F_B1V_E6choiceB11_:
  134|  73.7k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  73.7k|        match self.0.parse(input.clone()) {
  136|  68.2k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  5.55k|          res => res,
  138|       |        }
  139|  73.7k|      }
_RNvXs2_NtCs9XyeddurhEe_3nom6branchTNCINvNtB7_10combinator4intoReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num10JsonNumberNtB14_7LiteralNtNtB14_5error18InternalParseErrorB23_NvNtB14_6parser6numberE0NCIBA_BY_NtNtB14_3str10JsonStringB1P_B23_B23_NvB2H_14string_literalE0NCINvBC_5valueBY_B1P_BY_B23_NCINvNtNtB7_5bytes8complete3tagBY_BY_B23_E0E0B4a_B4a_EINtB5_3AltBY_B1P_B23_E6choiceB14_:
  134|   819k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   819k|        match self.0.parse(input.clone()) {
  136|   804k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  14.1k|          res => res,
  138|       |        }
  139|   819k|      }
_RNvXs3_NtCs9XyeddurhEe_3nom6branchTNCINvNtB7_10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpBZ_NtNtB13_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagBZ_BZ_B1P_E0E0Bx_Bx_Bx_NCIBA_BZ_B11_cB1P_NCINvNtNtB7_9character8complete4charBZ_B1P_E0E0B3f_EINtB5_3AltBZ_B11_B1P_E6choiceB13_:
  134|   273k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   273k|        match self.0.parse(input.clone()) {
  136|   273k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    778|          res => res,
  138|       |        }
  139|   273k|      }
_RNvXs_NtCs9XyeddurhEe_3nom6branchTNCINvNtB6_10combinator4intoReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralNtB11_10ComparableNtNtB11_5error18InternalParseErrorB1W_NvNtB11_6parser7literalE0NCNvB2A_10comparable0EINtB4_3AltBX_B1E_B1W_E6choiceB11_:
  134|   174k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   174k|        match self.0.parse(input.clone()) {
  136|   170k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  4.87k|          res => res,
  138|       |        }
  139|   174k|      }
_RNvXs_NtCs9XyeddurhEe_3nom6branchTNCINvNtB6_10combinator5valueReNtNtCs9kVGM5uEiCY_15rsonpath_syntax6parser16RootSelectorTypecNtNtB14_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Z_E0E0Bw_EINtB4_3AltBY_B10_B1Z_E6choiceB14_:
  134|   803k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   803k|        match self.0.parse(input.clone()) {
  136|  34.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   768k|          res => res,
  138|       |        }
  139|   803k|      }
_RNvXs_NtCs9XyeddurhEe_3nom6branchTNCINvNtB6_10combinator5valueReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpBY_NtNtB16_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBY_BY_B29_E0E0Bw_EINtB4_3AltBY_B10_B29_E6choiceB16_:
  134|   100k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   100k|        match self.0.parse(input.clone()) {
  136|  99.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.18k|          res => res,
  138|       |        }
  139|   100k|      }

_RINvNtNtCs9XyeddurhEe_3nom5bytes8complete11tag_no_caseReBQ_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorEBZ_:
   74|   819k|pub fn tag_no_case<T, Input, Error: ParseError<Input>>(
   75|   819k|  tag: T,
   76|   819k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   77|   819k|where
   78|   819k|  Input: InputTake + Compare<T>,
   79|   819k|  T: InputLength + Clone,
   80|   819k|{
   81|       |  move |i: Input| {
   82|       |    let tag_len = tag.input_len();
   83|       |    let t = tag.clone();
   84|       |
   85|       |    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|       |        let e: ErrorKind = ErrorKind::Tag;
   89|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|       |    res
   93|       |  }
   94|   819k|}
_RINvNtNtCs9XyeddurhEe_3nom5bytes8complete3tagReBH_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|  7.49M|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  7.49M|  tag: T,
   34|  7.49M|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  7.49M|where
   36|  7.49M|  Input: InputTake + Compare<T>,
   37|  7.49M|  T: InputLength + Clone,
   38|  7.49M|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  7.49M|}
_RNCINvNtNtCs9XyeddurhEe_3nom5bytes8complete11tag_no_caseReBS_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0B11_:
   81|  14.1k|  move |i: Input| {
   82|  14.1k|    let tag_len = tag.input_len();
   83|  14.1k|    let t = tag.clone();
   84|       |
   85|  14.1k|    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|  3.57k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|  10.5k|        let e: ErrorKind = ErrorKind::Tag;
   89|  10.5k|        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|  14.1k|    res
   93|  14.1k|  }
_RNCINvNtNtCs9XyeddurhEe_3nom5bytes8complete3tagReBJ_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|  7.44M|  move |i: Input| {
   40|  7.44M|    let tag_len = tag.input_len();
   41|  7.44M|    let t = tag.clone();
   42|  7.44M|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|   515k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|  6.92M|        let e: ErrorKind = ErrorKind::Tag;
   46|  6.92M|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|  7.44M|    res
   50|  7.44M|  }

_RINvNtNtCs9XyeddurhEe_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECs9kVGM5uEiCY_15rsonpath_syntax:
   32|  3.45M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  3.45M|where
   34|  3.45M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  3.45M|  <I as InputIter>::Item: AsChar,
   36|  3.45M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  3.45M|}
_RINvNtNtCs9XyeddurhEe_3nom9character8complete4charReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|  22.4M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  22.4M|where
   34|  22.4M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  22.4M|  <I as InputIter>::Item: AsChar,
   36|  22.4M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  22.4M|}
_RINvNtNtCs9XyeddurhEe_3nom9character8complete4charReuECs9kVGM5uEiCY_15rsonpath_syntax:
   32|  2.36M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  2.36M|where
   34|  2.36M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  2.36M|  <I as InputIter>::Item: AsChar,
   36|  2.36M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  2.36M|}
_RINvNtNtCs9XyeddurhEe_3nom9character8complete6digit1ReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|  4.46M|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|  4.46M|where
  437|  4.46M|  T: InputTakeAtPosition,
  438|  4.46M|  <T as InputTakeAtPosition>::Item: AsChar,
  439|  4.46M|{
  440|  4.46M|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|  4.46M|}
_RINvNtNtCs9XyeddurhEe_3nom9character8complete6one_ofReBO_uECs9kVGM5uEiCY_15rsonpath_syntax:
   89|  2.11M|pub fn one_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
   90|  2.11M|where
   91|  2.11M|  I: Slice<RangeFrom<usize>> + InputIter,
   92|  2.11M|  <I as InputIter>::Item: AsChar + Copy,
   93|  2.11M|  T: FindToken<<I as InputIter>::Item>,
   94|  2.11M|{
   95|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|       |  }
   99|  2.11M|}
_RINvNtNtCs9XyeddurhEe_3nom9character8complete7satisfyNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|   697k|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|   697k|where
   63|   697k|  I: Slice<RangeFrom<usize>> + InputIter,
   64|   697k|  <I as InputIter>::Item: AsChar,
   65|   697k|  F: Fn(char) -> bool,
   66|   697k|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|   697k|}
_RINvNtNtCs9XyeddurhEe_3nom9character8complete7satisfyNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|   137k|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|   137k|where
   63|   137k|  I: Slice<RangeFrom<usize>> + InputIter,
   64|   137k|  <I as InputIter>::Item: AsChar,
   65|   137k|  F: Fn(char) -> bool,
   66|   137k|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|   137k|}
_RNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0Cs9kVGM5uEiCY_15rsonpath_syntax:
   37|  3.45M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  3.45M|  }) {
   41|   426k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  3.03M|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  3.45M|  }
_RNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|  18.2M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  18.2M|  }) {
   41|  3.36M|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  14.8M|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  18.2M|  }
_RNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReuE0Cs9kVGM5uEiCY_15rsonpath_syntax:
   37|  2.36M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  2.36M|  }) {
   41|  1.71M|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   650k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  2.36M|  }
_RNCINvNtNtCs9XyeddurhEe_3nom9character8complete6digit1ReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|  4.64M|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RNCINvNtNtCs9XyeddurhEe_3nom9character8complete6one_ofReBQ_uE0Cs9kVGM5uEiCY_15rsonpath_syntax:
   95|  2.11M|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|  1.36M|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|   750k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|  2.11M|  }
_RNCINvNtNtCs9XyeddurhEe_3nom9character8complete7satisfyNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|   697k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|   697k|  }) {
   72|   136k|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|   561k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|   697k|  }
_RNCINvNtNtCs9XyeddurhEe_3nom9character8complete7satisfyNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|  66.9k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|  66.9k|  }) {
   72|    884|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|  66.0k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|  66.9k|  }
_RNCNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00Cs9kVGM5uEiCY_15rsonpath_syntax:
   37|  2.50M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  2.50M|    let b = t.as_char() == c;
   39|  2.50M|    (&c, b)
   40|  2.50M|  }) {
_RNCNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|  18.1M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  18.1M|    let b = t.as_char() == c;
   39|  18.1M|    (&c, b)
   40|  18.1M|  }) {
_RNCNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReuE00Cs9kVGM5uEiCY_15rsonpath_syntax:
   37|  2.36M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  2.36M|    let b = t.as_char() == c;
   39|  2.36M|    (&c, b)
   40|  2.36M|  }) {
_RNCNCINvNtNtCs9XyeddurhEe_3nom9character8complete6one_ofReBS_uE00Cs9kVGM5uEiCY_15rsonpath_syntax:
   95|  1.63M|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
_RNCNCINvNtNtCs9XyeddurhEe_3nom9character8complete7satisfyNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|   696k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|   696k|    let c = t.as_char();
   69|   696k|    let b = cond(c);
   70|   696k|    (c, b)
   71|   696k|  }) {
_RNCNCINvNtNtCs9XyeddurhEe_3nom9character8complete7satisfyNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|  65.6k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|  65.6k|    let c = t.as_char();
   69|  65.6k|    let b = cond(c);
   70|  65.6k|    (c, b)
   71|  65.6k|  }) {

_RINvNtCs9XyeddurhEe_3nom10combinator3cutReNtCs9kVGM5uEiCY_15rsonpath_syntax11LogicalExprNtNtBG_5error18InternalParseErrorNCNvNvNtBG_6parser12logical_expr12parse_single0EBG_:
  631|  1.71M|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  1.71M|where
  633|  1.71M|  F: Parser<I, O, E>,
  634|  1.71M|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  1.71M|}
_RINvNtCs9XyeddurhEe_3nom10combinator3cutReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvNtBG_6parser17wildcard_selectorNvMst_BG_BE_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBE_E0EE0EBG_:
  631|   888k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|   888k|where
  633|   888k|  F: Parser<I, O, E>,
  634|   888k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|   888k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3cutReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCNvNtBG_6parser18descendant_segment0NCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvB2s_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2s_21member_name_shorthandNCINvB2s_14failed_segmentBE_E0EE0EBG_:
  631|  1.38M|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  1.38M|where
  633|  1.38M|  F: Parser<I, O, E>,
  634|  1.38M|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  1.38M|}
_RINvNtCs9XyeddurhEe_3nom10combinator3mapReBC_NtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1n_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  2.35M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.35M|where
   75|  2.35M|  F: Parser<I, O1, E>,
   76|  2.35M|  G: FnMut(O1) -> O2,
   77|  2.35M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.35M|}
_RINvNtCs9XyeddurhEe_3nom10combinator3mapReNtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMst_BG_B1k_3oneEBG_:
   73|  2.27M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.27M|where
   75|  2.27M|  F: Parser<I, O1, E>,
   76|  2.27M|  G: FnMut(O1) -> O2,
   77|  2.27M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.27M|}
_RINvNtCs9XyeddurhEe_3nom10combinator3mapReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1y_TNCNvNtBG_6parser13child_segment0NCINvNtB4_8sequence8precededBC_cBE_B1y_NCINvNtNtB4_9character8complete4charBC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCIB28_BC_BE_B1y_TNCIB0_BC_NtBG_8SelectorBE_B1y_NvB2F_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2F_21member_name_shorthandNCINvB2F_14failed_segmentBE_E0EE0E0E0EE0NcNtB1l_5Child0EBG_:
   73|   888k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   888k|where
   75|   888k|  F: Parser<I, O1, E>,
   76|   888k|  G: FnMut(O1) -> O2,
   77|   888k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   888k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3mapReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1y_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCINvNtB4_6branch3altBC_BE_B1y_TNCNvNtBG_6parser18descendant_segment0NCIB0_BC_NtBG_8SelectorBE_B1y_NvB4n_17wildcard_selectorNvMst_BG_BE_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBE_E0EE0E0E0NcNtB1l_10Descendant0EBG_:
   73|  1.38M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.38M|where
   75|  1.38M|  F: Parser<I, O1, E>,
   76|  1.38M|  G: FnMut(O1) -> O2,
   77|  1.38M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.38M|}
_RINvNtCs9XyeddurhEe_3nom10combinator3mapReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num9JsonFloatNtBG_10JsonNumberNtNtBI_5error18InternalParseErrorNvNtBI_6parser5floatNCNvB2h_6number0EBI_:
   73|   819k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   819k|where
   75|   819k|  F: Parser<I, O1, E>,
   76|   819k|  G: FnMut(O1) -> O2,
   77|   819k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   819k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3mapReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNvNtBI_6parser14string_literalNcNtB1t_4Name0EBI_:
   73|  1.80M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.80M|where
   75|  1.80M|  F: Parser<I, O1, E>,
   76|  1.80M|  G: FnMut(O1) -> O2,
   77|  1.80M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.80M|}
_RINvNtCs9XyeddurhEe_3nom10combinator3mapReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str17JsonStringBuilderNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBE_B1P_NCINvB2_4peekBC_cB1P_NvNvNtBI_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BC_cB1P_NvB3m_9name_charNCB3m_0NvMs_BG_BE_3newBE_E0E0NCB3m_s_0EBI_:
   73|   560k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   560k|where
   75|   560k|  F: Parser<I, O1, E>,
   76|   560k|  G: FnMut(O1) -> O2,
   77|   560k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   560k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3optReBC_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BC_BH_NCINvNtNtB4_5bytes8complete11tag_no_caseBC_BC_BH_E0NCIB1J_BC_INtNtCshZc3FwCJ069_4core6option6OptioncEBC_BH_NCIB0_BC_cBH_NCINvNtB4_6branch3altBC_cBH_TNCINvNtNtB4_9character8complete4charBC_BH_E0B4J_EE0E0INvB4O_6digit1BC_BH_EE0E0EBL_:
  239|   819k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   819k|where
  241|   819k|  F: Parser<I, O, E>,
  242|   819k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   819k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3optReBC_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBC_BH_NCINvNtNtB4_9character8complete4charBC_BH_E0INvB2n_6digit1BC_BH_EE0EBL_:
  239|   819k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   819k|where
  241|   819k|  F: Parser<I, O, E>,
  242|   819k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   819k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3optReBC_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtBL_6parser17ignore_whitespaceBC_NvB1L_3intBH_E0EBL_:
  239|  1.57M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.57M|where
  241|  1.57M|  F: Parser<I, O, E>,
  242|  1.57M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.57M|}
_RINvNtCs9XyeddurhEe_3nom10combinator3optReBC_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNtBL_6parser3intEBL_:
  239|  1.78M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.78M|where
  241|  1.78M|  F: Parser<I, O, E>,
  242|  1.78M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.78M|}
_RINvNtCs9XyeddurhEe_3nom10combinator3optReINtNtCshZc3FwCJ069_4core6option6OptionBC_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1o_6parser17ignore_whitespaceBE_NCINvNtB4_8sequence8precededBC_cBE_B1k_NCINvNtNtB4_9character8complete4charBC_B1k_E0NCIB0_BC_BC_B1k_NCIB2m_BC_NvB2o_3intB1k_E0E0E0B1k_E0EB1o_:
  239|   785k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   785k|where
  241|   785k|  F: Parser<I, O, E>,
  242|   785k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   785k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3optReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBK_5error18InternalParseErrorNCINvBI_17ignore_whitespaceBE_NCINvNtB4_6branch3altBC_BE_B1K_TNCINvB2_5valueBC_BE_BC_B1K_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1K_E0E0B3h_EE0B1K_E0EBK_:
  239|   100k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   100k|where
  241|   100k|  F: Parser<I, O, E>,
  242|   100k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   100k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3optRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBC_cBF_TNCINvNtNtB4_9character8complete4charBC_BF_E0B27_EE0EBJ_:
  239|   819k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   819k|where
  241|   819k|  F: Parser<I, O, E>,
  242|   819k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   819k|}
_RINvNtCs9XyeddurhEe_3nom10combinator3optRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBC_BF_E0EBJ_:
  239|  2.36M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  2.36M|where
  241|  2.36M|  F: Parser<I, O, E>,
  242|  2.36M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  2.36M|}
_RINvNtCs9XyeddurhEe_3nom10combinator4intoReNtCs9kVGM5uEiCY_15rsonpath_syntax11LogicalExprNtBH_8SelectorNtNtBH_5error18InternalParseErrorB1D_NCINvNtB4_8sequence8precededBD_cBF_B1D_NCINvNtNtB4_9character8complete4charBD_B1D_E0NCINvNtBH_6parser17ignore_whitespaceBF_NCNvB3F_15filter_selector0B1D_E0E0EBH_:
  663|   950k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|   950k|where
  665|   950k|  O1: Into<O2>,
  666|   950k|  E1: Into<E2>,
  667|   950k|  E1: ParseError<I>,
  668|   950k|  E2: ParseError<I>,
  669|   950k|  F: Parser<I, O1, E1>,
  670|   950k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|   950k|}
_RINvNtCs9XyeddurhEe_3nom10combinator4intoReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralNtBH_10ComparableNtNtBH_5error18InternalParseErrorB1B_NvNtBH_6parser7literalEBH_:
  663|   174k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|   174k|where
  665|   174k|  O1: Into<O2>,
  666|   174k|  E1: Into<E2>,
  667|   174k|  E1: ParseError<I>,
  668|   174k|  E2: ParseError<I>,
  669|   174k|  F: Parser<I, O1, E1>,
  670|   174k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|   174k|}
_RINvNtCs9XyeddurhEe_3nom10combinator4intoReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num10JsonNumberNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1H_NvNtBJ_6parser6numberEBJ_:
  663|   819k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|   819k|where
  665|   819k|  O1: Into<O2>,
  666|   819k|  E1: Into<E2>,
  667|   819k|  E1: ParseError<I>,
  668|   819k|  E2: ParseError<I>,
  669|   819k|  F: Parser<I, O1, E1>,
  670|   819k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|   819k|}
_RINvNtCs9XyeddurhEe_3nom10combinator4intoReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1H_NvNtBJ_6parser14string_literalEBJ_:
  663|   819k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|   819k|where
  665|   819k|  O1: Into<O2>,
  666|   819k|  E1: Into<E2>,
  667|   819k|  E1: ParseError<I>,
  668|   819k|  E2: ParseError<I>,
  669|   819k|  F: Parser<I, O1, E1>,
  670|   819k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|   819k|}
_RINvNtCs9XyeddurhEe_3nom10combinator4peekRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNvNtBK_6parser21member_name_shorthand10name_firstEBK_:
  304|   560k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|   560k|where
  306|   560k|  F: Parser<I, O, E>,
  307|   560k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|   560k|}
_RINvNtCs9XyeddurhEe_3nom10combinator4peekRecuNCINvNtNtB4_9character8complete4charBD_uE0ECs9kVGM5uEiCY_15rsonpath_syntax:
  304|  5.89k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|  5.89k|where
  306|  5.89k|  F: Parser<I, O, E>,
  307|  5.89k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|  5.89k|}
_RINvNtCs9XyeddurhEe_3nom10combinator4peekRecuNCINvNtNtB4_9character8complete6one_ofBD_BD_uE0ECs9kVGM5uEiCY_15rsonpath_syntax:
  304|  2.11M|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|  2.11M|where
  306|  2.11M|  F: Parser<I, O, E>,
  307|  2.11M|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|  2.11M|}
_RINvNtCs9XyeddurhEe_3nom10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1u_E0EBI_:
  453|  1.09M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  1.09M|  val: O1,
  455|  1.09M|  mut parser: F,
  456|  1.09M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  1.09M|where
  458|  1.09M|  F: Parser<I, O2, E>,
  459|  1.09M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  1.09M|}
_RINvNtCs9XyeddurhEe_3nom10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpcNtNtBI_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1s_E0EBI_:
  453|   547k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   547k|  val: O1,
  455|   547k|  mut parser: F,
  456|   547k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   547k|where
  458|   547k|  F: Parser<I, O2, E>,
  459|   547k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   547k|}
_RINvNtCs9XyeddurhEe_3nom10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1o_E0EBI_:
  453|  2.45M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  2.45M|  val: O1,
  455|  2.45M|  mut parser: F,
  456|  2.45M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  2.45M|where
  458|  2.45M|  F: Parser<I, O2, E>,
  459|  2.45M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  2.45M|}
_RINvNtCs9XyeddurhEe_3nom10combinator5valueReNtNtCs9kVGM5uEiCY_15rsonpath_syntax6parser16RootSelectorTypecNtNtBK_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1F_E0EBK_:
  453|  1.60M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  1.60M|  val: O1,
  455|  1.60M|  mut parser: F,
  456|  1.60M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  1.60M|where
  458|  1.60M|  F: Parser<I, O2, E>,
  459|  1.60M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  1.60M|}
_RINvNtCs9XyeddurhEe_3nom10combinator5valueReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpBE_NtNtBM_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1P_E0EBM_:
  453|   200k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   200k|  val: O1,
  455|   200k|  mut parser: F,
  456|   200k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   200k|where
  458|   200k|  F: Parser<I, O2, E>,
  459|   200k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   200k|}
_RINvNtCs9XyeddurhEe_3nom10combinator9recognizeReBI_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2Y_6digit1BI_BN_EE0B3B_EE0EBR_:
  506|  3.63M|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  3.63M|  mut parser: F,
  508|  3.63M|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  3.63M|where
  510|  3.63M|  F: Parser<I, O, E>,
  511|  3.63M|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  3.63M|}
_RINvNtCs9XyeddurhEe_3nom10combinator9recognizeReBI_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0NvNvNtBR_6parser5float10base_floatE0B3B_EE0EBR_:
  506|   819k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   819k|  mut parser: F,
  508|   819k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   819k|where
  510|   819k|  F: Parser<I, O, E>,
  511|   819k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   819k|}
_RINvNtCs9XyeddurhEe_3nom10combinator9recognizeReTBI_INtNtCshZc3FwCJ069_4core6option6OptionBI_EBO_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence5tupleBI_BK_B1y_TINvNtNtB4_9character8complete6digit1BI_B1y_ENCINvB2_3optBI_BI_B1y_NCINvB2C_8precededBI_cBI_B1y_NCINvB3a_4charBI_B1y_E0B37_E0E0NCIB3S_BI_BI_B1y_NCIB4e_BI_BI_BI_B1y_NCINvNtNtB4_5bytes8complete11tag_no_caseBI_BI_B1y_E0NCIB4e_BI_IBP_cEBI_B1y_NCIB3S_BI_cB1y_NCINvNtB4_6branch3altBI_cB1y_TB4E_B4E_EE0E0B37_E0E0E0EE0EB1C_:
  506|   819k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   819k|  mut parser: F,
  508|   819k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   819k|where
  510|   819k|  F: Parser<I, O, E>,
  511|   819k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   819k|}
_RNCINvNtCs9XyeddurhEe_3nom10combinator3cutReNtCs9kVGM5uEiCY_15rsonpath_syntax11LogicalExprNtNtBI_5error18InternalParseErrorNCNvNvNtBI_6parser12logical_expr12parse_single0E0BI_:
  635|  1.71M|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  1.71M|    rest => rest,
  638|  1.71M|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3cutReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvNtBI_6parser17wildcard_selectorNvMst_BI_BG_3oneE0NvB32_21member_name_shorthandNCINvB32_14failed_segmentBG_E0EE0E0BI_:
  635|  73.7k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  73.7k|    rest => rest,
  638|  73.7k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3cutReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNCNvNtBI_6parser18descendant_segment0NCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvB2u_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2u_21member_name_shorthandNCINvB2u_14failed_segmentBG_E0EE0E0BI_:
  635|   497k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|   497k|    rest => rest,
  638|   497k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3mapReBE_NtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1p_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  2.35M|  move |input: I| {
   79|  2.35M|    let (input, o1) = parser.parse(input)?;
   80|  13.4k|    Ok((input, f(o1)))
   81|  2.35M|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3mapReNtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNvNtBI_6parser17wildcard_selectorNvMst_BI_B1m_3oneE0BI_:
   78|   567k|  move |input: I| {
   79|   567k|    let (input, o1) = parser.parse(input)?;
   80|  7.09k|    Ok((input, f(o1)))
   81|   567k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3mapReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1A_TNCNvNtBI_6parser13child_segment0NCINvNtB6_8sequence8precededBE_cBG_B1A_NCINvNtNtB6_9character8complete4charBE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCIB2a_BE_BG_B1A_TNCIB2_BE_NtBI_8SelectorBG_B1A_NvB2H_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2H_21member_name_shorthandNCINvB2H_14failed_segmentBG_E0EE0E0E0EE0NcNtB1n_5Child0E0BI_:
   78|   888k|  move |input: I| {
   79|   888k|    let (input, o1) = parser.parse(input)?;
   80|  49.6k|    Ok((input, f(o1)))
   81|   888k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3mapReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1A_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCINvNtB6_6branch3altBE_BG_B1A_TNCNvNtBI_6parser18descendant_segment0NCIB2_BE_NtBI_8SelectorBG_B1A_NvB4p_17wildcard_selectorNvMst_BI_BG_3oneE0NvB4p_21member_name_shorthandNCINvB4p_14failed_segmentBG_E0EE0E0E0NcNtB1n_10Descendant0E0BI_:
   78|  1.38M|  move |input: I| {
   79|  1.38M|    let (input, o1) = parser.parse(input)?;
   80|  25.5k|    Ok((input, f(o1)))
   81|  1.38M|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3mapReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num9JsonFloatNtBI_10JsonNumberNtNtBK_5error18InternalParseErrorNvNtBK_6parser5floatNCNvB2j_6number0E0BK_:
   78|   819k|  move |input: I| {
   79|   819k|    let (input, o1) = parser.parse(input)?;
   80|  12.3k|    Ok((input, f(o1)))
   81|   819k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3mapReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNvNtBK_6parser14string_literalNcNtB1v_4Name0E0BK_:
   78|  1.80M|  move |input: I| {
   79|  1.80M|    let (input, o1) = parser.parse(input)?;
   80|  5.02k|    Ok((input, f(o1)))
   81|  1.80M|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3mapReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str17JsonStringBuilderNtBK_9SelectorsNtNtBK_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBG_B1R_NCINvB4_4peekBE_cB1R_NvNvNtBK_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BE_cB1R_NvB3o_9name_charNCB3o_0NvMs_BI_BG_3newBG_E0E0NCB3o_s_0E0BK_:
   78|   560k|  move |input: I| {
   79|   560k|    let (input, o1) = parser.parse(input)?;
   80|  66.0k|    Ok((input, f(o1)))
   81|   560k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3optReBE_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BE_BJ_NCINvNtNtB6_5bytes8complete11tag_no_caseBE_BE_BJ_E0NCIB1L_BE_INtNtCshZc3FwCJ069_4core6option6OptioncEBE_BJ_NCIB2_BE_cBJ_NCINvNtB6_6branch3altBE_cBJ_TNCINvNtNtB6_9character8complete4charBE_BJ_E0B4L_EE0E0INvB4Q_6digit1BE_BJ_EE0E0E0BN_:
  243|  14.1k|  move |input: I| {
  244|  14.1k|    let i = input.clone();
  245|  14.1k|    match f.parse(input) {
  246|  1.61k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  12.4k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  14.1k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3optReBE_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBE_BJ_NCINvNtNtB6_9character8complete4charBE_BJ_E0INvB2p_6digit1BE_BJ_EE0E0BN_:
  243|  14.1k|  move |input: I| {
  244|  14.1k|    let i = input.clone();
  245|  14.1k|    match f.parse(input) {
  246|  1.29k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  12.8k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  14.1k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3optReBE_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtBN_6parser17ignore_whitespaceBE_NvB1N_3intBJ_E0E0BN_:
  243|   862k|  move |input: I| {
  244|   862k|    let i = input.clone();
  245|   862k|    match f.parse(input) {
  246|  6.56k|      Ok((i, o)) => Ok((i, Some(o))),
  247|   855k|      Err(Err::Error(_)) => Ok((i, None)),
  248|    937|      Err(e) => Err(e),
  249|       |    }
  250|   862k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3optReBE_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNtBN_6parser3intE0BN_:
  243|  1.78M|  move |input: I| {
  244|  1.78M|    let i = input.clone();
  245|  1.78M|    match f.parse(input) {
  246|  47.6k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  1.73M|      Err(Err::Error(_)) => Ok((i, None)),
  248|  1.03k|      Err(e) => Err(e),
  249|       |    }
  250|  1.78M|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3optReINtNtCshZc3FwCJ069_4core6option6OptionBE_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1q_6parser17ignore_whitespaceBG_NCINvNtB6_8sequence8precededBE_cBG_B1m_NCINvNtNtB6_9character8complete4charBE_B1m_E0NCIB2_BE_BE_B1m_NCIB2o_BE_NvB2q_3intB1m_E0E0E0B1m_E0E0B1q_:
  243|   785k|  move |input: I| {
  244|   785k|    let i = input.clone();
  245|   785k|    match f.parse(input) {
  246|  76.0k|      Ok((i, o)) => Ok((i, Some(o))),
  247|   709k|      Err(Err::Error(_)) => Ok((i, None)),
  248|    359|      Err(e) => Err(e),
  249|       |    }
  250|   785k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3optReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBM_5error18InternalParseErrorNCINvBK_17ignore_whitespaceBG_NCINvNtB6_6branch3altBE_BG_B1M_TNCINvB4_5valueBE_BG_BE_B1M_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1M_E0E0B3j_EE0B1M_E0E0BM_:
  243|   100k|  move |input: I| {
  244|   100k|    let i = input.clone();
  245|   100k|    match f.parse(input) {
  246|  2.00k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  98.3k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|   100k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3optRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBE_cBH_TNCINvNtNtB6_9character8complete4charBE_BH_E0B29_EE0E0BL_:
  243|  3.57k|  move |input: I| {
  244|  3.57k|    let i = input.clone();
  245|  3.57k|    match f.parse(input) {
  246|    465|      Ok((i, o)) => Ok((i, Some(o))),
  247|  3.10k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  3.57k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator3optRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBE_BH_E0E0BL_:
  243|  2.36M|  move |input: I| {
  244|  2.36M|    let i = input.clone();
  245|  2.36M|    match f.parse(input) {
  246|  2.42k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  2.35M|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  2.36M|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator4intoReNtCs9kVGM5uEiCY_15rsonpath_syntax11LogicalExprNtBJ_8SelectorNtNtBJ_5error18InternalParseErrorB1F_NCINvNtB6_8sequence8precededBF_cBH_B1F_NCINvNtNtB6_9character8complete4charBF_B1F_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB3H_15filter_selector0B1F_E0E0E0BJ_:
  672|   950k|  move |input: I| match parser.parse(input) {
  673|  96.8k|    Ok((i, o)) => Ok((i, o.into())),
  674|   305k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|   547k|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|   950k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator4intoReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralNtBJ_10ComparableNtNtBJ_5error18InternalParseErrorB1D_NvNtBJ_6parser7literalE0BJ_:
  672|   174k|  move |input: I| match parser.parse(input) {
  673|  4.27k|    Ok((i, o)) => Ok((i, o.into())),
  674|   170k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|    599|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|   174k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator4intoReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num10JsonNumberNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1J_NvNtBL_6parser6numberE0BL_:
  672|   819k|  move |input: I| match parser.parse(input) {
  673|  12.3k|    Ok((i, o)) => Ok((i, o.into())),
  674|   804k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|  1.73k|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|   819k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator4intoReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1J_NvNtBL_6parser14string_literalE0BL_:
  672|   804k|  move |input: I| match parser.parse(input) {
  673|  1.24k|    Ok((i, o)) => Ok((i, o.into())),
  674|   803k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|    589|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|   804k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator4peekRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNvNtBM_6parser21member_name_shorthand10name_firstE0BM_:
  308|   560k|  move |input: I| {
  309|   560k|    let i = input.clone();
  310|   560k|    match f.parse(input) {
  311|  66.0k|      Ok((_, o)) => Ok((i, o)),
  312|   494k|      Err(e) => Err(e),
  313|       |    }
  314|   560k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator4peekRecuNCINvNtNtB6_9character8complete4charBF_uE0E0Cs9kVGM5uEiCY_15rsonpath_syntax:
  308|  5.89k|  move |input: I| {
  309|  5.89k|    let i = input.clone();
  310|  5.89k|    match f.parse(input) {
  311|    679|      Ok((_, o)) => Ok((i, o)),
  312|  5.21k|      Err(e) => Err(e),
  313|       |    }
  314|  5.89k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator4peekRecuNCINvNtNtB6_9character8complete6one_ofBF_BF_uE0E0Cs9kVGM5uEiCY_15rsonpath_syntax:
  308|  2.11M|  move |input: I| {
  309|  2.11M|    let i = input.clone();
  310|  2.11M|    match f.parse(input) {
  311|  1.36M|      Ok((_, o)) => Ok((i, o)),
  312|   750k|      Err(e) => Err(e),
  313|       |    }
  314|  2.11M|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1w_E0E0BK_:
  460|  1.09M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpcNtNtBK_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1u_E0E0BK_:
  460|   370k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1q_E0E0BK_:
  460|  2.40M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtNtCs9kVGM5uEiCY_15rsonpath_syntax6parser16RootSelectorTypecNtNtBM_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1H_E0E0BM_:
  460|   837k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpBG_NtNtBO_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1R_E0E0BO_:
  460|   199k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs9XyeddurhEe_3nom10combinator9recognizeReBK_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB30_6digit1BK_BP_EE0B3D_EE0E0BT_:
  512|  3.63M|  move |input: I| {
  513|  3.63M|    let i = input.clone();
  514|  3.63M|    match parser.parse(i) {
  515|  99.9k|      Ok((i, _)) => {
  516|  99.9k|        let index = input.offset(&i);
  517|  99.9k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  3.53M|      Err(e) => Err(e),
  520|       |    }
  521|  3.63M|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator9recognizeReBK_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0NvNvNtBT_6parser5float10base_floatE0B3D_EE0E0BT_:
  512|   819k|  move |input: I| {
  513|   819k|    let i = input.clone();
  514|   819k|    match parser.parse(i) {
  515|  14.1k|      Ok((i, _)) => {
  516|  14.1k|        let index = input.offset(&i);
  517|  14.1k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|   804k|      Err(e) => Err(e),
  520|       |    }
  521|   819k|  }
_RNCINvNtCs9XyeddurhEe_3nom10combinator9recognizeReTBK_INtNtCshZc3FwCJ069_4core6option6OptionBK_EBQ_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence5tupleBK_BM_B1A_TINvNtNtB6_9character8complete6digit1BK_B1A_ENCINvB4_3optBK_BK_B1A_NCINvB2E_8precededBK_cBK_B1A_NCINvB3c_4charBK_B1A_E0B39_E0E0NCIB3U_BK_BK_B1A_NCIB4g_BK_BK_BK_B1A_NCINvNtNtB6_5bytes8complete11tag_no_caseBK_BK_B1A_E0NCIB4g_BK_IBR_cEBK_B1A_NCIB3U_BK_cB1A_NCINvNtB6_6branch3altBK_cB1A_TB4G_B4G_EE0E0B39_E0E0E0EE0E0B1E_:
  512|   819k|  move |input: I| {
  513|   819k|    let i = input.clone();
  514|   819k|    match parser.parse(i) {
  515|  14.1k|      Ok((i, _)) => {
  516|  14.1k|        let index = input.offset(&i);
  517|  14.1k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|   805k|      Err(e) => Err(e),
  520|       |    }
  521|   819k|  }
_RNCNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpBI_NtNtBM_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1y_E0E00BM_:
  460|  2.78k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpcNtNtBM_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1w_E0E00BM_:
  460|   172k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtNtCs9kVGM5uEiCY_15rsonpath_syntax6parser16RootSelectorTypecNtNtBO_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1J_E0E00BO_:
  460|   771k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCNCINvNtCs9XyeddurhEe_3nom10combinator5valueReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpBI_NtNtBQ_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1T_E0E00BQ_:
  460|  2.00k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))

_RNvXs7_NtCs9XyeddurhEe_3nom5erroruINtB5_10ParseErrorReE15from_error_kindCs9kVGM5uEiCY_15rsonpath_syntax:
  122|  1.40M|  fn from_error_kind(_: I, _: ErrorKind) -> Self {}
_RNvXs_NtCs9XyeddurhEe_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCs9kVGM5uEiCY_15rsonpath_syntax:
   73|  29.8M|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  29.8M|    Error { input, code: kind }
   75|  29.8M|  }
_RNvXs_NtCs9XyeddurhEe_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCs9kVGM5uEiCY_15rsonpath_syntax:
   77|  8.04M|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|  8.04M|    other
   79|  8.04M|  }
_RNvYINtNtCs9XyeddurhEe_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCs9kVGM5uEiCY_15rsonpath_syntax:
   26|  3.03M|  fn from_char(input: I, _: char) -> Self {
   27|  3.03M|    Self::from_error_kind(input, ErrorKind::Char)
   28|  3.03M|  }
_RNvYuINtNtCs9XyeddurhEe_3nom5error10ParseErrorReE9from_charCs9kVGM5uEiCY_15rsonpath_syntax:
   26|   650k|  fn from_char(input: I, _: char) -> Self {
   27|   650k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   650k|  }
_RNvYNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorINtNtCs9XyeddurhEe_3nom5error10ParseErrorReE2orB6_:
   32|  16.3M|  fn or(self, other: Self) -> Self {
   33|  16.3M|    other
   34|  16.3M|  }
_RNvYNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorINtNtCs9XyeddurhEe_3nom5error10ParseErrorReE9from_charB6_:
   26|  14.8M|  fn from_char(input: I, _: char) -> Self {
   27|  14.8M|    Self::from_error_kind(input, ErrorKind::Char)
   28|  14.8M|  }

_RNvXsa_NtCs9XyeddurhEe_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|  4.46M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.46M|    self(i)
  326|  4.46M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|  16.8M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  16.8M|    self(i)
  326|  16.8M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtNtB7_9character8complete4charReuE0INtB5_6ParserB18_cuE5parseCs9kVGM5uEiCY_15rsonpath_syntax:
  324|  5.89k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.89k|    self(i)
  326|  5.89k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtNtB7_9character8complete6one_ofReB1a_uE0INtB5_6ParserB1a_cuE5parseCs9kVGM5uEiCY_15rsonpath_syntax:
  324|  2.11M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.11M|    self(i)
  326|  2.11M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtNtB7_9character8complete7satisfyNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB1j_5error18InternalParseErrorE0INtB5_6ParserB2t_cB2v_E5parseB1j_:
  324|  66.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  66.9k|    self(i)
  326|  66.9k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_5multi10fold_many0RecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNvNtB17_6parser21member_name_shorthand9name_charNCB24_0NvMs_NtB17_3strNtB32_17JsonStringBuilder3newB3c_E0INtB5_6ParserB10_B3c_B13_E5parseB17_:
  324|  66.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  66.0k|    self(i)
  326|  66.0k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence5tupleReTBX_INtNtCshZc3FwCJ069_4core6option6OptionBX_EB13_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB7_9character8complete6digit1BX_B1O_ENCINvNtB7_10combinator3optBX_BX_B1O_NCINvBD_8precededBX_cBX_B1O_NCINvB2R_4charBX_B1O_E0B2O_E0E0NCIB3z_BX_BX_B1O_NCIB49_BX_BX_BX_B1O_NCINvNtNtB7_5bytes8complete11tag_no_caseBX_BX_B1O_E0NCIB49_BX_IB14_cEBX_B1O_NCIB3z_BX_cB1O_NCINvNtB7_6branch3altBX_cB1O_TB4y_B4y_EE0E0B2O_E0E0E0EE0INtB5_6ParserBX_BZ_B1O_E5parseB1S_:
  324|   819k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   819k|    self(i)
  326|   819k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededReB10_B10_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_5bytes8complete11tag_no_caseB10_B10_B1a_E0NCIBB_B10_INtNtCshZc3FwCJ069_4core6option6OptioncEB10_B1a_NCINvNtB7_10combinator3optB10_cB1a_NCINvNtB7_6branch3altB10_cB1a_TNCINvNtNtB7_9character8complete4charB10_B1a_E0B51_EE0E0INvB56_6digit1B10_B1a_EE0E0INtB5_6ParserB10_B10_B1a_E5parseB1e_:
  324|  14.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.1k|    self(i)
  326|  14.1k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1N_E0NCINvNtB7_10combinator3cutB10_B16_B1N_NCINvNtB7_6branch3altB10_B16_B1N_TNCNvNtB18_6parser18descendant_segment0NCINvB39_3mapB10_NtB18_8SelectorB16_B1N_NvB4i_17wildcard_selectorNvMst_B18_B16_3oneE0NvB4i_21member_name_shorthandNCINvB4i_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1N_E5parseB18_:
  324|  1.38M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.38M|    self(i)
  326|  1.38M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededReINtNtCshZc3FwCJ069_4core6option6OptioncEB10_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_10combinator3optB10_cB1K_NCINvNtB7_6branch3altB10_cB1K_TNCINvNtNtB7_9character8complete4charB10_B1K_E0B3N_EE0E0INvB3S_6digit1B10_B1K_EE0INtB5_6ParserB10_B10_B1K_E5parseB1O_:
  324|  3.57k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.57k|    self(i)
  326|  3.57k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2b_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|  3.65M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.65M|    self(i)
  326|  3.65M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0NvNvNtB1b_6parser5float10base_floatE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|   819k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   819k|    self(i)
  326|   819k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededRecINtNtCshZc3FwCJ069_4core6option6OptionB10_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3optB10_B10_B1K_NCINvNtB1O_6parser17ignore_whitespaceB10_NvB4a_3intB1K_E0E0E0INtB5_6ParserB10_B13_B1K_E5parseB1O_:
  324|   785k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   785k|    self(i)
  326|   785k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededRecNtCs9kVGM5uEiCY_15rsonpath_syntax11LogicalExprNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1N_E0NCINvNtB15_6parser17ignore_whitespaceB13_NCNvB3a_15filter_selector0B1N_E0E0INtB5_6ParserB10_B13_B1N_E5parseB15_:
  324|   950k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   950k|    self(i)
  326|   950k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededRecNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3cutB10_B13_B1K_NCINvNtB7_6branch3altB10_B13_B1K_TNCINvB37_3mapB10_NtB15_8SelectorB13_B1K_NvNtB15_6parser17wildcard_selectorNvMst_B15_B13_3oneE0NvB4S_21member_name_shorthandNCINvB4S_14failed_segmentB13_E0EE0E0E0INtB5_6ParserB10_B13_B1K_E5parseB15_:
  324|  75.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  75.7k|    self(i)
  326|  75.7k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1S_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1S_E5parseB17_:
  324|  5.20M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.20M|    self(i)
  326|  5.20M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str17JsonStringBuilderNtNtB17_5error18InternalParseErrorNCINvNtB7_10combinator4peekB10_cB1Z_NvNvNtB17_6parser21member_name_shorthand10name_firstE0NCINvNtB7_5multi10fold_many0B10_cB1Z_NvB39_9name_charNCB39_0NvMs_B15_B13_3newB13_E0E0INtB5_6ParserB10_B13_B1Z_E5parseB17_:
  324|   560k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   560k|    self(i)
  326|   560k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtNtB7_5bytes8complete11tag_no_caseReB1c_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB1c_B1c_B1i_E5parseB1m_:
  324|  14.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.1k|    self(i)
  326|  14.1k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|  7.44M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.44M|    self(i)
  326|  7.44M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14failed_segmentNtBF_7SegmentE0INtB5_6ParserReB1x_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  1.94k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.94k|    self(i)
  326|  1.94k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14failed_segmentNtBF_9SelectorsE0INtB5_6ParserReB1x_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|   494k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   494k|    self(i)
  326|   494k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceINtNtCshZc3FwCJ069_4core6option6OptionReENCINvNtB7_8sequence8precededB2c_cB1A_NtNtBF_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB2c_B2Q_E0NCINvNtB7_10combinator3optB2c_B2c_B2Q_NCIBB_B2c_NvBD_3intB2Q_E0E0E0B2Q_E0INtB5_6ParserB2c_B1A_B2Q_E5parseBF_:
  324|   785k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   785k|    self(i)
  326|   785k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtBF_11LogicalExprNCNvBD_15filter_selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2h_E5parseBF_:
  324|   644k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   644k|    self(i)
  326|   644k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNCNvBD_8selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B25_E5parseBF_:
  324|   950k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   950k|    self(i)
  326|   950k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B28_E5parseBF_:
  324|  1.80M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.80M|    self(i)
  326|  1.80M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|   993k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   993k|    self(i)
  326|   993k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14slice_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  1.78M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.78M|    self(i)
  326|  1.78M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2c_E5parseBF_:
  324|  1.78M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.78M|    self(i)
  326|  1.78M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtNvBD_12logical_expr9BooleanOpNCINvNtB7_6branch3altReB1A_NtNtBF_5error18InternalParseErrorTNCINvNtB7_10combinator5valueB2q_B1A_B2q_B2w_NCINvNtNtB7_5bytes8complete3tagB2q_B2q_B2w_E0E0B34_EE0B2w_E0INtB5_6ParserB2q_B1A_B2w_E5parseBF_:
  324|   100k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   100k|    self(i)
  326|   100k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceReNvBD_3intNtNtBF_5error18InternalParseErrorE0INtB5_6ParserB1A_B1A_B1L_E5parseBF_:
  324|   862k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   862k|    self(i)
  326|   862k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtB7_9character8complete4charReNtNtBF_5error18InternalParseErrorE0B2d_E0INtB5_6ParserB2b_cB2d_E5parseBF_:
  324|  1.78M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.78M|    self(i)
  326|  1.78M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser10comparable0INtB5_6ParserReNtBE_10ComparableNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   170k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   170k|    self(i)
  326|   170k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12filter_query0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  1.36M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.36M|    self(i)
  326|  1.36M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12filter_querys_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   875k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   875k|    self(i)
  326|   875k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  2.35M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.35M|    self(i)
  326|  2.35M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_exprs0_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|    824|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    824|    self(i)
  326|    824|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_exprs_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  1.18k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.18k|    self(i)
  326|  1.18k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser13child_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   888k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   888k|    self(i)
  326|   888k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser15filter_selector0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   644k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   644k|    self(i)
  326|   644k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser18descendant_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   497k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   497k|    self(i)
  326|   497k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  14.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.8k|    self(i)
  326|  14.8k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser7segment0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  18.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.6k|    self(i)
  326|  18.6k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser7segments_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  13.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.1k|    self(i)
  326|  13.1k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser8selector0INtB5_6ParserReNtBE_8SelectorNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   950k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   950k|    self(i)
  326|   950k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr12parse_single0INtB5_6ParserReNtBG_11LogicalExprNtNtBG_5error18InternalParseErrorE5parseBG_:
  324|  1.71M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.71M|    self(i)
  326|  1.71M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  1.80M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.80M|    self(i)
  326|  1.80M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   993k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   993k|    self(i)
  326|   993k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14slice_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  1.78M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.78M|    self(i)
  326|  1.78M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14string_literalINtB5_6ParserReNtNtBC_3str10JsonStringNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  2.60M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.60M|    self(i)
  326|  2.60M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser15failed_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   305k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   305k|    self(i)
  326|   305k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  2.35M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.35M|    self(i)
  326|  2.35M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthandINtB5_6ParserReNtBC_9SelectorsNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   560k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   560k|    self(i)
  326|   560k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser3intINtB5_6ParserReB1v_NtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  2.64M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.64M|    self(i)
  326|  2.64M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser5floatINtB5_6ParserReNtNtBC_3num9JsonFloatNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   819k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   819k|    self(i)
  326|   819k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6numberINtB5_6ParserReNtNtBC_3num10JsonNumberNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   819k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   819k|    self(i)
  326|   819k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser7literalINtB5_6ParserReNtBC_7LiteralNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   174k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   174k|    self(i)
  326|   174k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand10name_firstINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   697k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   697k|    self(i)
  326|   697k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand9name_charINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   137k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   137k|    self(i)
  326|   137k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser5float10base_floatINtB5_6ParserReB1L_NtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   819k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   819k|    self(i)
  326|   819k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2F_6digit1BT_BY_EE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|  3.63M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.63M|    self(i)
  326|  3.63M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0NvNvNtB12_6parser5float10base_floatE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|   819k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   819k|    self(i)
  326|   819k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvNtBX_6parser17wildcard_selectorNvMst_BX_BV_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  73.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  73.7k|    self(i)
  326|  73.7k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser13child_segment0NCINvNtB7_8sequence8precededBT_cBV_B1C_NCINvNtNtB7_9character8complete4charBT_B1C_E0NCINvNtB7_10combinator3cutBT_BV_B1C_NCIBB_BT_BV_B1C_TNCINvB47_3mapBT_NtBX_8SelectorBV_B1C_NvB2e_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2e_21member_name_shorthandNCINvB2e_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|   888k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   888k|    self(i)
  326|   888k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_6branch3altReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser18descendant_segment0NCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvB2e_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2e_21member_name_shorthandNCINvB2e_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|   497k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   497k|    self(i)
  326|   497k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_6branch3altReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtB11_5error18InternalParseErrorTNCINvNtB7_10combinator5valueBT_BV_BT_B21_NCINvNtNtB7_5bytes8complete3tagBT_BT_B21_E0E0B2A_EE0INtB5_6ParserBT_BV_B21_E5parseB11_:
  324|   100k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   100k|    self(i)
  326|   100k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_6branch3altRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB7_9character8complete4charBT_BW_E0B1W_EE0INtB5_6ParserBT_cBW_E5parseB10_:
  324|  3.57k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.57k|    self(i)
  326|  3.57k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3cutReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvNtB12_6parser17wildcard_selectorNvMst_B12_B10_3oneE0NvB3q_21member_name_shorthandNCINvB3q_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|  73.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  73.7k|    self(i)
  326|  73.7k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3cutReNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNCNvNtB12_6parser18descendant_segment0NCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvB2Q_17wildcard_selectorNvMst_B12_B10_3oneE0NvB2Q_21member_name_shorthandNCINvB2Q_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|   497k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   497k|    self(i)
  326|   497k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3mapReNtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorNtB12_9SelectorsNtNtB12_5error18InternalParseErrorNvNtB12_6parser17wildcard_selectorNvMst_B12_B1G_3oneE0INtB5_6ParserBY_B1G_B1W_E5parseB12_:
  324|   567k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   567k|    self(i)
  326|   567k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB17_6parser17ignore_whitespaceBY_NvB27_3intB13_E0E0INtB5_6ParserBY_INtNtCshZc3FwCJ069_4core6option6OptionBY_EB13_E5parseB17_:
  324|  76.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  76.3k|    self(i)
  326|  76.3k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_BY_BY_B13_NCINvNtNtB7_5bytes8complete11tag_no_caseBY_BY_B13_E0NCIB25_BY_INtNtCshZc3FwCJ069_4core6option6OptioncEBY_B13_NCIBB_BY_cB13_NCINvNtB7_6branch3altBY_cB13_TNCINvNtNtB7_9character8complete4charBY_B13_E0B5a_EE0E0INvB5f_6digit1BY_B13_EE0E0E0INtB5_6ParserBY_IB3I_BY_EB13_E5parseB17_:
  324|  14.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.1k|    self(i)
  326|  14.1k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_cBY_B13_NCINvNtNtB7_9character8complete4charBY_B13_E0INvB2K_6digit1BY_B13_EE0E0INtB5_6ParserBY_INtNtCshZc3FwCJ069_4core6option6OptionBY_EB13_E5parseB17_:
  324|  14.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.1k|    self(i)
  326|  14.1k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNtB17_6parser3intE0INtB5_6ParserBY_INtNtCshZc3FwCJ069_4core6option6OptionBY_EB13_E5parseB17_:
  324|  1.78M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.78M|    self(i)
  326|  1.78M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3optRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_6branch3altBY_cB11_TNCINvNtNtB7_9character8complete4charBY_B11_E0B2u_EE0E0INtB5_6ParserBY_INtNtCshZc3FwCJ069_4core6option6OptioncEB11_E5parseB15_:
  324|  3.57k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.57k|    self(i)
  326|  3.57k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator3optRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charBY_B11_E0E0INtB5_6ParserBY_INtNtCshZc3FwCJ069_4core6option6OptioncEB11_E5parseB15_:
  324|  2.36M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.36M|    self(i)
  326|  2.36M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator4intoReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralNtB13_10ComparableNtNtB13_5error18InternalParseErrorB1Y_NvNtB13_6parser7literalE0INtB5_6ParserBZ_B1G_B1Y_E5parseB13_:
  324|   174k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   174k|    self(i)
  326|   174k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator4intoReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num10JsonNumberNtB15_7LiteralNtNtB15_5error18InternalParseErrorB24_NvNtB15_6parser6numberE0INtB5_6ParserBZ_B1Q_B24_E5parseB15_:
  324|   819k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   819k|    self(i)
  326|   819k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator4intoReNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtB15_7LiteralNtNtB15_5error18InternalParseErrorB24_NvNtB15_6parser14string_literalE0INtB5_6ParserBZ_B1Q_B24_E5parseB15_:
  324|   804k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   804k|    self(i)
  326|   804k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator4peekRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNvNtB16_6parser21member_name_shorthand10name_firstE0INtB5_6ParserBZ_cB12_E5parseB16_:
  324|   560k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   560k|    self(i)
  326|   560k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1R_E0E0INtB5_6ParserB10_B12_B1R_E5parseB14_:
  324|  1.09M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.09M|    self(i)
  326|  1.09M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax12ComparisonOpcNtNtB14_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1O_E0E0INtB5_6ParserB10_B12_B1O_E5parseB14_:
  324|   370k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   370k|    self(i)
  326|   370k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator5valueReNtCs9kVGM5uEiCY_15rsonpath_syntax7LiteralB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1L_E0E0INtB5_6ParserB10_B12_B1L_E5parseB14_:
  324|  2.40M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.40M|    self(i)
  326|  2.40M|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator5valueReNtNtCs9kVGM5uEiCY_15rsonpath_syntax6parser16RootSelectorTypecNtNtB16_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B21_E0E0INtB5_6ParserB10_B12_B21_E5parseB16_:
  324|   837k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   837k|    self(i)
  326|   837k|  }
_RNvXsa_NtCs9XyeddurhEe_3nom8internalNCINvNtB7_10combinator5valueReNtNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr9BooleanOpB10_NtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B2c_E0E0INtB5_6ParserB10_B12_B2c_E5parseB18_:
  324|   199k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   199k|    self(i)
  326|   199k|  }
_RNvXNtCs9XyeddurhEe_3nom8internalINtNtCshZc3FwCJ069_4core6result6ResultTReNtCs9kVGM5uEiCY_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|  1.38M|  fn finish(self) -> Result<(I, O), E> {
   37|  1.31M|    match self {
   38|  75.2k|      Ok(res) => Ok(res),
   39|  1.31M|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  1.38M|  }
_RNvXNtCs9XyeddurhEe_3nom8internalINtNtCshZc3FwCJ069_4core6result6ResultTReNtCs9kVGM5uEiCY_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B21_E6finishB1c_:
   36|  1.80M|  fn finish(self) -> Result<(I, O), E> {
   37|   865k|    match self {
   38|   935k|      Ok(res) => Ok(res),
   39|   865k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  1.80M|  }
_RNvXNtCs9XyeddurhEe_3nom8internalINtNtCshZc3FwCJ069_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCs9kVGM5uEiCY_15rsonpath_syntax:
   36|  2.14k|  fn finish(self) -> Result<(I, O), E> {
   37|  2.02k|    match self {
   38|    119|      Ok(res) => Ok(res),
   39|  2.02k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  2.14k|  }

_RINvNtCs9XyeddurhEe_3nom5multi10fold_many0RecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNvNtBL_6parser21member_name_shorthand9name_charNCB1I_0NvMs_NtBL_3strNtB2F_17JsonStringBuilder3newB2O_EBL_:
  689|   560k|pub fn fold_many0<I, O, E, F, G, H, R>(
  690|   560k|  mut f: F,
  691|   560k|  mut init: H,
  692|   560k|  mut g: G,
  693|   560k|) -> impl FnMut(I) -> IResult<I, R, E>
  694|   560k|where
  695|   560k|  I: Clone + InputLength,
  696|   560k|  F: Parser<I, O, E>,
  697|   560k|  G: FnMut(R, O) -> R,
  698|   560k|  H: FnMut() -> R,
  699|   560k|  E: ParseError<I>,
  700|   560k|{
  701|       |  move |i: I| {
  702|       |    let mut res = init();
  703|       |    let mut input = i;
  704|       |
  705|       |    loop {
  706|       |      let i_ = input.clone();
  707|       |      let len = input.input_len();
  708|       |      match f.parse(i_) {
  709|       |        Ok((i, o)) => {
  710|       |          // infinite loop check: the parser must always consume
  711|       |          if i.input_len() == len {
  712|       |            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|       |          }
  714|       |
  715|       |          res = g(res, o);
  716|       |          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|       |          return Ok((input, res));
  720|       |        }
  721|       |        Err(e) => {
  722|       |          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|       |  }
  727|   560k|}
_RNCINvNtCs9XyeddurhEe_3nom5multi10fold_many0RecNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNvNvNtBN_6parser21member_name_shorthand9name_charNCB1K_0NvMs_NtBN_3strNtB2H_17JsonStringBuilder3newB2Q_E0BN_:
  701|  66.0k|  move |i: I| {
  702|  66.0k|    let mut res = init();
  703|  66.0k|    let mut input = i;
  704|       |
  705|       |    loop {
  706|   137k|      let i_ = input.clone();
  707|   137k|      let len = input.input_len();
  708|   137k|      match f.parse(i_) {
  709|  71.6k|        Ok((i, o)) => {
  710|  71.6k|          // infinite loop check: the parser must always consume
  711|  71.6k|          if i.input_len() == len {
  712|      0|            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|  71.6k|          }
  714|  71.6k|
  715|  71.6k|          res = g(res, o);
  716|  71.6k|          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|  66.0k|          return Ok((input, res));
  720|       |        }
  721|      0|        Err(e) => {
  722|      0|          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|  66.0k|  }

_RNvXs1_NtCs9XyeddurhEe_3nom8sequenceTINvNtNtB7_9character8complete6digit1ReNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorENCINvNtB7_10combinator3optB19_B19_B1b_NCINvB5_8precededB19_cB19_B1b_NCINvBC_4charB19_B1b_E0Bz_E0E0NCIB2e_B19_B19_B1b_NCIB2Q_B19_B19_B19_B1b_NCINvNtNtB7_5bytes8complete11tag_no_caseB19_B19_B1b_E0NCIB2Q_B19_INtNtCshZc3FwCJ069_4core6option6OptioncEB19_B1b_NCIB2e_B19_cB1b_NCINvNtB7_6branch3altB19_cB1b_TB3h_B3h_EE0E0Bz_E0E0E0EINtB5_5TupleB19_TB19_IB5v_B19_EB7J_EB1b_E5parseB1f_:
  226|   819k|      fn parse(&mut self, input: Input) -> IResult<Input, ( $($ty),+ ), Error> {
  227|   819k|        tuple_trait_inner!(0, self, input, (), $($name)+)
  228|       |
  229|   819k|      }
_RINvNtCs9XyeddurhEe_3nom8sequence10terminatedReINtNtCshZc3FwCJ069_4core6option6OptionBH_EcNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBH_BH_B1q_NvNtB1u_6parser3intE0NCINvB31_17ignore_whitespacecNCINvNtNtB4_9character8complete4charBH_B1q_E0B1q_E0EB1u_:
   97|  1.78M|pub fn terminated<I, O1, O2, E: ParseError<I>, F, G>(
   98|  1.78M|  mut first: F,
   99|  1.78M|  mut second: G,
  100|  1.78M|) -> impl FnMut(I) -> IResult<I, O1, E>
  101|  1.78M|where
  102|  1.78M|  F: Parser<I, O1, E>,
  103|  1.78M|  G: Parser<I, O2, E>,
  104|  1.78M|{
  105|       |  move |input: I| {
  106|       |    let (input, o1) = first.parse(input)?;
  107|       |    second.parse(input).map(|(i, _)| (i, o1))
  108|       |  }
  109|  1.78M|}
_RINvNtCs9XyeddurhEe_3nom8sequence5tupleReTBB_INtNtCshZc3FwCJ069_4core6option6OptionBB_EBH_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB4_9character8complete6digit1BB_B1r_ENCINvNtB4_10combinator3optBB_BB_B1r_NCINvB2_8precededBB_cBB_B1r_NCINvB2u_4charBB_B1r_E0B2r_E0E0NCIB3c_BB_BB_B1r_NCIB3M_BB_BB_BB_B1r_NCINvNtNtB4_5bytes8complete11tag_no_caseBB_BB_B1r_E0NCIB3M_BB_IBI_cEBB_B1r_NCIB3c_BB_cB1r_NCINvNtB4_6branch3altBB_cB1r_TB4b_B4b_EE0E0B2r_E0E0E0EEB1v_:
  275|   819k|pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(
  276|   819k|  mut l: List,
  277|   819k|) -> impl FnMut(I) -> IResult<I, O, E> {
  278|       |  move |i: I| l.parse(i)
  279|   819k|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededReBE_BE_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_5bytes8complete11tag_no_caseBE_BE_BM_E0NCIB0_BE_INtNtCshZc3FwCJ069_4core6option6OptioncEBE_BM_NCINvNtB4_10combinator3optBE_cBM_NCINvNtB4_6branch3altBE_cBM_TNCINvNtNtB4_9character8complete4charBE_BM_E0B4t_EE0E0INvB4y_6digit1BE_BM_EE0EBQ_:
   63|   819k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   819k|  mut first: F,
   65|   819k|  mut second: G,
   66|   819k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   819k|where
   68|   819k|  F: Parser<I, O1, E>,
   69|   819k|  G: Parser<I, O2, E>,
   70|   819k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   819k|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededReBE_NtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1q_E0NCINvNtB4_10combinator3cutBE_BJ_B1q_NCINvNtB4_6branch3altBE_BJ_B1q_TNCNvNtBL_6parser18descendant_segment0NCINvB2J_3mapBE_NtBL_8SelectorBJ_B1q_NvB3O_17wildcard_selectorNvMst_BL_BJ_3oneE0NvB3O_21member_name_shorthandNCINvB3O_14failed_segmentBJ_E0EE0E0EBL_:
   63|  1.38M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  1.38M|  mut first: F,
   65|  1.38M|  mut second: G,
   66|  1.38M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  1.38M|where
   68|  1.38M|  F: Parser<I, O1, E>,
   69|  1.38M|  G: Parser<I, O2, E>,
   70|  1.38M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  1.38M|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededReINtNtCshZc3FwCJ069_4core6option6OptioncEBE_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBE_cB1n_NCINvNtB4_6branch3altBE_cB1n_TNCINvNtNtB4_9character8complete4charBE_B1n_E0B3o_EE0E0INvB3t_6digit1BE_B1n_EEB1r_:
   63|   819k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   819k|  mut first: F,
   65|   819k|  mut second: G,
   66|   819k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   819k|where
   68|   819k|  F: Parser<I, O1, E>,
   69|   819k|  G: Parser<I, O2, E>,
   70|   819k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   819k|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededRecBE_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1O_6digit1BE_BK_EEBO_:
   63|  4.45M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  4.45M|  mut first: F,
   65|  4.45M|  mut second: G,
   66|  4.45M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  4.45M|where
   68|  4.45M|  F: Parser<I, O1, E>,
   69|  4.45M|  G: Parser<I, O2, E>,
   70|  4.45M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  4.45M|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededRecBE_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0NvNvNtBO_6parser5float10base_floatEBO_:
   63|   819k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   819k|  mut first: F,
   65|   819k|  mut second: G,
   66|   819k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   819k|where
   68|   819k|  F: Parser<I, O1, E>,
   69|   819k|  G: Parser<I, O2, E>,
   70|   819k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   819k|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededRecINtNtCshZc3FwCJ069_4core6option6OptionBE_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3optBE_BE_B1n_NCINvNtB1r_6parser17ignore_whitespaceBE_NvB3K_3intB1n_E0E0EB1r_:
   63|   785k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   785k|  mut first: F,
   65|   785k|  mut second: G,
   66|   785k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   785k|where
   68|   785k|  F: Parser<I, O1, E>,
   69|   785k|  G: Parser<I, O2, E>,
   70|   785k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   785k|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededRecNtCs9kVGM5uEiCY_15rsonpath_syntax11LogicalExprNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1r_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB2M_15filter_selector0B1r_E0EBJ_:
   63|   950k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   950k|  mut first: F,
   65|   950k|  mut second: G,
   66|   950k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   950k|where
   68|   950k|  F: Parser<I, O1, E>,
   69|   950k|  G: Parser<I, O2, E>,
   70|   950k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   950k|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededRecNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1o_E0NCINvNtB4_10combinator3cutBE_BH_B1o_NCINvNtB4_6branch3altBE_BH_B1o_TNCINvB2J_3mapBE_NtBJ_8SelectorBH_B1o_NvNtBJ_6parser17wildcard_selectorNvMst_BJ_BH_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBH_E0EE0E0EBJ_:
   63|   888k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   888k|  mut first: F,
   65|   888k|  mut second: G,
   66|   888k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   888k|where
   68|   888k|  F: Parser<I, O1, E>,
   69|   888k|  G: Parser<I, O2, E>,
   70|   888k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   888k|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1w_E0NCNvNtBL_6parser6string0EBL_:
   63|  5.21M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  5.21M|  mut first: F,
   65|  5.21M|  mut second: G,
   66|  5.21M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  5.21M|where
   68|  5.21M|  F: Parser<I, O1, E>,
   69|  5.21M|  G: Parser<I, O2, E>,
   70|  5.21M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  5.21M|}
_RINvNtCs9XyeddurhEe_3nom8sequence8precededRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str17JsonStringBuilderNtNtBL_5error18InternalParseErrorNCINvNtB4_10combinator4peekBE_cB1D_NvNvNtBL_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BE_cB1D_NvB2L_9name_charNCB2L_0NvMs_BJ_BH_3newBH_E0EBL_:
   63|   560k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   560k|  mut first: F,
   65|   560k|  mut second: G,
   66|   560k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   560k|where
   68|   560k|  F: Parser<I, O1, E>,
   69|   560k|  G: Parser<I, O2, E>,
   70|   560k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   560k|}
_RNCINvNtCs9XyeddurhEe_3nom8sequence10terminatedReINtNtCshZc3FwCJ069_4core6option6OptionBJ_EcNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBJ_BJ_B1s_NvNtB1w_6parser3intE0NCINvB33_17ignore_whitespacecNCINvNtNtB6_9character8complete4charBJ_B1s_E0B1s_E0E0B1w_:
  105|  1.78M|  move |input: I| {
  106|  1.78M|    let (input, o1) = first.parse(input)?;
  107|  1.78M|    second.parse(input).map(|(i, _)| (i, o1))
  108|  1.78M|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence5tupleReTBD_INtNtCshZc3FwCJ069_4core6option6OptionBD_EBJ_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB6_9character8complete6digit1BD_B1t_ENCINvNtB6_10combinator3optBD_BD_B1t_NCINvB4_8precededBD_cBD_B1t_NCINvB2w_4charBD_B1t_E0B2t_E0E0NCIB3e_BD_BD_B1t_NCIB3O_BD_BD_BD_B1t_NCINvNtNtB6_5bytes8complete11tag_no_caseBD_BD_B1t_E0NCIB3O_BD_IBK_cEBD_B1t_NCIB3e_BD_cB1t_NCINvNtB6_6branch3altBD_cB1t_TB4d_B4d_EE0E0B2t_E0E0E0EE0B1x_:
  278|   819k|  move |i: I| l.parse(i)
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededReBG_BG_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_5bytes8complete11tag_no_caseBG_BG_BO_E0NCIB2_BG_INtNtCshZc3FwCJ069_4core6option6OptioncEBG_BO_NCINvNtB6_10combinator3optBG_cBO_NCINvNtB6_6branch3altBG_cBO_TNCINvNtNtB6_9character8complete4charBG_BO_E0B4v_EE0E0INvB4A_6digit1BG_BO_EE0E0BS_:
   71|  14.1k|  move |input: I| {
   72|  14.1k|    let (input, _) = first.parse(input)?;
   73|  3.57k|    second.parse(input)
   74|  14.1k|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededReBG_NtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1s_E0NCINvNtB6_10combinator3cutBG_BL_B1s_NCINvNtB6_6branch3altBG_BL_B1s_TNCNvNtBN_6parser18descendant_segment0NCINvB2L_3mapBG_NtBN_8SelectorBL_B1s_NvB3Q_17wildcard_selectorNvMst_BN_BL_3oneE0NvB3Q_21member_name_shorthandNCINvB3Q_14failed_segmentBL_E0EE0E0E0BN_:
   71|  1.38M|  move |input: I| {
   72|  1.38M|    let (input, _) = first.parse(input)?;
   73|   497k|    second.parse(input)
   74|  1.38M|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededReINtNtCshZc3FwCJ069_4core6option6OptioncEBG_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBG_cB1p_NCINvNtB6_6branch3altBG_cB1p_TNCINvNtNtB6_9character8complete4charBG_B1p_E0B3q_EE0E0INvB3v_6digit1BG_B1p_EE0B1t_:
   71|  3.57k|  move |input: I| {
   72|  3.57k|    let (input, _) = first.parse(input)?;
   73|  3.57k|    second.parse(input)
   74|  3.57k|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededRecBG_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1Q_6digit1BG_BM_EE0BQ_:
   71|  3.65M|  move |input: I| {
   72|  3.65M|    let (input, _) = first.parse(input)?;
   73|  10.0k|    second.parse(input)
   74|  3.65M|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededRecBG_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0NvNvNtBQ_6parser5float10base_floatE0BQ_:
   71|   819k|  move |input: I| {
   72|   819k|    let (input, _) = first.parse(input)?;
   73|    569|    second.parse(input)
   74|   819k|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededRecINtNtCshZc3FwCJ069_4core6option6OptionBG_ENtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3optBG_BG_B1p_NCINvNtB1t_6parser17ignore_whitespaceBG_NvB3M_3intB1p_E0E0E0B1t_:
   71|   785k|  move |input: I| {
   72|   785k|    let (input, _) = first.parse(input)?;
   73|  76.3k|    second.parse(input)
   74|   785k|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededRecNtCs9kVGM5uEiCY_15rsonpath_syntax11LogicalExprNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1t_E0NCINvNtBL_6parser17ignore_whitespaceBJ_NCNvB2O_15filter_selector0B1t_E0E0BL_:
   71|   950k|  move |input: I| {
   72|   950k|    let (input, _) = first.parse(input)?;
   73|   644k|    second.parse(input)
   74|   950k|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededRecNtCs9kVGM5uEiCY_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1q_E0NCINvNtB6_10combinator3cutBG_BJ_B1q_NCINvNtB6_6branch3altBG_BJ_B1q_TNCINvB2L_3mapBG_NtBL_8SelectorBJ_B1q_NvNtBL_6parser17wildcard_selectorNvMst_BL_BJ_3oneE0NvB4p_21member_name_shorthandNCINvB4p_14failed_segmentBJ_E0EE0E0E0BL_:
   71|  75.7k|  move |input: I| {
   72|  75.7k|    let (input, _) = first.parse(input)?;
   73|  73.7k|    second.parse(input)
   74|  75.7k|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1y_E0NCNvNtBN_6parser6string0E0BN_:
   71|  5.20M|  move |input: I| {
   72|  5.20M|    let (input, _) = first.parse(input)?;
   73|  14.8k|    second.parse(input)
   74|  5.20M|  }
_RNCINvNtCs9XyeddurhEe_3nom8sequence8precededRecNtNtCs9kVGM5uEiCY_15rsonpath_syntax3str17JsonStringBuilderNtNtBN_5error18InternalParseErrorNCINvNtB6_10combinator4peekBG_cB1F_NvNvNtBN_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BG_cB1F_NvB2N_9name_charNCB2N_0NvMs_BL_BJ_3newBJ_E0E0BN_:
   71|   560k|  move |input: I| {
   72|   560k|    let (input, _) = first.parse(input)?;
   73|  66.0k|    second.parse(input)
   74|   560k|  }
_RNCNCINvNtCs9XyeddurhEe_3nom8sequence10terminatedReINtNtCshZc3FwCJ069_4core6option6OptionBL_EcNtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorNCINvNtB8_10combinator3optBL_BL_B1u_NvNtB1y_6parser3intE0NCINvB35_17ignore_whitespacecNCINvNtNtB8_9character8complete4charBL_B1u_E0B1u_E0E00B1y_:
  107|   786k|    second.parse(input).map(|(i, _)| (i, o1))

_RNvXs5_NtCs9XyeddurhEe_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|  7.44M|  fn as_bytes(&self) -> &[u8] {
   98|  7.44M|    (*self).as_bytes()
   99|  7.44M|  }
_RNvXsk_NtCs9XyeddurhEe_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|  7.44M|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|  7.44M|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|  7.44M|
  742|  7.44M|    match pos {
  743|  6.91M|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|   531k|        if self.len() >= t.len() {
  746|   515k|          CompareResult::Ok
  747|       |        } else {
  748|  15.6k|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|  7.44M|  }
_RNvXsn_NtCs9XyeddurhEe_3nom6traitsReINtB5_7CompareBw_E15compare_no_case:
  845|  14.1k|  fn compare_no_case(&self, t: &'b str) -> CompareResult {
  846|  14.1k|    let pos = self
  847|  14.1k|      .chars()
  848|  14.1k|      .zip(t.chars())
  849|  14.1k|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
  850|  14.1k|
  851|  14.1k|    match pos {
  852|  10.0k|      Some(_) => CompareResult::Error,
  853|       |      None => {
  854|  4.08k|        if self.len() >= t.len() {
  855|  3.57k|          CompareResult::Ok
  856|       |        } else {
  857|    516|          CompareResult::Incomplete
  858|       |        }
  859|       |      }
  860|       |    }
  861|  14.1k|  }
_RNvXsn_NtCs9XyeddurhEe_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|  7.44M|  fn compare(&self, t: &'b str) -> CompareResult {
  840|  7.44M|    self.as_bytes().compare(t.as_bytes())
  841|  7.44M|  }
_RINvXsj_NtCs9XyeddurhEe_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCs9kVGM5uEiCY_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|  4.46M|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|  4.46M|    &self,
  677|  4.46M|    predicate: P,
  678|  4.46M|    e: ErrorKind,
  679|  4.46M|  ) -> IResult<Self, Self, E>
  680|  4.46M|  where
  681|  4.46M|    P: Fn(Self::Item) -> bool,
  682|  4.46M|  {
  683|  4.46M|    match self.find(predicate) {
  684|  4.29M|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|   114k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|  55.8k|        if self.is_empty() {
  689|  53.6k|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|  2.26k|            Ok((
  694|  2.26k|              self.get_unchecked(self.len()..),
  695|  2.26k|              self.get_unchecked(..self.len()),
  696|  2.26k|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|  4.46M|  }
_RNCNvXsk_NtCs9XyeddurhEe_3nom6traitsRShINtB7_7CompareBy_E7compare0Cs9kVGM5uEiCY_15rsonpath_syntax:
  740|  8.17M|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNCNvXsn_NtCs9XyeddurhEe_3nom6traitsReINtB7_7CompareBy_E15compare_no_case0Cs9kVGM5uEiCY_15rsonpath_syntax:
  849|  13.5k|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
_RNvXs_NtCs9XyeddurhEe_3nom6traitsReNtB4_11InputLength9input_lenCs9kVGM5uEiCY_15rsonpath_syntax:
   33|  7.66M|  fn input_len(&self) -> usize {
   34|  7.66M|    self.len()
   35|  7.66M|  }
_RNvXsb_NtCs9XyeddurhEe_3nom6traitscNtB5_6AsChar12is_dec_digitCs9kVGM5uEiCY_15rsonpath_syntax:
  253|  4.64M|  fn is_dec_digit(self) -> bool {
  254|  4.64M|    self.is_ascii_digit()
  255|  4.64M|  }
_RNvXsb_NtCs9XyeddurhEe_3nom6traitscNtB5_6AsChar3lenCs9kVGM5uEiCY_15rsonpath_syntax:
  265|  1.50M|  fn len(self) -> usize {
  266|  1.50M|    self.len_utf8()
  267|  1.50M|  }
_RNvXsb_NtCs9XyeddurhEe_3nom6traitscNtB5_6AsChar7as_charCs9kVGM5uEiCY_15rsonpath_syntax:
  241|  25.1M|  fn as_char(self) -> char {
  242|  25.1M|    self
  243|  25.1M|  }
_RNvXsc_NtCs9XyeddurhEe_3nom6traitsRcNtB5_6AsChar3lenCs9kVGM5uEiCY_15rsonpath_syntax:
  296|  5.51M|  fn len(self) -> usize {
  297|  5.51M|    self.len_utf8()
  298|  5.51M|  }
_RNvXsc_NtCs9XyeddurhEe_3nom6traitsRcNtB5_6AsChar7as_charCs9kVGM5uEiCY_15rsonpath_syntax:
  272|  5.51M|  fn as_char(self) -> char {
  273|  5.51M|    *self
  274|  5.51M|  }
_RNvXsf_NtCs9XyeddurhEe_3nom6traitsReNtB5_9InputIter13iter_elementsCs9kVGM5uEiCY_15rsonpath_syntax:
  386|  26.9M|  fn iter_elements(&self) -> Self::IterElem {
  387|  26.9M|    self.chars()
  388|  26.9M|  }
_RNvXsg_NtCs9XyeddurhEe_3nom6traitsReNtB5_9InputTake10take_splitCs9kVGM5uEiCY_15rsonpath_syntax:
  424|   519k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|   519k|    let (prefix, suffix) = self.split_at(count);
  426|   519k|    (suffix, prefix)
  427|   519k|  }
_RNvXs4_NtCs9XyeddurhEe_3nom6traitsReNtB5_6Offset6offset:
   81|   128k|  fn offset(&self, second: &Self) -> usize {
   82|   128k|    let fst = self.as_ptr();
   83|   128k|    let snd = second.as_ptr();
   84|   128k|
   85|   128k|    snd as usize - fst as usize
   86|   128k|  }
_RNvXsu_NtCs9XyeddurhEe_3nom6traitsReINtB5_9FindTokencE10find_token:
  912|  1.63M|  fn find_token(&self, token: char) -> bool {
  913|  1.63M|    self.chars().any(|i| i == token)
  914|  1.63M|  }
_RNCNvXsu_NtCs9XyeddurhEe_3nom6traitsReINtB7_9FindTokencE10find_token0B9_:
  913|  2.71M|    self.chars().any(|i| i == token)
_RNvXs23_NtCs9XyeddurhEe_3nom6traitsReINtB6_5SliceINtNtNtCshZc3FwCJ069_4core3ops5range7RangeTojEE5slice:
 1013|   128k|    fn slice(&self, range: $ty) -> Self {
 1014|   128k|      &self[range]
 1015|   128k|    }
_RNvXs24_NtCs9XyeddurhEe_3nom6traitsReINtB6_5SliceINtNtNtCshZc3FwCJ069_4core3ops5range9RangeFromjEE5slice:
 1013|  7.01M|    fn slice(&self, range: $ty) -> Self {
 1014|  7.01M|      &self[range]
 1015|  7.01M|    }

_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3new:
   47|  2.14k|    pub(crate) fn new() -> Self {
   48|  2.14k|        Self { syntax_errors: vec![] }
   49|  2.14k|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3add:
   51|  9.89k|    pub(crate) fn add(&mut self, syntax_error: SyntaxError) {
   52|  9.89k|        self.syntax_errors.push(syntax_error)
   53|  9.89k|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8add_many:
   55|  6.27k|    pub(crate) fn add_many(&mut self, mut syntax_errors: Vec<SyntaxError>) {
   56|  6.27k|        self.syntax_errors.append(&mut syntax_errors)
   57|  6.27k|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8is_empty:
   59|  2.12k|    pub(crate) fn is_empty(&self) -> bool {
   60|  2.12k|        self.syntax_errors.is_empty()
   61|  2.12k|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder5build:
   63|  2.06k|    pub(crate) fn build(self, str: String) -> ParseError {
   64|  2.06k|        ParseError {
   65|  2.06k|            input: str,
   66|  2.06k|            inner: InnerParseError::Syntax(self.syntax_errors),
   67|  2.06k|        }
   68|  2.06k|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder24recursion_limit_exceeded:
   70|     18|    pub(crate) fn recursion_limit_exceeded(str: String, recursion_limit: usize) -> ParseError {
   71|     18|        ParseError {
   72|     18|            input: str,
   73|     18|            inner: InnerParseError::RecursionLimit(recursion_limit),
   74|     18|        }
   75|     18|    }
_RNvMs1_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB5_11SyntaxError3new:
  192|  2.90M|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  193|  2.90M|        Self { kind, rev_idx, len }
  194|  2.90M|    }
_RNvXs3_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs9XyeddurhEe_3nom5error10ParseErrorReE15from_error_kind:
  462|  26.7M|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  463|  26.7M|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  464|  26.7M|    }
_RNvXs3_NtCs9kVGM5uEiCY_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs9XyeddurhEe_3nom5error10ParseErrorReE6append:
  466|  8.04M|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  467|  8.04M|        match other {
  468|  8.04M|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  469|      0|            _ => other,
  470|       |        }
  471|  8.04M|    }

_RNvCs9kVGM5uEiCY_15rsonpath_syntax5parseCs8VN6UyQo1Oz_26query_fuzz_arbitrary_bytes:
  283|  2.14k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  284|  2.14k|    Parser::default().parse(str)
  285|  2.14k|}
_RNvMs2_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_6Parser5parseCs8VN6UyQo1Oz_26query_fuzz_arbitrary_bytes:
  307|  2.14k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  308|  2.14k|        crate::parser::parse_with_options(str, &self.options)
  309|  2.14k|    }
_RNvXs0_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCshZc3FwCJ069_4core7default7Default7default:
  232|  2.14k|    fn default() -> Self {
  233|  2.14k|        Self {
  234|  2.14k|            recursion_limit: Some(Parser::RECURSION_LIMIT_DEFAULT),
  235|  2.14k|            relaxed_whitespace: false,
  236|  2.14k|        }
  237|  2.14k|    }
_RNvMst_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_9Selectors3one:
  901|  73.1k|    pub fn one(selector: Selector) -> Self {
  902|  73.1k|        Self { inner: vec![selector] }
  903|  73.1k|    }
_RNvMsc_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_5Slice23default_start_backwards:
  502|    677|    pub(crate) fn default_start_backwards() -> Index {
  503|    677|        Index::FromEnd(1.try_into().expect("const 1 is nonzero"))
  504|    677|    }
_RNvMsw_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_4Step11is_backward:
 1068|   784k|    pub const fn is_backward(&self) -> bool {
 1069|   784k|        matches!(self, Self::Backward(_))
 1070|   784k|    }
_RNvXsh_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_7LiteralINtNtCshZc3FwCJ069_4core7convert4FromNtNtB5_3num10JsonNumberE4from:
  589|  12.3k|    fn from(value: num::JsonNumber) -> Self {
  590|  12.3k|        Self::Number(value)
  591|  12.3k|    }
_RNvMs_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB4_13ParserOptions29is_leading_whitespace_allowed:
  221|    143|    fn is_leading_whitespace_allowed(&self) -> bool {
  222|    143|        self.relaxed_whitespace
  223|    143|    }
_RNvMs_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowed:
  225|  2.12k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  226|  2.12k|        self.relaxed_whitespace
  227|  2.12k|    }
_RNvXs7_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_8SelectorINtNtCshZc3FwCJ069_4core7convert4FromNtB5_11LogicalExprE4fromB5_:
  397|  96.8k|    fn from(value: LogicalExpr) -> Self {
  398|  96.8k|        Self::Filter(value)
  399|  96.8k|    }
_RNvXsd_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_5SliceNtNtCshZc3FwCJ069_4core7default7Default7defaultB5_:
  538|   786k|    fn default() -> Self {
  539|   786k|        Self {
  540|   786k|            start: Index::FromStart(0.into()),
  541|   786k|            end: None,
  542|   786k|            step: Step::Forward(1.into()),
  543|   786k|        }
  544|   786k|    }
_RNvMsq_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_13JsonPathQuery15try_to_singular:
  815|  5.51k|    fn try_to_singular(self) -> std::result::Result<SingularJsonPathQuery, Self> {
  816|  5.51k|        if self.segments.iter().all(Segment::is_singular) {
  817|  4.30k|            let mut singular_segments = Vec::with_capacity(self.segments.len());
  818|  5.02k|            for segment in self.segments {
  819|    717|                singular_segments.push(segment.into_singular());
  820|    717|            }
  821|  4.30k|            Ok(SingularJsonPathQuery {
  822|  4.30k|                segments: singular_segments,
  823|  4.30k|            })
  824|       |        } else {
  825|  1.21k|            Err(self)
  826|       |        }
  827|  5.51k|    }
_RNvMss_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_7Segment11is_singular:
  877|  2.87k|    fn is_singular(&self) -> bool {
  878|  2.87k|        match self {
  879|  2.26k|            Self::Child(s) => s.len() == 1 && s.first().is_singular(),
  880|    618|            Self::Descendant(_) => false,
  881|       |        }
  882|  2.87k|    }
_RNvMss_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_7Segment13into_singular:
  884|    717|    fn into_singular(self) -> SingularSegment {
  885|    717|        assert!(self.is_singular());
  886|    717|        match self {
  887|    717|            Self::Child(mut s) => match s.inner.drain(..).next().expect("is_singular") {
  888|    484|                Selector::Name(n) => SingularSegment::Name(n),
  889|    233|                Selector::Index(i) => SingularSegment::Index(i),
  890|      0|                _ => unreachable!(),
  891|       |            },
  892|      0|            Self::Descendant(_) => unreachable!(),
  893|       |        }
  894|    717|    }
_RNvMst_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  916|  2.10k|    pub fn many(vec: Vec<Selector>) -> Self {
  917|  2.10k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  918|  2.10k|        Self { inner: vec }
  919|  2.10k|    }
_RNvMst_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_9Selectors5firstB5_:
  924|  2.03k|    pub fn first(&self) -> &Selector {
  925|  2.03k|        &self.inner[0]
  926|  2.03k|    }
_RNvMsu_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_8Selector11is_singular:
 1008|  2.03k|    fn is_singular(&self) -> bool {
 1009|  2.03k|        matches!(self, Self::Name(_) | Self::Index(_))
 1010|  2.03k|    }
_RNvXsx_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
 1077|  2.26k|    fn deref(&self) -> &Self::Target {
 1078|  2.26k|        &self.inner
 1079|  2.26k|    }
_RNvXse_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_7LiteralINtNtCshZc3FwCJ069_4core7convert4FromNtNtB5_3str10JsonStringE4fromB5_:
  568|  1.24k|    fn from(value: S) -> Self {
  569|  1.24k|        Self::String(value.into())
  570|  1.24k|    }
_RNvXsl_Cs9kVGM5uEiCY_15rsonpath_syntaxNtB5_10ComparableINtNtCshZc3FwCJ069_4core7convert4FromNtB5_7LiteralE4from:
  739|  4.27k|    fn from(value: Literal) -> Self {
  740|  4.27k|        Self::Literal(value)
  741|  4.27k|    }

_RNvMs7_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  367|  3.72k|    pub const fn abs(&self) -> JsonUInt {
  368|  3.72k|        JsonUInt(self.0.unsigned_abs())
  369|  3.72k|    }
_RNCNvXsi_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB7_7JsonIntNtNtNtCshZc3FwCJ069_4core3str6traits7FromStr8from_str0B9_:
  669|  1.51k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
_RNvMs7_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_7JsonInt3new:
  291|  52.0k|    const fn new(index: i64) -> Self {
  292|  52.0k|        Self(index)
  293|  52.0k|    }
_RNvMs8_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_8JsonUInt3new:
  405|  1.62M|    const fn new(index: u64) -> Self {
  406|  1.62M|        Self(index)
  407|  1.62M|    }
_RNvMsb_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_10JsonNumber9normalizeB7_:
  593|  12.3k|    pub fn normalize(&self) -> Self {
  594|  12.3k|        match *self {
  595|      0|            Self::Int(x) => Self::Int(x),
  596|  12.3k|            Self::Float(x) => match JsonInt::try_from(x) {
  597|  10.6k|                Ok(int) => Self::Int(int),
  598|  1.72k|                Err(_) => Self::Float(x),
  599|       |            },
  600|       |        }
  601|  12.3k|    }
_RNvXsc_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_7JsonIntINtNtCshZc3FwCJ069_4core7convert7TryFromxE8try_fromB7_:
  608|  53.5k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  609|  53.5k|        if value > JSON_INT_UPPER_LIMIT {
  610|    640|            Err(JsonIntOverflowError::int_pos_overflow(value))
  611|  52.8k|        } else if value < JSON_INT_LOWER_LIMIT {
  612|    873|            Err(JsonIntOverflowError::int_neg_overflow(value))
  613|       |        } else {
  614|  52.0k|            Ok(Self::new(value))
  615|       |        }
  616|  53.5k|    }
_RNvXsi_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCshZc3FwCJ069_4core3str6traits7FromStr8from_strB7_:
  667|  54.1k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  668|  54.1k|        match i64::from_str(s) {
  669|  53.5k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  670|    685|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  671|       |        }
  672|  54.1k|    }
_RNvXsl_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCshZc3FwCJ069_4core7convert4FrommE4fromB7_:
  704|  1.57M|    fn from(value: u32) -> Self {
  705|  1.57M|        Self::new(u64::from(value))
  706|  1.57M|    }
_RNvXsp_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCshZc3FwCJ069_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  741|  52.0k|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  742|  52.0k|        if value.0 < 0 {
  743|  3.72k|            Err(JsonIntOverflowError::negative_uint(value.0))
  744|       |        } else {
  745|  48.2k|            Ok(Self::new(value.0 as u64))
  746|       |        }
  747|  52.0k|    }
_RNvXsu_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCshZc3FwCJ069_4core7convert7TryFromlE8try_fromB7_:
  792|    677|    fn try_from(value: i32) -> Result<Self, Self::Error> {
  793|    677|        Self::try_from(i64::from(value))
  794|    677|    }
_RNvXsv_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCshZc3FwCJ069_4core7convert7TryFromyE8try_fromB7_:
  801|  4.40k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  802|  4.40k|        if value > JSON_UINT_UPPER_LIMIT {
  803|      0|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  804|  4.40k|        } else if let Some(x) = NonZeroU64::new(value) {
  805|  4.40k|            Ok(Self(x))
  806|       |        } else {
  807|      0|            Err(JsonIntOverflowError::zero_non_zero_uint())
  808|       |        }
  809|  4.40k|    }
_RNvXsw_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCshZc3FwCJ069_4core7convert7TryFromxE8try_fromB7_:
  816|    677|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  817|    677|        if value < 0 {
  818|      0|            Err(JsonIntOverflowError::negative_uint(value))
  819|       |        } else {
  820|    677|            Self::try_from(value as u64)
  821|       |        }
  822|    677|    }
_RNvXsx_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCshZc3FwCJ069_4core7convert7TryFromNtB5_8JsonUIntE8try_fromB7_:
  829|  3.72k|    fn try_from(value: JsonUInt) -> Result<Self, Self::Error> {
  830|  3.72k|        Self::try_from(value.0)
  831|  3.72k|    }
_RNvXsA_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_7JsonIntINtNtCshZc3FwCJ069_4core7convert7TryFromNtB5_9JsonFloatE8try_fromB7_:
  858|  12.3k|    fn try_from(value: JsonFloat) -> Result<Self, Self::Error> {
  859|  12.3k|        if value.0.fract() != 0.0 {
  860|  1.42k|            return Err(JsonIntOverflowError::fractional(value.0));
  861|  10.9k|        }
  862|  10.9k|        // At this point the fractional part must be 0.0, so the value is *an* integer.
  863|  10.9k|        // We need to check that it is within bounds of JsonInt. This is correct
  864|  10.9k|        // only because JsonInt bounds are guaranteed to be interoperable with f64,
  865|  10.9k|        // so every value within is exactly representable as a f64.
  866|  10.9k|        let int_value = value.0.trunc();
  867|  10.9k|        if int_value < JSON_INT_LOWER_LIMIT as f64 {
  868|      0|            return Err(JsonIntOverflowError::int_float_neg_overflow(value.0));
  869|  10.9k|        }
  870|  10.9k|        if int_value > JSON_INT_UPPER_LIMIT as f64 {
  871|    295|            return Err(JsonIntOverflowError::int_float_pos_overflow(value.0));
  872|  10.6k|        }
  873|  10.6k|
  874|  10.6k|        // This conversion is now guaranteed to be lossless.
  875|  10.6k|        Ok(Self(int_value as i64))
  876|  12.3k|    }
_RNvXsE_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_9JsonFloatNtNtNtCshZc3FwCJ069_4core3str6traits7FromStr8from_strB7_:
  968|  14.1k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  969|  14.1k|        match f64::from_str(s) {
  970|  14.1k|            Ok(x) => {
  971|  14.1k|                assert!(!s.is_empty()); // Empty strings are not accepted by f64::from_str.
  972|       |                                        // Rule 1.
  973|  14.1k|                if x.is_nan() || x.is_infinite() {
  974|  1.07k|                    return Err(Self::Err::infinite_or_nan(s));
  975|  13.0k|                }
  976|  13.0k|                if let Some((before, after)) = s.split_once('.') {
  977|       |                    // Rule 3. The case `before == "+"` is checked later.
  978|  1.29k|                    if before.is_empty() || before == "-" {
  979|      0|                        return Err(Self::Err::nothing_before_decimal_point(s));
  980|  1.29k|                    }
  981|  1.29k|                    // Rule 4.
  982|  1.29k|                    if after.is_empty() || after.starts_with(['e', 'E']) {
  983|      0|                        return Err(Self::Err::nothing_after_decimal_point(s));
  984|  1.29k|                    }
  985|  11.7k|                }
  986|  13.0k|                let mut chars = s.chars();
  987|  13.0k|                let first_c = chars.next().expect("s is non-empty");
  988|  13.0k|                // Rule 2.
  989|  13.0k|                if first_c == '+' {
  990|      0|                    return Err(Self::Err::leading_plus_sign(s));
  991|  13.0k|                }
  992|       |                // Skip the leading minus if it exists.
  993|  13.0k|                let s_no_sign = if first_c == '-' { chars.as_str() } else { s };
  994|       |                // Rule 5.
  995|       |                // Check for leading zeroes. We strip the first zero from the front and check what's left.
  996|       |                // The only acceptable case is that the next character is not a digit.
  997|  13.0k|                if let Some(rest) = s_no_sign.strip_prefix('0') {
  998|  3.59k|                    if matches!(rest.chars().next(), Some('0'..='9')) {
  999|    661|                        return Err(Self::Err::leading_zeros(s));
 1000|  2.93k|                    }
 1001|  9.44k|                }
 1002|  12.3k|                Ok(Self(x))
 1003|       |            }
 1004|       |            // Remember that all floats valid in JSON are also accepted by Rust,
 1005|       |            // so this is *definitely* not a valid JSON float.
 1006|      0|            Err(_) => Err(Self::Err::f64_parse_error(s)),
 1007|       |        }
 1008|  14.1k|    }
_RNvXsG_NtCs9kVGM5uEiCY_15rsonpath_syntax3numNtB5_10JsonNumberINtNtCshZc3FwCJ069_4core7convert4FromNtB5_9JsonFloatE4fromB7_:
 1020|  12.3k|    fn from(value: JsonFloat) -> Self {
 1021|  12.3k|        Self::Float(value)
 1022|  12.3k|    }

_RNvMNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_pos_overflow:
   39|    640|    pub(crate) fn int_pos_overflow(src: i64) -> Self {
   40|    640|        Self {
   41|    640|            kind: JsonIntOverflowKind::IntPos(src),
   42|    640|        }
   43|    640|    }
_RNvMNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_neg_overflow:
   51|    873|    pub(crate) fn int_neg_overflow(src: i64) -> Self {
   52|    873|        Self {
   53|    873|            kind: JsonIntOverflowKind::IntNeg(src),
   54|    873|        }
   55|    873|    }
_RNvMNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uint:
   63|  3.72k|    pub(crate) fn negative_uint(src: i64) -> Self {
   64|  3.72k|        Self {
   65|  3.72k|            kind: JsonIntOverflowKind::UIntNeg(src),
   66|  3.72k|        }
   67|  3.72k|    }
_RNvMNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError10fractional:
   75|  1.42k|    pub(crate) fn fractional(src: f64) -> Self {
   76|  1.42k|        Self {
   77|  1.42k|            kind: JsonIntOverflowKind::Fractional(src),
   78|  1.42k|        }
   79|  1.42k|    }
_RNvMNtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_pos_overflow:
   81|    295|    pub(crate) fn int_float_pos_overflow(src: f64) -> Self {
   82|    295|        Self {
   83|    295|            kind: JsonIntOverflowKind::FloatPos(src),
   84|    295|        }
   85|    295|    }
_RNvMs_NtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError15int_parse_error:
   95|    685|    pub(crate) fn int_parse_error(src: &str, err: &IntErrorKind) -> Self {
   96|    685|        Self {
   97|    685|            kind: match err {
   98|    317|                IntErrorKind::PosOverflow => JsonIntParseErrorKind::IntPosOverflow(src.to_string()),
   99|    368|                IntErrorKind::NegOverflow => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
  100|      0|                IntErrorKind::Zero => unreachable!(), // Zero is always a valid JsonInt value.
  101|      0|                _ => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
  102|       |            },
  103|       |        }
  104|    685|    }
_RNvMs_NtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError20parse_conversion_err:
  106|  1.51k|    pub(crate) fn parse_conversion_err(src: &str, err: &JsonIntOverflowError) -> Self {
  107|  1.51k|        Self {
  108|  1.51k|            kind: match err.kind {
  109|       |                JsonIntOverflowKind::IntPosU(_) | JsonIntOverflowKind::IntPos(_) => {
  110|    640|                    JsonIntParseErrorKind::IntPosOverflow(src.to_string())
  111|       |                }
  112|    873|                JsonIntOverflowKind::IntNeg(_) => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
  113|      0|                JsonIntOverflowKind::UIntPos(_) => JsonIntParseErrorKind::UIntPosOverflow(src.to_string()),
  114|      0|                JsonIntOverflowKind::UIntNeg(_) => JsonIntParseErrorKind::UIntNegOverflow(src.to_string()),
  115|      0|                JsonIntOverflowKind::NonZeroUIntZero => JsonIntParseErrorKind::NonZeroUIntZero(src.to_string()),
  116|       |                JsonIntOverflowKind::Fractional(_)
  117|       |                | JsonIntOverflowKind::FloatPos(_)
  118|      0|                | JsonIntOverflowKind::FloatNeg(_) => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
  119|       |            },
  120|       |        }
  121|  1.51k|    }
_RNvMs1_NtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB5_19JsonFloatParseError15infinite_or_nan:
  155|  1.07k|    pub(crate) fn infinite_or_nan(src: &str) -> Self {
  156|  1.07k|        Self {
  157|  1.07k|            kind: JsonFloatParseErrorKind::InfinityOrNaN(src.to_string()),
  158|  1.07k|        }
  159|  1.07k|    }
_RNvMs1_NtNtCs9kVGM5uEiCY_15rsonpath_syntax3num5errorNtB5_19JsonFloatParseError13leading_zeros:
  167|    661|    pub(crate) fn leading_zeros(src: &str) -> Self {
  168|    661|        Self {
  169|    661|            kind: JsonFloatParseErrorKind::LeadingZeros(src.to_string()),
  170|    661|        }
  171|    661|    }

_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser15skip_whitespace:
   13|  27.0M|fn skip_whitespace(q: &str) -> &str {
   14|  27.0M|    q.trim_start_matches(WHITESPACE)
   15|  27.0M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser8skip_one:
   17|   694k|fn skip_one(q: &str) -> &str {
   18|   694k|    let mut chars = q.chars();
   19|   694k|    chars.next();
   20|   694k|    chars.as_str()
   21|   694k|}
_RNvMNtCs9kVGM5uEiCY_15rsonpath_syntax6parserNtB2_8ParseCtx3new:
   44|  2.14k|    fn new(options: &'a ParserOptions) -> Self {
   45|  2.14k|        Self {
   46|  2.14k|            options,
   47|  2.14k|            current_nesting: 0,
   48|  2.14k|        }
   49|  2.14k|    }
_RNvMNtCs9kVGM5uEiCY_15rsonpath_syntax6parserNtB2_8ParseCtx16increase_nesting:
   51|  2.36M|    fn increase_nesting(&self) -> Option<Self> {
   52|  2.36M|        match self.options.recursion_limit {
   53|  2.36M|            Some(limit) if limit <= self.current_nesting => None,
   54|  2.35M|            _ => Some(Self {
   55|  2.35M|                options: self.options,
   56|  2.35M|                current_nesting: self.current_nesting + 1,
   57|  2.35M|            }),
   58|       |        }
   59|  2.36M|    }
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser18parse_with_options:
   62|  2.14k|pub(crate) fn parse_with_options(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   63|  2.14k|    parse_json_path_query(q, ParseCtx::new(options))
   64|  2.14k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21parse_json_path_query:
   66|  2.14k|fn parse_json_path_query(q: &str, ctx: ParseCtx) -> Result<JsonPathQuery> {
   67|  2.14k|    let original_input = q;
   68|  2.14k|    let mut parse_error = ParseErrorBuilder::new();
   69|  2.14k|    let mut segments = vec![];
   70|  2.14k|    let q = skip_whitespace(q);
   71|  2.14k|    let leading_whitespace_len = original_input.len() - q.len();
   72|  2.14k|    if leading_whitespace_len > 0 && !ctx.options.is_leading_whitespace_allowed() {
   73|    143|        parse_error.add(SyntaxError::new(
   74|    143|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   75|    143|            original_input.len(),
   76|    143|            leading_whitespace_len,
   77|    143|        ));
   78|  1.99k|    }
   79|  2.14k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   80|    119|        Ok((q, _)) => skip_whitespace(q),
   81|  2.02k|        Err(e) => {
   82|  2.02k|            parse_error.add(SyntaxError::new(
   83|  2.02k|                SyntaxErrorKind::MissingRootIdentifier,
   84|  2.02k|                e.input.len(),
   85|  2.02k|                q.chars().next().map_or(1, char::len_utf8),
   86|  2.02k|            ));
   87|  2.02k|            e.input
   88|       |        }
   89|       |    };
   90|       |
   91|  2.14k|    let mut q = q;
   92|  20.8k|    while !q.is_empty() {
   93|  18.6k|        q = match segment(q, ctx).finish() {
   94|  4.97k|            Ok((rest, segment)) => {
   95|  4.97k|                segments.push(segment);
   96|  4.97k|                rest
   97|       |            }
   98|  7.41k|            Err(InternalParseError::SyntaxError(err, rest)) => {
   99|  7.41k|                parse_error.add(err);
  100|  7.41k|                rest
  101|       |            }
  102|  6.27k|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
  103|  6.27k|                parse_error.add_many(errs);
  104|  6.27k|                rest
  105|       |            }
  106|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  107|     18|                return Err(ParseErrorBuilder::recursion_limit_exceeded(
  108|     18|                    original_input.to_owned(),
  109|     18|                    ctx.options
  110|     18|                        .recursion_limit
  111|     18|                        .expect("recursion limit should exists when exceeded"),
  112|     18|                ));
  113|       |            }
  114|      0|            Err(InternalParseError::NomError(err)) => panic!(
  115|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  116|      0|            ),
  117|       |        };
  118|  18.6k|        q = skip_whitespace(q);
  119|       |    }
  120|       |
  121|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
  122|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
  123|  2.12k|    if !ctx.options.is_trailing_whitespace_allowed() {
  124|  2.12k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
  125|  2.12k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
  126|  2.12k|        if trailing_whitespace_len > 0 {
  127|    320|            parse_error.add(SyntaxError::new(
  128|    320|                SyntaxErrorKind::DisallowedTrailingWhitespace,
  129|    320|                trailing_whitespace_len,
  130|    320|                trailing_whitespace_len,
  131|    320|            ));
  132|  1.80k|        }
  133|      0|    }
  134|       |
  135|  2.12k|    if parse_error.is_empty() {
  136|     63|        Ok(JsonPathQuery { segments })
  137|       |    } else {
  138|  2.06k|        Err(parse_error.build(original_input.to_owned()))
  139|       |    }
  140|  2.14k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser7segment:
  142|  18.6k|fn segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  143|  18.6k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  144|  18.6k|    alt((
  145|  18.6k|        |q| descendant_segment(q, ctx),
  146|  18.6k|        |q| child_segment(q, ctx),
  147|  18.6k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  148|  18.6k|    ))(q)
  149|  18.6k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser18descendant_segment:
  151|  1.38M|fn descendant_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  152|  1.38M|    map(
  153|  1.38M|        preceded(
  154|  1.38M|            tag(".."),
  155|  1.38M|            cut(alt((
  156|  1.38M|                |q| bracketed_selection(q, ctx),
  157|  1.38M|                map(wildcard_selector, Selectors::one),
  158|  1.38M|                member_name_shorthand,
  159|  1.38M|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  160|  1.38M|            ))),
  161|  1.38M|        ),
  162|  1.38M|        Segment::Descendant,
  163|  1.38M|    )(q)
  164|  1.38M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser13child_segment:
  166|   888k|fn child_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  167|   888k|    map(
  168|   888k|        alt((
  169|   888k|            |q| bracketed_selection(q, ctx),
  170|   888k|            // This cut is only correct because we try parsing descendant_segment first.
  171|   888k|            preceded(
  172|   888k|                char('.'),
  173|   888k|                cut(alt((
  174|   888k|                    map(wildcard_selector, Selectors::one),
  175|   888k|                    member_name_shorthand,
  176|   888k|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  177|   888k|                ))),
  178|   888k|            ),
  179|   888k|        )),
  180|   888k|        Segment::Child,
  181|   888k|    )(q)
  182|   888k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser19bracketed_selection:
  193|  1.38M|fn bracketed_selection<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selectors, InternalParseError<'q>> {
  194|  1.38M|    let (mut q, _) = char('[')(q)?;
  195|   816k|    let mut selectors = vec![];
  196|   816k|    let mut syntax_errors = vec![];
  197|       |
  198|       |    loop {
  199|  1.80M|        match selector(q, ctx).finish() {
  200|   935k|            Ok((rest, selector)) => {
  201|   935k|                selectors.push(selector);
  202|   935k|                q = rest;
  203|   935k|            }
  204|   511k|            Err(InternalParseError::SyntaxError(err, rest)) => {
  205|   511k|                syntax_errors.push(err);
  206|   511k|                q = rest;
  207|   511k|            }
  208|   333k|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  209|   333k|                syntax_errors.append(&mut errs);
  210|   333k|                q = rest;
  211|   333k|            }
  212|  20.6k|            Err(err) => return Err(Err::Failure(err)),
  213|       |        }
  214|  1.78M|        q = skip_whitespace(q);
  215|  1.78M|
  216|  1.78M|        match char::<_, nom::error::Error<_>>(',')(q) {
  217|   105k|            Ok((rest, _)) => q = rest,
  218|       |            Err(_) => {
  219|  1.67M|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  220|   320k|                    q = rest;
  221|   320k|                    break;
  222|  1.35M|                } else if q.is_empty() {
  223|   475k|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  224|   475k|                    break;
  225|       |                } else {
  226|   878k|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  227|       |                }
  228|       |            }
  229|       |        }
  230|       |    }
  231|       |
  232|   796k|    if syntax_errors.is_empty() {
  233|  2.10k|        Ok((q, Selectors::many(selectors)))
  234|       |    } else {
  235|   794k|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  236|       |    }
  237|  1.38M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand:
  239|   560k|fn member_name_shorthand(q: &str) -> IResult<&str, Selectors, InternalParseError> {
  240|   560k|    return map(
  241|   560k|        preceded(
  242|   560k|            peek(name_first),
  243|   560k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  244|       |                acc.push(x);
  245|       |                acc
  246|   560k|            }),
  247|   560k|        ),
  248|   560k|        |x| Selectors::one(Selector::Name(x.into())),
  249|   560k|    )(q);
  250|       |
  251|       |    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  252|       |        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  253|       |            q,
  254|       |        )
  255|       |    }
  256|       |
  257|       |    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  258|       |        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  259|       |    }
  260|   560k|}
_RNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand10name_first:
  251|   697k|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  252|   697k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  253|   697k|            q,
  254|   697k|        )
  255|   697k|    }
_RNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand9name_char:
  257|   137k|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  258|   137k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  259|   137k|    }
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser8selector:
  262|  1.80M|fn selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  263|  1.80M|    alt((
  264|  1.80M|        ignore_whitespace(name_selector),
  265|  1.80M|        ignore_whitespace(wildcard_selector),
  266|  1.80M|        ignore_whitespace(slice_selector),
  267|  1.80M|        ignore_whitespace(index_selector),
  268|  1.80M|        ignore_whitespace(|q| filter_selector(q, ctx)),
  269|  1.80M|        failed_selector,
  270|  1.80M|    ))(q)
  271|  1.80M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser13name_selector:
  279|  1.80M|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  280|  1.80M|    map(string_literal, Selector::Name)(q)
  281|  1.80M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14string_literal:
  283|  2.60M|fn string_literal(q: &str) -> IResult<&str, JsonString, InternalParseError> {
  284|  2.60M|    alt((
  285|  2.60M|        preceded(char('\''), string(StringParseMode::SingleQuoted)),
  286|  2.60M|        preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  287|  2.60M|    ))(q)
  288|  2.60M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17wildcard_selector:
  290|  2.35M|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  291|  2.35M|    map(tag("*"), |_| Selector::Wildcard)(q)
  292|  2.35M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14slice_selector:
  294|  1.78M|fn slice_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  295|  1.78M|    let (rest, opt_start) = terminated(opt(int), ignore_whitespace(char(':')))(q)?;
  296|       |    // We have parsed a ':', so this *must* be a slice selector. Any errors after here are fatal.
  297|   786k|    let mut slice = crate::Slice::default();
  298|       |
  299|   786k|    if let Some(start_str) = opt_start {
  300|  3.89k|        match parse_directional_int(start_str) {
  301|  3.21k|            DirectionalInt::Plus(int) => slice.start = Index::FromStart(int),
  302|    248|            DirectionalInt::Minus(int) => slice.start = Index::FromEnd(int),
  303|    432|            DirectionalInt::Error(err) => {
  304|    432|                return fail(
  305|    432|                    SyntaxErrorKind::SliceStartParseError(err),
  306|    432|                    q.len(),
  307|    432|                    start_str.len(),
  308|    432|                    rest,
  309|    432|                );
  310|       |            }
  311|       |        };
  312|   783k|    }
  313|   786k|    let q = rest;
  314|   786k|    let (rest, opt_end) = opt(ignore_whitespace(int))(q)?;
  315|       |
  316|   785k|    if let Some(end_str) = opt_end {
  317|  4.94k|        match parse_directional_int(end_str) {
  318|  2.23k|            DirectionalInt::Plus(int) => slice.end = Some(Index::FromStart(int)),
  319|  2.24k|            DirectionalInt::Minus(int) => slice.end = Some(Index::FromEnd(int)),
  320|    469|            DirectionalInt::Error(err) => {
  321|    469|                return fail(SyntaxErrorKind::SliceEndParseError(err), q.len(), end_str.len(), rest);
  322|       |            }
  323|       |        };
  324|   780k|    }
  325|       |
  326|   785k|    let q = rest;
  327|   785k|    let (rest, opt_step) = opt(ignore_whitespace(preceded(char(':'), opt(ignore_whitespace(int)))))(q)?;
  328|       |
  329|  76.0k|    if let Some(Some(step_str)) = opt_step {
  330|  1.62k|        match parse_directional_int(step_str) {
  331|    470|            DirectionalInt::Plus(int) => slice.step = Step::Forward(int),
  332|    679|            DirectionalInt::Minus(int) => slice.step = Step::Backward(int),
  333|    473|            DirectionalInt::Error(err) => {
  334|    473|                return fail(SyntaxErrorKind::SliceStepParseError(err), q.len(), step_str.len(), rest);
  335|       |            }
  336|       |        };
  337|   783k|    }
  338|       |
  339|       |    // Fixup the bounds - if start was not given and step is negative, the default must be reversed.
  340|   784k|    if slice.step.is_backward() && opt_start.is_none() {
  341|    677|        slice.start = crate::Slice::default_start_backwards();
  342|   783k|    }
  343|       |
  344|   784k|    Ok((rest, Selector::Slice(slice)))
  345|  1.78M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14index_selector:
  347|   993k|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  348|       |    // This has to be called after the slice selector.
  349|       |    // Thanks to that we can make a hard cut if we parsed an integer but it doesn't work as an index.
  350|   993k|    let (rest, int) = int(q)?;
  351|  43.7k|    match parse_directional_int(int) {
  352|  42.3k|        DirectionalInt::Plus(int) => Ok((rest, Selector::Index(Index::FromStart(int)))),
  353|    555|        DirectionalInt::Minus(int) => Ok((rest, Selector::Index(Index::FromEnd(int)))),
  354|    824|        DirectionalInt::Error(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  355|    824|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  356|    824|            rest,
  357|    824|        ))),
  358|       |    }
  359|   993k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser15failed_selector:
  361|   305k|fn failed_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  362|   305k|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
  363|   305k|    let error_len = q.len() - rest.len();
  364|   305k|    let error_span = &q[..error_len];
  365|   305k|
  366|   305k|    Err(Err::Failure(InternalParseError::SyntaxError(
  367|   305k|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
  368|  9.06k|            SyntaxError::new(SyntaxErrorKind::EmptySelector, q.len() + 1, error_len + 2)
  369|       |        } else {
  370|   296k|            let meaningful_span = skip_whitespace(error_span);
  371|   296k|            let skipped_whitespace_len = error_span.len() - meaningful_span.len();
  372|   296k|            let trimmed_span = meaningful_span.trim_end_matches(WHITESPACE);
  373|   296k|
  374|   296k|            SyntaxError::new(
  375|   296k|                SyntaxErrorKind::InvalidSelector,
  376|   296k|                q.len() - skipped_whitespace_len,
  377|   296k|                trimmed_span.len(),
  378|   296k|            )
  379|       |        },
  380|   305k|        rest,
  381|   305k|    )))
  382|   305k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser15filter_selector:
  384|   950k|fn filter_selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  385|   950k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
  386|   950k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr:
  388|  2.36M|fn logical_expr<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  389|       |    // This is the most involved part of the parser, as it is inherently recursive.
  390|       |    //
  391|       |    // There are two sources of recursion here: parentheses introduce recursion,
  392|       |    // since the rule is simply '(' filter_expression ')'; and the boolean combinations
  393|       |    // require checking for an operator, and if any is present recursively parsing
  394|       |    // another filter and wrapping the result in an appropriate node type.
  395|       |    //
  396|       |    // In total, we handle the negation operator at the start and then apply the rules:
  397|       |    // - '(' |=> filter_expression, ')'
  398|       |    // - literal |=> comp_op, comparable
  399|       |    // - query, comp_op |=> comparable
  400|       |    // - query
  401|       |    // where |=> means a cut. We separately apply two additional restrictions:
  402|       |    // - negation cannot immediately precede a comparison,
  403|       |    // - query in a comparison must be singular.
  404|       |    // It would be possible to directly disallow them by the rules, but if the parser understands
  405|       |    // these two special cases it can give much clearer error messages about them.
  406|       |    //
  407|       |    // At the end, we check for `&&` and `||``, recurse and wrap if needed; if not, we end parsing
  408|       |    // and leave the rest to the parsers higher up the stack. They might accept the next
  409|       |    // character (e.g. it's `)` called from a recursive filter call, `,` chaining selectors,
  410|       |    // `]` ending a segment...) and are responsible for error handling otherwise.
  411|       |    #[derive(Debug, Clone, Copy)]
  412|       |    enum BooleanOp {
  413|       |        And,
  414|       |        Or,
  415|       |    }
  416|       |
  417|  2.36M|    let Some(ctx) = ctx.increase_nesting() else {
  418|  2.15k|        return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  419|       |    };
  420|       |
  421|  2.35M|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
  422|  99.6k|    let mut loop_rest = skip_whitespace(rest);
  423|  99.6k|    let mut final_expr = this_expr;
  424|       |
  425|       |    loop {
  426|   100k|        let (rest, mb_boolean_op) = opt(ignore_whitespace(alt((
  427|   100k|            value(BooleanOp::And, tag("&&")),
  428|   100k|            value(BooleanOp::Or, tag("||")),
  429|   100k|        ))))(loop_rest)?;
  430|   100k|        loop_rest = rest;
  431|       |
  432|  2.00k|        match mb_boolean_op {
  433|       |            Some(BooleanOp::And) => {
  434|  1.18k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
  435|    324|                loop_rest = rest;
  436|    324|                final_expr = LogicalExpr::And(Box::new(final_expr), Box::new(rhs_expr));
  437|       |            }
  438|       |            Some(BooleanOp::Or) => {
  439|    824|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
  440|    296|                loop_rest = rest;
  441|    296|                final_expr = LogicalExpr::Or(Box::new(final_expr), Box::new(rhs_expr));
  442|       |            }
  443|  98.3k|            None => break,
  444|  98.3k|        }
  445|  98.3k|    }
  446|  98.3k|
  447|  98.3k|    return Ok((loop_rest, final_expr));
  448|       |
  449|       |    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  450|       |        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  451|       |        let negated = opt_neg.is_some();
  452|       |        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  453|       |            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  454|       |            let rest = skip_whitespace(rest);
  455|       |            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  456|       |                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  457|       |            };
  458|       |            let selector = if negated {
  459|       |                LogicalExpr::Not(Box::new(nested_filter))
  460|       |            } else {
  461|       |                nested_filter
  462|       |            };
  463|       |            return Ok((rest, selector));
  464|       |        }
  465|       |
  466|       |        match literal(rest) {
  467|       |            Ok((rest, lhs)) => {
  468|       |                let rest = skip_whitespace(rest);
  469|       |                let (rest, comp_op) = match comparison_operator(rest) {
  470|       |                    Ok((rest, comp_op)) => (rest, comp_op),
  471|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  472|       |                    _ => {
  473|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  474|       |                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  475|       |                        } else {
  476|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  477|       |                        };
  478|       |                    }
  479|       |                };
  480|       |                let rest = skip_whitespace(rest);
  481|       |                let (rest, rhs) = match comparable(rest, ctx) {
  482|       |                    Ok((rest, rhs)) => (rest, rhs),
  483|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  484|       |                    _ => {
  485|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  486|       |                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  487|       |                        } else {
  488|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  489|       |                        };
  490|       |                    }
  491|       |                };
  492|       |                if negated {
  493|       |                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  494|       |                } else {
  495|       |                    return Ok((
  496|       |                        rest,
  497|       |                        LogicalExpr::Comparison(ComparisonExpr {
  498|       |                            lhs: Comparable::Literal(lhs),
  499|       |                            op: comp_op,
  500|       |                            rhs,
  501|       |                        }),
  502|       |                    ));
  503|       |                }
  504|       |            }
  505|       |            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  506|       |            _ => (),
  507|       |        };
  508|       |
  509|       |        match filter_query(rest, ctx) {
  510|       |            Ok((rest, query)) => {
  511|       |                let query_len = q.len() - rest.len();
  512|       |                let rest = skip_whitespace(rest);
  513|       |                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  514|       |                    let rest = skip_whitespace(rest);
  515|       |                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  516|       |                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  517|       |                    };
  518|       |                    let Some(singular_query) = query.try_to_comparable() else {
  519|       |                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  520|       |                    };
  521|       |                    if negated {
  522|       |                        fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest)
  523|       |                    } else {
  524|       |                        Ok((
  525|       |                            rest,
  526|       |                            LogicalExpr::Comparison(ComparisonExpr {
  527|       |                                lhs: singular_query,
  528|       |                                rhs,
  529|       |                                op: comp_op,
  530|       |                            }),
  531|       |                        ))
  532|       |                    }
  533|       |                } else {
  534|       |                    let test_expr = LogicalExpr::Test(query.into_test_query());
  535|       |                    let expr = if negated {
  536|       |                        LogicalExpr::Not(Box::new(test_expr))
  537|       |                    } else {
  538|       |                        test_expr
  539|       |                    };
  540|       |                    Ok((rest, expr))
  541|       |                }
  542|       |            }
  543|       |            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  544|       |            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  545|       |        }
  546|       |    }
  547|  2.36M|}
_RNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr12parse_single:
  449|  2.36M|    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  450|  2.36M|        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  451|  2.36M|        let negated = opt_neg.is_some();
  452|  2.36M|        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  453|  1.71M|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  454|  1.11k|            let rest = skip_whitespace(rest);
  455|  1.11k|            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  456|    726|                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  457|       |            };
  458|    389|            let selector = if negated {
  459|    194|                LogicalExpr::Not(Box::new(nested_filter))
  460|       |            } else {
  461|    195|                nested_filter
  462|       |            };
  463|    389|            return Ok((rest, selector));
  464|   644k|        }
  465|   644k|
  466|   644k|        match literal(rest) {
  467|  9.34k|            Ok((rest, lhs)) => {
  468|  9.34k|                let rest = skip_whitespace(rest);
  469|  9.34k|                let (rest, comp_op) = match comparison_operator(rest) {
  470|  4.96k|                    Ok((rest, comp_op)) => (rest, comp_op),
  471|      0|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  472|       |                    _ => {
  473|  4.37k|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  474|    469|                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  475|       |                        } else {
  476|  3.90k|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  477|       |                        };
  478|       |                    }
  479|       |                };
  480|  4.96k|                let rest = skip_whitespace(rest);
  481|  4.96k|                let (rest, rhs) = match comparable(rest, ctx) {
  482|  3.08k|                    Ok((rest, rhs)) => (rest, rhs),
  483|    358|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  484|       |                    _ => {
  485|  1.51k|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  486|    210|                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  487|       |                        } else {
  488|  1.30k|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  489|       |                        };
  490|       |                    }
  491|       |                };
  492|  3.08k|                if negated {
  493|    194|                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  494|       |                } else {
  495|  2.89k|                    return Ok((
  496|  2.89k|                        rest,
  497|  2.89k|                        LogicalExpr::Comparison(ComparisonExpr {
  498|  2.89k|                            lhs: Comparable::Literal(lhs),
  499|  2.89k|                            op: comp_op,
  500|  2.89k|                            rhs,
  501|  2.89k|                        }),
  502|  2.89k|                    ));
  503|       |                }
  504|       |            }
  505|  1.72k|            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  506|   633k|            _ => (),
  507|   633k|        };
  508|   633k|
  509|   633k|        match filter_query(rest, ctx) {
  510|   264k|            Ok((rest, query)) => {
  511|   264k|                let query_len = q.len() - rest.len();
  512|   264k|                let rest = skip_whitespace(rest);
  513|   264k|                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  514|   169k|                    let rest = skip_whitespace(rest);
  515|   169k|                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  516|   166k|                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  517|       |                    };
  518|  3.04k|                    let Some(singular_query) = query.try_to_comparable() else {
  519|    597|                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  520|       |                    };
  521|  2.44k|                    if negated {
  522|    318|                        fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest)
  523|       |                    } else {
  524|  2.13k|                        Ok((
  525|  2.13k|                            rest,
  526|  2.13k|                            LogicalExpr::Comparison(ComparisonExpr {
  527|  2.13k|                                lhs: singular_query,
  528|  2.13k|                                rhs,
  529|  2.13k|                                op: comp_op,
  530|  2.13k|                            }),
  531|  2.13k|                        ))
  532|       |                    }
  533|       |                } else {
  534|  94.5k|                    let test_expr = LogicalExpr::Test(query.into_test_query());
  535|  94.5k|                    let expr = if negated {
  536|    284|                        LogicalExpr::Not(Box::new(test_expr))
  537|       |                    } else {
  538|  94.3k|                        test_expr
  539|       |                    };
  540|  94.5k|                    Ok((rest, expr))
  541|       |                }
  542|       |            }
  543|   343k|            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  544|  25.1k|            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  545|       |        }
  546|  2.36M|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax6parserNtB4_11FilterQuery15into_test_query:
  561|  94.5k|    fn into_test_query(self) -> TestExpr {
  562|  94.5k|        match self {
  563|    511|            Self::Relative(q) => TestExpr::Relative(q),
  564|  94.0k|            Self::Absolute(q) => TestExpr::Absolute(q),
  565|       |        }
  566|  94.5k|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax6parserNtB4_11FilterQuery17try_to_comparable:
  568|  5.51k|    fn try_to_comparable(self) -> Option<Comparable> {
  569|  5.51k|        match self {
  570|  1.43k|            Self::Relative(q) => q.try_to_singular().ok().map(Comparable::RelativeSingularQuery),
  571|  4.07k|            Self::Absolute(q) => q.try_to_singular().ok().map(Comparable::AbsoluteSingularQuery),
  572|       |        }
  573|  5.51k|    }
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12filter_query:
  576|   803k|fn filter_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, FilterQuery, InternalParseError<'q>> {
  577|   803k|    let (rest, root_type) = alt((
  578|   803k|        value(RootSelectorType::Absolute, char('$')),
  579|   803k|        value(RootSelectorType::Relative, char('@')),
  580|   803k|    ))(q)?;
  581|   771k|    let rest = skip_whitespace(rest);
  582|   771k|    let mut segments = vec![];
  583|   771k|    let mut syntax_errors = vec![];
  584|   771k|
  585|   771k|    let mut q = rest;
  586|       |
  587|       |    loop {
  588|  2.11M|        if peek(one_of::<_, _, ()>(".["))(q).is_err() {
  589|   750k|            break;
  590|  1.36M|        }
  591|  1.36M|
  592|  1.36M|        q = match alt((
  593|  2.11M|            |q| descendant_segment(q, ctx),
  594|  2.11M|            |q| child_segment(q, ctx),
  595|  1.36M|            failed_segment_within_filter(SyntaxErrorKind::InvalidSegmentStart),
  596|  1.36M|        ))(q)
  597|  1.36M|        .finish()
  598|       |        {
  599|  70.2k|            Ok((rest, segment)) => {
  600|  70.2k|                segments.push(segment);
  601|  70.2k|                rest
  602|       |            }
  603|   488k|            Err(InternalParseError::SyntaxError(err, rest)) => {
  604|   488k|                syntax_errors.push(err);
  605|   488k|                rest
  606|       |            }
  607|   787k|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  608|   787k|                syntax_errors.append(&mut errs);
  609|   787k|                rest
  610|       |            }
  611|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  612|  20.6k|                return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  613|       |            }
  614|      0|            Err(InternalParseError::NomError(err)) => panic!(
  615|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  616|      0|            ),
  617|       |        };
  618|  1.34M|        q = skip_whitespace(q);
  619|       |    }
  620|       |
  621|   750k|    if !syntax_errors.is_empty() {
  622|   483k|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  623|       |    } else {
  624|   267k|        let query = JsonPathQuery { segments };
  625|   267k|        let query = match root_type {
  626|  2.17k|            RootSelectorType::Relative => FilterQuery::Relative(query),
  627|   264k|            RootSelectorType::Absolute => FilterQuery::Absolute(query),
  628|       |        };
  629|   267k|        Ok((q, query))
  630|       |    }
  631|   803k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser19comparison_operator:
  651|   273k|fn comparison_operator(q: &str) -> IResult<&str, ComparisonOp, InternalParseError> {
  652|   273k|    alt((
  653|   273k|        value(ComparisonOp::EqualTo, tag("==")),
  654|   273k|        value(ComparisonOp::NotEqualTo, tag("!=")),
  655|   273k|        value(ComparisonOp::LesserOrEqualTo, tag("<=")),
  656|   273k|        value(ComparisonOp::GreaterOrEqualTo, tag(">=")),
  657|   273k|        value(ComparisonOp::LessThan, char('<')),
  658|   273k|        value(ComparisonOp::GreaterThan, char('>')),
  659|   273k|    ))(q)
  660|   273k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser10comparable:
  662|   174k|fn comparable<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  663|   174k|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
  664|       |
  665|       |    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  666|       |        let (rest, query) = filter_query(q, ctx)?;
  667|       |        let Some(cmp) = query.try_to_comparable() else {
  668|       |            let query_len = q.len() - rest.len();
  669|       |            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  670|       |        };
  671|       |        Ok((rest, cmp))
  672|       |    }
  673|   174k|}
_RNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser10comparable14singular_query:
  665|   170k|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  666|   170k|        let (rest, query) = filter_query(q, ctx)?;
  667|  2.46k|        let Some(cmp) = query.try_to_comparable() else {
  668|    613|            let query_len = q.len() - rest.len();
  669|    613|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  670|       |        };
  671|  1.85k|        Ok((rest, cmp))
  672|   170k|    }
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser7literal:
  675|   819k|fn literal(q: &str) -> IResult<&str, Literal, InternalParseError> {
  676|   819k|    alt((
  677|   819k|        into(number),
  678|   819k|        into(string_literal),
  679|   819k|        value(Literal::Bool(true), tag("true")),
  680|   819k|        value(Literal::Bool(false), tag("false")),
  681|   819k|        value(Literal::Null, tag("null")),
  682|   819k|    ))(q)
  683|   819k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6number:
  685|   819k|fn number(q: &str) -> IResult<&str, JsonNumber, InternalParseError> {
  686|   819k|    map(float, |f| JsonNumber::from(f).normalize())(q)
  687|   819k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser5float:
  690|   819k|fn float(q: &str) -> IResult<&str, JsonFloat, InternalParseError> {
  691|       |    // Look ahead to verify that this has a chance to be a number.
  692|   819k|    let (rest, valid_str) = recognize(alt((preceded(char('-'), base_float), base_float)))(q)?;
  693|       |
  694|       |    // It is a number, so after here we can hard cut.
  695|  14.1k|    return match JsonFloat::from_str(valid_str) {
  696|  12.3k|        Ok(n) => Ok((rest, n)),
  697|  1.73k|        Err(e) => fail(SyntaxErrorKind::NumberParseError(e), rest.len(), valid_str.len(), q),
  698|       |    };
  699|       |
  700|       |    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  701|       |        recognize(tuple((
  702|       |            digit1,
  703|       |            opt(preceded(char('.'), digit1)),
  704|       |            opt(preceded(
  705|       |                tag_no_case("e"),
  706|       |                preceded(opt(alt((char('+'), char('-')))), digit1),
  707|       |            )),
  708|       |        )))(q)
  709|       |    }
  710|   819k|}
_RNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser5float10base_float:
  700|   819k|    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  701|   819k|        recognize(tuple((
  702|   819k|            digit1,
  703|   819k|            opt(preceded(char('.'), digit1)),
  704|   819k|            opt(preceded(
  705|   819k|                tag_no_case("e"),
  706|   819k|                preceded(opt(alt((char('+'), char('-')))), digit1),
  707|   819k|            )),
  708|   819k|        )))(q)
  709|   819k|    }
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21parse_directional_int:
  718|  54.1k|fn parse_directional_int(int_str: &str) -> DirectionalInt {
  719|  54.1k|    match JsonInt::from_str(int_str) {
  720|  52.0k|        Ok(int) => {
  721|  52.0k|            if let Ok(uint) = JsonUInt::try_from(int) {
  722|  48.2k|                DirectionalInt::Plus(uint)
  723|       |            } else {
  724|  3.72k|                DirectionalInt::Minus(int.abs().try_into().expect("zero would convert to JsonUInt above"))
  725|       |            }
  726|       |        }
  727|  2.19k|        Err(err) => DirectionalInt::Error(err),
  728|       |    }
  729|  54.1k|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser3int:
  731|  3.63M|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  732|  3.63M|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  733|       |
  734|  99.9k|    if int != "0" {
  735|  44.4k|        if int == "-0" {
  736|    879|            return fail(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len(), rest);
  737|  43.5k|        }
  738|  43.5k|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  739|  43.5k|        if without_minus.strip_prefix(['0']).is_some() {
  740|  1.09k|            return fail(SyntaxErrorKind::LeadingZeros, q.len(), int.len(), rest);
  741|  42.4k|        }
  742|  55.4k|    }
  743|       |
  744|  97.9k|    Ok((rest, int))
  745|  3.63M|}
_RNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6string:
  747|  5.21M|fn string(mode: StringParseMode) -> impl FnMut(&str) -> IResult<&str, JsonString, InternalParseError> {
  748|       |    move |q: &str| {
  749|       |        let mut builder = JsonStringBuilder::new();
  750|       |        let mut syntax_errors = vec![];
  751|       |        let mut stream = q.char_indices().peekable();
  752|       |
  753|       |        while let Some((c_idx, c)) = stream.next() {
  754|       |            match (c, mode) {
  755|       |                ('\\', _) => {
  756|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  757|       |                        Ok(r) => {
  758|       |                            builder.push(r);
  759|       |                        }
  760|       |                        Err(err) => {
  761|       |                            syntax_errors.push(err);
  762|       |                        }
  763|       |                    };
  764|       |                }
  765|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  766|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  767|       |                    return if syntax_errors.is_empty() {
  768|       |                        Ok((rest, builder.finish()))
  769|       |                    } else {
  770|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  771|       |                    };
  772|       |                }
  773|       |                (..='\u{001F}', _) => {
  774|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  775|       |                    syntax_errors.push(SyntaxError::new(
  776|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  777|       |                        rest.len() + 1,
  778|       |                        1,
  779|       |                    ))
  780|       |                }
  781|       |                _ => {
  782|       |                    builder.push(c);
  783|       |                }
  784|       |            }
  785|       |        }
  786|       |
  787|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  788|       |            SyntaxErrorKind::MissingClosingSingleQuote
  789|       |        } else {
  790|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  791|       |        };
  792|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  793|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  794|       |
  795|       |        fn read_escape_sequence<I>(
  796|       |            q_len: usize,
  797|       |            c_idx: usize,
  798|       |            chars: &mut Peekable<I>,
  799|       |            mode: StringParseMode,
  800|       |        ) -> std::result::Result<char, SyntaxError>
  801|       |        where
  802|       |            I: Iterator<Item = (usize, char)>,
  803|       |        {
  804|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  805|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  806|       |                q_len - c_idx,
  807|       |                1,
  808|       |            ))?;
  809|       |            match ctrl {
  810|       |                'u' => {
  811|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  812|       |                    match raw_c {
  813|       |                        // High surrogate, start of a UTF-16 pair.
  814|       |                        0xD800..=0xDBFF => {
  815|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  816|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  817|       |                                q_len - c_idx,
  818|       |                                6,
  819|       |                            ))?;
  820|       |                            if next != '\\' {
  821|       |                                return Err(SyntaxError::new(
  822|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  823|       |                                    q_len - c_idx,
  824|       |                                    6,
  825|       |                                ));
  826|       |                            }
  827|       |                            chars.next();
  828|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  829|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  830|       |                                q_len - c_idx,
  831|       |                                6,
  832|       |                            ))?;
  833|       |                            if next != 'u' {
  834|       |                                return Err(SyntaxError::new(
  835|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  836|       |                                    q_len - c_idx,
  837|       |                                    6,
  838|       |                                ));
  839|       |                            }
  840|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  841|       |                            match low {
  842|       |                                0xDC00..=0xDFFF => {
  843|       |                                    let n = (((raw_c - 0xD800) << 10) | (low - 0xDC00)) + 0x10000;
  844|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  845|       |                                }
  846|       |                                _ => Err(SyntaxError::new(
  847|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  848|       |                                    q_len - c_idx,
  849|       |                                    6,
  850|       |                                )),
  851|       |                            }
  852|       |                        }
  853|       |                        // Low surrogate, invalid escape sequence.
  854|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  855|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  856|       |                            q_len - c_idx,
  857|       |                            6,
  858|       |                        )),
  859|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  860|       |                    }
  861|       |                }
  862|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  863|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  864|       |                'n' => Ok('\n'),       // U+000A LF line feed
  865|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  866|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  867|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  868|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  869|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  870|       |                _ => Err(SyntaxError::new(
  871|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  872|       |                    q_len - c_idx,
  873|       |                    2,
  874|       |                )), // no other escape sequences are allowed
  875|       |            }
  876|       |        }
  877|       |
  878|       |        fn read_hexadecimal_escape<I>(
  879|       |            q_len: usize,
  880|       |            c_idx: usize,
  881|       |            chars: &mut Peekable<I>,
  882|       |        ) -> std::result::Result<u32, SyntaxError>
  883|       |        where
  884|       |            I: Iterator<Item = (usize, char)>,
  885|       |        {
  886|       |            let mut x = 0;
  887|       |            for i in 0..4 {
  888|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  889|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  890|       |                    q_len - c_idx + 1,
  891|       |                    2 + i,
  892|       |                ))?;
  893|       |                let v = match c {
  894|       |                    '0'..='9' => c as u32 - '0' as u32,
  895|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  896|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  897|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  898|       |                    _ => {
  899|       |                        return Err(SyntaxError::new(
  900|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  901|       |                            q_len - c_idx - i - 1,
  902|       |                            1,
  903|       |                        ))
  904|       |                    }
  905|       |                };
  906|       |                x <<= 4;
  907|       |                x += v;
  908|       |                chars.next();
  909|       |            }
  910|       |            Ok(x)
  911|       |        }
  912|       |    }
  913|  5.21M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceINtNtCshZc3FwCJ069_4core6option6OptionReENCINvNtCs9XyeddurhEe_3nom8sequence8precededB1B_cBZ_NtNtB4_5error18InternalParseErrorNCINvNtNtB1L_9character8complete4charB1B_B2t_E0NCINvNtB1L_10combinator3optB1B_B1B_B2t_NCIB0_B1B_NvB2_3intB2t_E0E0E0B2t_EB4_:
   23|   785k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   785k|where
   25|   785k|    F: nom::Parser<&'a str, T, E>,
   26|   785k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   785k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceINtNtCshZc3FwCJ069_4core6option6OptioncENCINvNtCs9XyeddurhEe_3nom10combinator3optRecNtNtB4_5error18InternalParseErrorNCINvNtNtB1K_9character8complete4charB2i_B2l_E0E0B2l_EB4_:
   23|  2.36M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  2.36M|where
   25|  2.36M|    F: nom::Parser<&'a str, T, E>,
   26|  2.36M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  2.36M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_expr0NtNtB4_5error18InternalParseErrorEB4_:
   23|  2.35M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  2.35M|where
   25|  2.35M|    F: nom::Parser<&'a str, T, E>,
   26|  2.35M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  2.35M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs0_0NtNtB4_5error18InternalParseErrorEB4_:
   23|    824|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|    824|where
   25|    824|    F: nom::Parser<&'a str, T, E>,
   26|    824|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|    824|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  1.18k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.18k|where
   25|  1.18k|    F: nom::Parser<&'a str, T, E>,
   26|  1.18k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.18k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_15filter_selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|   950k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   950k|where
   25|   950k|    F: nom::Parser<&'a str, T, E>,
   26|   950k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   950k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNCNvB2_8selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  1.80M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.80M|where
   25|  1.80M|    F: nom::Parser<&'a str, T, E>,
   26|  1.80M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.80M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  1.80M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.80M|where
   25|  1.80M|    F: nom::Parser<&'a str, T, E>,
   26|  1.80M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.80M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  1.80M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.80M|where
   25|  1.80M|    F: nom::Parser<&'a str, T, E>,
   26|  1.80M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.80M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14slice_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  1.80M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.80M|where
   25|  1.80M|    F: nom::Parser<&'a str, T, E>,
   26|  1.80M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.80M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  1.80M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.80M|where
   25|  1.80M|    F: nom::Parser<&'a str, T, E>,
   26|  1.80M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.80M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtNvB2_12logical_expr9BooleanOpNCINvNtCs9XyeddurhEe_3nom6branch3altReBZ_NtNtB4_5error18InternalParseErrorTNCINvNtB1B_10combinator5valueB24_BZ_B24_B29_NCINvNtNtB1B_5bytes8complete3tagB24_B24_B29_E0E0B2H_EE0B29_EB4_:
   23|   100k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   100k|where
   25|   100k|    F: nom::Parser<&'a str, T, E>,
   26|   100k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   100k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceReNvB2_3intNtNtB4_5error18InternalParseErrorEB4_:
   23|  1.57M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.57M|where
   25|  1.57M|    F: nom::Parser<&'a str, T, E>,
   26|  1.57M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.57M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReNtNtB4_5error18InternalParseErrorE0B1R_EB4_:
   23|  1.78M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.78M|where
   25|  1.78M|    F: nom::Parser<&'a str, T, E>,
   26|  1.78M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.78M|}
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceINtNtCshZc3FwCJ069_4core6option6OptionReENCINvNtCs9XyeddurhEe_3nom8sequence8precededB1D_cB11_NtNtB6_5error18InternalParseErrorNCINvNtNtB1N_9character8complete4charB1D_B2w_E0NCINvNtB1N_10combinator3optB1D_B1D_B2w_NCIB2_B1D_NvB4_3intB2w_E0E0E0B2w_E0B6_:
   27|   785k|    move |q: &'a str| {
   28|   785k|        inner
   29|   785k|            .parse(skip_whitespace(q))
   30|   785k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   785k|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceINtNtCshZc3FwCJ069_4core6option6OptioncENCINvNtCs9XyeddurhEe_3nom10combinator3optRecNtNtB6_5error18InternalParseErrorNCINvNtNtB1M_9character8complete4charB2k_B2n_E0E0B2n_E0B6_:
   27|  2.36M|    move |q: &'a str| {
   28|  2.36M|        inner
   29|  2.36M|            .parse(skip_whitespace(q))
   30|  2.36M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  2.36M|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_expr0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  2.35M|    move |q: &'a str| {
   28|  2.35M|        inner
   29|  2.35M|            .parse(skip_whitespace(q))
   30|  2.35M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  2.35M|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs0_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|    824|    move |q: &'a str| {
   28|    824|        inner
   29|    824|            .parse(skip_whitespace(q))
   30|    824|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|    824|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  1.18k|    move |q: &'a str| {
   28|  1.18k|        inner
   29|  1.18k|            .parse(skip_whitespace(q))
   30|  1.18k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  1.18k|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_15filter_selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|   644k|    move |q: &'a str| {
   28|   644k|        inner
   29|   644k|            .parse(skip_whitespace(q))
   30|   644k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   644k|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNCNvB4_8selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|   950k|    move |q: &'a str| {
   28|   950k|        inner
   29|   950k|            .parse(skip_whitespace(q))
   30|   950k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   950k|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  1.80M|    move |q: &'a str| {
   28|  1.80M|        inner
   29|  1.80M|            .parse(skip_whitespace(q))
   30|  1.80M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  1.80M|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|   993k|    move |q: &'a str| {
   28|   993k|        inner
   29|   993k|            .parse(skip_whitespace(q))
   30|   993k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   993k|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14slice_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  1.78M|    move |q: &'a str| {
   28|  1.78M|        inner
   29|  1.78M|            .parse(skip_whitespace(q))
   30|  1.78M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  1.78M|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  1.78M|    move |q: &'a str| {
   28|  1.78M|        inner
   29|  1.78M|            .parse(skip_whitespace(q))
   30|  1.78M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  1.78M|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtNvB4_12logical_expr9BooleanOpNCINvNtCs9XyeddurhEe_3nom6branch3altReB11_NtNtB6_5error18InternalParseErrorTNCINvNtB1D_10combinator5valueB26_B11_B26_B2c_NCINvNtNtB1D_5bytes8complete3tagB26_B26_B2c_E0E0B2K_EE0B2c_E0B6_:
   27|   100k|    move |q: &'a str| {
   28|   100k|        inner
   29|   100k|            .parse(skip_whitespace(q))
   30|   100k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   100k|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceReNvB4_3intNtNtB6_5error18InternalParseErrorE0B6_:
   27|   862k|    move |q: &'a str| {
   28|   862k|        inner
   29|   862k|            .parse(skip_whitespace(q))
   30|   862k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   862k|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReNtNtB6_5error18InternalParseErrorE0B1T_E0B6_:
   27|  1.78M|    move |q: &'a str| {
   28|  1.78M|        inner
   29|  1.78M|            .parse(skip_whitespace(q))
   30|  1.78M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  1.78M|    }
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceINtNtCshZc3FwCJ069_4core6option6OptionReENCINvNtCs9XyeddurhEe_3nom8sequence8precededB1F_cB13_NtNtB8_5error18InternalParseErrorNCINvNtNtB1P_9character8complete4charB1F_B2y_E0NCINvNtB1P_10combinator3optB1F_B1F_B2y_NCIB4_B1F_NvB6_3intB2y_E0E0E0B2y_E00B8_:
   30|  76.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceINtNtCshZc3FwCJ069_4core6option6OptioncENCINvNtCs9XyeddurhEe_3nom10combinator3optRecNtNtB8_5error18InternalParseErrorNCINvNtNtB1O_9character8complete4charB2m_B2p_E0E0B2p_E00B8_:
   30|  2.36M|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_expr0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  99.6k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs0_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|    296|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|    324|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_15filter_selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  96.8k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNCNvB6_8selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  96.8k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  5.02k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  42.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14slice_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|   784k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  6.38k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceNtNvB6_12logical_expr9BooleanOpNCINvNtCs9XyeddurhEe_3nom6branch3altReB13_NtNtB8_5error18InternalParseErrorTNCINvNtB1F_10combinator5valueB28_B13_B28_B2e_NCINvNtNtB1F_5bytes8complete3tagB28_B28_B2e_E0E0B2M_EE0B2e_E00B8_:
   30|  2.00k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespaceReNvB6_3intNtNtB8_5error18InternalParseErrorE00B8_:
   30|  6.56k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs9XyeddurhEe_3nom9character8complete4charReNtNtB8_5error18InternalParseErrorE0B1V_E00B8_:
   30|   786k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser7segment0B5_:
  145|  18.6k|        |q| descendant_segment(q, ctx),
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser7segments_0B5_:
  146|  13.1k|        |q| child_segment(q, ctx),
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser18descendant_segment0B5_:
  156|   497k|                |q| bracketed_selection(q, ctx),
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser13child_segment0B5_:
  169|   888k|            |q| bracketed_selection(q, ctx),
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  184|  18.6k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  18.6k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  184|  2.27M|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  2.27M|}
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14failed_segmentNtB6_7SegmentE0B6_:
  185|  1.94k|    move |q: &str| {
  186|  1.94k|        let rest = skip_one(q)
  187|  1.94k|            .trim_start_matches('.')
  188|  1.94k|            .trim_start_matches(|x| x != '.' && x != '[');
  189|  1.94k|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|  1.94k|    }
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14failed_segmentNtB6_9SelectorsE0B6_:
  185|   494k|    move |q: &str| {
  186|   494k|        let rest = skip_one(q)
  187|   494k|            .trim_start_matches('.')
  188|   494k|            .trim_start_matches(|x| x != '.' && x != '[');
  189|   494k|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|   494k|    }
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14failed_segmentNtB8_7SegmentE00B8_:
  188|  8.50k|            .trim_start_matches(|x| x != '.' && x != '[');
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser14failed_segmentNtB8_9SelectorsE00B8_:
  188|  4.58M|            .trim_start_matches(|x| x != '.' && x != '[');
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand0B5_:
  243|  71.6k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  244|  71.6k|                acc.push(x);
  245|  71.6k|                acc
  246|  71.6k|            }),
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthands_0B5_:
  248|  66.0k|        |x| Selectors::one(Selector::Name(x.into())),
_RNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand10name_first0B7_:
  252|   696k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
_RNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser21member_name_shorthand9name_char0B7_:
  258|  65.6k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser8selector0B5_:
  268|   950k|        ignore_whitespace(|q| filter_selector(q, ctx)),
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser17wildcard_selector0B5_:
  291|  13.4k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser15failed_selector0B5_:
  362|  7.68M|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser15failed_selectors_0B5_:
  367|   315k|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser15filter_selector0B5_:
  385|   644k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr0B5_:
  421|  2.35M|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_exprs_0B5_:
  434|  1.18k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_exprs0_0B5_:
  439|    824|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
_RNCNvNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12logical_expr12parse_single0B7_:
  453|  1.71M|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12filter_query0B5_:
  593|  1.36M|            |q| descendant_segment(q, ctx),
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser12filter_querys_0B5_:
  594|   875k|            |q| child_segment(q, ctx),
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser28failed_segment_within_filterNtB4_7SegmentEB4_:
  633|  1.36M|fn failed_segment_within_filter<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  634|       |    move |q: &str| {
  635|       |        // We want to find the next segment or close the filter.
  636|       |        let rest = skip_one(q)
  637|       |            .trim_start_matches('.')
  638|       |            .trim_start_matches(|x| x != ',' && x != ']' && x != '.' && x != '[');
  639|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  640|       |    }
  641|  1.36M|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser24failed_filter_expressionNtB4_11LogicalExprEB4_:
  643|   198k|fn failed_filter_expression<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  644|       |    move |q: &str| {
  645|       |        // We want to close the filter, so just try to find the next ']' or ','
  646|       |        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
  647|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  648|       |    }
  649|   198k|}
_RNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser24failed_filter_expressionNtB6_11LogicalExprE0B6_:
  644|   198k|    move |q: &str| {
  645|   198k|        // We want to close the filter, so just try to find the next ']' or ','
  646|   198k|        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
  647|   198k|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  648|   198k|    }
_RNCNCINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser24failed_filter_expressionNtB8_11LogicalExprE00B8_:
  646|  14.2M|        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser10comparable0B5_:
  663|   170k|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6number0B5_:
  686|  12.3k|    map(float, |f| JsonNumber::from(f).normalize())(q)
_RNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6string0B5_:
  748|  14.8k|    move |q: &str| {
  749|  14.8k|        let mut builder = JsonStringBuilder::new();
  750|  14.8k|        let mut syntax_errors = vec![];
  751|  14.8k|        let mut stream = q.char_indices().peekable();
  752|       |
  753|   446k|        while let Some((c_idx, c)) = stream.next() {
  754|   439k|            match (c, mode) {
  755|       |                ('\\', _) => {
  756|  66.7k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  757|  34.9k|                        Ok(r) => {
  758|  34.9k|                            builder.push(r);
  759|  34.9k|                        }
  760|  31.8k|                        Err(err) => {
  761|  31.8k|                            syntax_errors.push(err);
  762|  31.8k|                        }
  763|       |                    };
  764|       |                }
  765|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  766|  7.23k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  767|  7.23k|                    return if syntax_errors.is_empty() {
  768|  6.27k|                        Ok((rest, builder.finish()))
  769|       |                    } else {
  770|    966|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  771|       |                    };
  772|       |                }
  773|   364k|                (..='\u{001F}', _) => {
  774|   221k|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  775|   221k|                    syntax_errors.push(SyntaxError::new(
  776|   221k|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  777|   221k|                        rest.len() + 1,
  778|   221k|                        1,
  779|   221k|                    ))
  780|       |                }
  781|   143k|                _ => {
  782|   143k|                    builder.push(c);
  783|   143k|                }
  784|       |            }
  785|       |        }
  786|       |
  787|  7.57k|        let err_kind = if mode == StringParseMode::SingleQuoted {
  788|  2.31k|            SyntaxErrorKind::MissingClosingSingleQuote
  789|       |        } else {
  790|  5.26k|            SyntaxErrorKind::MissingClosingDoubleQuote
  791|       |        };
  792|  7.57k|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  793|  7.57k|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  794|       |
  795|       |        fn read_escape_sequence<I>(
  796|       |            q_len: usize,
  797|       |            c_idx: usize,
  798|       |            chars: &mut Peekable<I>,
  799|       |            mode: StringParseMode,
  800|       |        ) -> std::result::Result<char, SyntaxError>
  801|       |        where
  802|       |            I: Iterator<Item = (usize, char)>,
  803|       |        {
  804|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  805|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  806|       |                q_len - c_idx,
  807|       |                1,
  808|       |            ))?;
  809|       |            match ctrl {
  810|       |                'u' => {
  811|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  812|       |                    match raw_c {
  813|       |                        // High surrogate, start of a UTF-16 pair.
  814|       |                        0xD800..=0xDBFF => {
  815|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  816|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  817|       |                                q_len - c_idx,
  818|       |                                6,
  819|       |                            ))?;
  820|       |                            if next != '\\' {
  821|       |                                return Err(SyntaxError::new(
  822|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  823|       |                                    q_len - c_idx,
  824|       |                                    6,
  825|       |                                ));
  826|       |                            }
  827|       |                            chars.next();
  828|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  829|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  830|       |                                q_len - c_idx,
  831|       |                                6,
  832|       |                            ))?;
  833|       |                            if next != 'u' {
  834|       |                                return Err(SyntaxError::new(
  835|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  836|       |                                    q_len - c_idx,
  837|       |                                    6,
  838|       |                                ));
  839|       |                            }
  840|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  841|       |                            match low {
  842|       |                                0xDC00..=0xDFFF => {
  843|       |                                    let n = (((raw_c - 0xD800) << 10) | (low - 0xDC00)) + 0x10000;
  844|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  845|       |                                }
  846|       |                                _ => Err(SyntaxError::new(
  847|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  848|       |                                    q_len - c_idx,
  849|       |                                    6,
  850|       |                                )),
  851|       |                            }
  852|       |                        }
  853|       |                        // Low surrogate, invalid escape sequence.
  854|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  855|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  856|       |                            q_len - c_idx,
  857|       |                            6,
  858|       |                        )),
  859|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  860|       |                    }
  861|       |                }
  862|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  863|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  864|       |                'n' => Ok('\n'),       // U+000A LF line feed
  865|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  866|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  867|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  868|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  869|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  870|       |                _ => Err(SyntaxError::new(
  871|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  872|       |                    q_len - c_idx,
  873|       |                    2,
  874|       |                )), // no other escape sequences are allowed
  875|       |            }
  876|       |        }
  877|       |
  878|       |        fn read_hexadecimal_escape<I>(
  879|       |            q_len: usize,
  880|       |            c_idx: usize,
  881|       |            chars: &mut Peekable<I>,
  882|       |        ) -> std::result::Result<u32, SyntaxError>
  883|       |        where
  884|       |            I: Iterator<Item = (usize, char)>,
  885|       |        {
  886|       |            let mut x = 0;
  887|       |            for i in 0..4 {
  888|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  889|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  890|       |                    q_len - c_idx + 1,
  891|       |                    2 + i,
  892|       |                ))?;
  893|       |                let v = match c {
  894|       |                    '0'..='9' => c as u32 - '0' as u32,
  895|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  896|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  897|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  898|       |                    _ => {
  899|       |                        return Err(SyntaxError::new(
  900|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  901|       |                            q_len - c_idx - i - 1,
  902|       |                            1,
  903|       |                        ))
  904|       |                    }
  905|       |                };
  906|       |                x <<= 4;
  907|       |                x += v;
  908|       |                chars.next();
  909|       |            }
  910|       |            Ok(x)
  911|       |        }
  912|  14.8k|    }
_RNCNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6string00B7_:
  766|  7.01k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNCNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6string0s_0B7_:
  774|   220k|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
_RINvNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCshZc3FwCJ069_4core3str4iter11CharIndicesEB8_:
  795|  66.7k|        fn read_escape_sequence<I>(
  796|  66.7k|            q_len: usize,
  797|  66.7k|            c_idx: usize,
  798|  66.7k|            chars: &mut Peekable<I>,
  799|  66.7k|            mode: StringParseMode,
  800|  66.7k|        ) -> std::result::Result<char, SyntaxError>
  801|  66.7k|        where
  802|  66.7k|            I: Iterator<Item = (usize, char)>,
  803|  66.7k|        {
  804|  66.7k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  805|  66.7k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  806|  66.7k|                q_len - c_idx,
  807|  66.7k|                1,
  808|  66.7k|            ))?;
  809|  1.80k|            match ctrl {
  810|       |                'u' => {
  811|  28.0k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  812|  21.8k|                    match raw_c {
  813|       |                        // High surrogate, start of a UTF-16 pair.
  814|  21.0k|                        0xD800..=0xDBFF => {
  815|  20.8k|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  816|  20.8k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  817|  20.8k|                                q_len - c_idx,
  818|  20.8k|                                6,
  819|  20.8k|                            ))?;
  820|  20.6k|                            if next != '\\' {
  821|  1.52k|                                return Err(SyntaxError::new(
  822|  1.52k|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  823|  1.52k|                                    q_len - c_idx,
  824|  1.52k|                                    6,
  825|  1.52k|                                ));
  826|  19.1k|                            }
  827|  19.1k|                            chars.next();
  828|  19.1k|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  829|  19.1k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  830|  19.1k|                                q_len - c_idx,
  831|  19.1k|                                6,
  832|  19.1k|                            ))?;
  833|  18.7k|                            if next != 'u' {
  834|    239|                                return Err(SyntaxError::new(
  835|    239|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  836|    239|                                    q_len - c_idx,
  837|    239|                                    6,
  838|    239|                                ));
  839|  18.5k|                            }
  840|  18.5k|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  841|  18.0k|                            match low {
  842|    267|                                0xDC00..=0xDFFF => {
  843|    266|                                    let n = (((raw_c - 0xD800) << 10) | (low - 0xDC00)) + 0x10000;
  844|    266|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  845|       |                                }
  846|  17.7k|                                _ => Err(SyntaxError::new(
  847|  17.7k|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  848|  17.7k|                                    q_len - c_idx,
  849|  17.7k|                                    6,
  850|  17.7k|                                )),
  851|       |                            }
  852|       |                        }
  853|       |                        // Low surrogate, invalid escape sequence.
  854|    254|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  855|    215|                            SyntaxErrorKind::UnpairedLowSurrogate,
  856|    215|                            q_len - c_idx,
  857|    215|                            6,
  858|    215|                        )),
  859|    848|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  860|       |                    }
  861|       |                }
  862|    194|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  863|    363|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  864|    194|                'n' => Ok('\n'),       // U+000A LF line feed
  865|    201|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  866|    194|                'r' => Ok('\r'),       // U+000D CR carriage return
  867|  1.80k|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  868|    511|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  869|  32.2k|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  870|  4.59k|                _ => Err(SyntaxError::new(
  871|  4.59k|                    SyntaxErrorKind::InvalidEscapeSequence,
  872|  4.59k|                    q_len - c_idx,
  873|  4.59k|                    2,
  874|  4.59k|                )), // no other escape sequences are allowed
  875|       |            }
  876|  66.7k|        }
_RINvNCNvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCshZc3FwCJ069_4core3str4iter11CharIndicesEB8_:
  878|  46.5k|        fn read_hexadecimal_escape<I>(
  879|  46.5k|            q_len: usize,
  880|  46.5k|            c_idx: usize,
  881|  46.5k|            chars: &mut Peekable<I>,
  882|  46.5k|        ) -> std::result::Result<u32, SyntaxError>
  883|  46.5k|        where
  884|  46.5k|            I: Iterator<Item = (usize, char)>,
  885|  46.5k|        {
  886|  46.5k|            let mut x = 0;
  887|   218k|            for i in 0..4 {
  888|   178k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  889|   178k|                    SyntaxErrorKind::InvalidEscapeSequence,
  890|   178k|                    q_len - c_idx + 1,
  891|   178k|                    2 + i,
  892|   178k|                ))?;
  893|   175k|                let v = match c {
  894|   174k|                    '0'..='9' => c as u32 - '0' as u32,
  895|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  896|  46.2k|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  897|  4.53k|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  898|       |                    _ => {
  899|  3.40k|                        return Err(SyntaxError::new(
  900|  3.40k|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  901|  3.40k|                            q_len - c_idx - i - 1,
  902|  3.40k|                            1,
  903|  3.40k|                        ))
  904|       |                    }
  905|       |                };
  906|   171k|                x <<= 4;
  907|   171k|                x += v;
  908|   171k|                chars.next();
  909|       |            }
  910|  39.9k|            Ok(x)
  911|  46.5k|        }
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser4failNtB4_10ComparableEB4_:
  915|    613|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  916|    613|    Err(Err::Failure(InternalParseError::SyntaxError(
  917|    613|        SyntaxError::new(kind, rev_idx, err_len),
  918|    613|        rest,
  919|    613|    )))
  920|    613|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser4failNtB4_11LogicalExprEB4_:
  915|   199k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  916|   199k|    Err(Err::Failure(InternalParseError::SyntaxError(
  917|   199k|        SyntaxError::new(kind, rev_idx, err_len),
  918|   199k|        rest,
  919|   199k|    )))
  920|   199k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser4failNtB4_7SegmentEB4_:
  915|  1.94k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  916|  1.94k|    Err(Err::Failure(InternalParseError::SyntaxError(
  917|  1.94k|        SyntaxError::new(kind, rev_idx, err_len),
  918|  1.94k|        rest,
  919|  1.94k|    )))
  920|  1.94k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser4failNtB4_8SelectorEB4_:
  915|  1.37k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  916|  1.37k|    Err(Err::Failure(InternalParseError::SyntaxError(
  917|  1.37k|        SyntaxError::new(kind, rev_idx, err_len),
  918|  1.37k|        rest,
  919|  1.37k|    )))
  920|  1.37k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser4failNtB4_9SelectorsEB4_:
  915|   494k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  916|   494k|    Err(Err::Failure(InternalParseError::SyntaxError(
  917|   494k|        SyntaxError::new(kind, rev_idx, err_len),
  918|   494k|        rest,
  919|   494k|    )))
  920|   494k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser4failNtNtB4_3num9JsonFloatEB4_:
  915|  1.73k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  916|  1.73k|    Err(Err::Failure(InternalParseError::SyntaxError(
  917|  1.73k|        SyntaxError::new(kind, rev_idx, err_len),
  918|  1.73k|        rest,
  919|  1.73k|    )))
  920|  1.73k|}
_RINvNtCs9kVGM5uEiCY_15rsonpath_syntax6parser4failReEB4_:
  915|  1.97k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  916|  1.97k|    Err(Err::Failure(InternalParseError::SyntaxError(
  917|  1.97k|        SyntaxError::new(kind, rev_idx, err_len),
  918|  1.97k|        rest,
  919|  1.97k|    )))
  920|  1.97k|}

_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   40|  80.8k|    pub(crate) fn new() -> Self {
   41|  80.8k|        Self {
   42|  80.8k|            quoted: String::from('"'),
   43|  80.8k|        }
   44|  80.8k|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   46|   249k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   47|   249k|        self.quoted.push(char);
   48|   249k|        self
   49|   249k|    }
_RNvMs_NtCs9kVGM5uEiCY_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   51|  72.2k|    pub(crate) fn finish(mut self) -> JsonString {
   52|  72.2k|        self.quoted.push('"');
   53|  72.2k|        JsonString { quoted: self.quoted }
   54|  72.2k|    }
_RNvXs0_NtCs9kVGM5uEiCY_15rsonpath_syntax3strNtB5_10JsonStringINtNtCshZc3FwCJ069_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   59|  66.0k|    fn from(value: JsonStringBuilder) -> Self {
   60|  66.0k|        value.finish()
   61|  66.0k|    }

