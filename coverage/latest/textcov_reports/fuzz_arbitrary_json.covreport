_RNvXNtNtNtCsf4HWeWhA5iz_9arbitrary7foreign5alloc6stringNtNtCs8f6x4lOZV33_5alloc6string6StringNtB8_9Arbitrary9arbitrary:
    7|  70.2k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
    8|  70.2k|        <&str as Arbitrary>::arbitrary(u).map(Into::into)
    9|  70.2k|    }

_RNvXNtNtNtCsf4HWeWhA5iz_9arbitrary7foreign5alloc3vecINtNtCs8f6x4lOZV33_5alloc3vec3VecNtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB1t_4JsonNtB8_9Arbitrary9arbitrary8RawValueEB2d_9arbitraryB1t_:
   10|  27.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   11|  27.0k|        u.arbitrary_iter()?.collect()
   12|  27.0k|    }

_RNvXNtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core4boolbNtB8_9Arbitrary9arbitrary:
    5|   198k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
    6|   198k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
    7|   198k|    }

_RNvXNtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core4charcNtB8_9Arbitrary9arbitrary:
    5|  18.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
    6|       |        // The highest unicode code point is 0x11_FFFF
    7|       |        const CHAR_END: u32 = 0x11_0000;
    8|       |        // The size of the surrogate blocks
    9|       |        const SURROGATES_START: u32 = 0xD800;
   10|  18.3k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
   11|  18.3k|        if let Some(c) = char::from_u32(c) {
   12|  18.1k|            Ok(c)
   13|       |        } else {
   14|       |            // We found a surrogate, wrap and try again
   15|    261|            c -= SURROGATES_START;
   16|    261|            Ok(char::from_u32(c)
   17|    261|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
   18|       |        }
   19|  18.3k|    }

_RNvXs3_NtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3nummNtBb_9Arbitrary9size_hintCs6zVzifqCO6f_15rsonpath_syntax:
   23|  7.96k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
   24|  7.96k|                    let n = mem::size_of::<$ty>();
   25|  7.96k|                    (n, Some(n))
   26|  7.96k|                }
_RNvXs1_NtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3numhNtBb_9Arbitrary9arbitrary:
   16|   198k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   17|   198k|                    let mut buf = [0; mem::size_of::<$ty>()];
   18|   198k|                    u.fill_buffer(&mut buf)?;
   19|   198k|                    Ok(Self::from_le_bytes(buf))
   20|   198k|                }
_RNvXs1_NtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3numhNtBb_9Arbitrary9size_hintBb_:
   23|  70.2k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
   24|  70.2k|                    let n = mem::size_of::<$ty>();
   25|  70.2k|                    (n, Some(n))
   26|  70.2k|                }
_RNvXs3_NtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3nummNtBb_9Arbitrary9arbitrary:
   16|   162k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   17|   162k|                    let mut buf = [0; mem::size_of::<$ty>()];
   18|   162k|                    u.fill_buffer(&mut buf)?;
   19|   162k|                    Ok(Self::from_le_bytes(buf))
   20|   162k|                }
_RNvXs4_NtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3numyNtBb_9Arbitrary9arbitrary:
   16|  7.23k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   17|  7.23k|                    let mut buf = [0; mem::size_of::<$ty>()];
   18|  7.23k|                    u.fill_buffer(&mut buf)?;
   19|  7.23k|                    Ok(Self::from_le_bytes(buf))
   20|  7.23k|                }
_RNvXs9_NtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3numxNtBb_9Arbitrary9arbitrary:
   16|  5.62k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   17|  5.62k|                    let mut buf = [0; mem::size_of::<$ty>()];
   18|  5.62k|                    u.fill_buffer(&mut buf)?;
   19|  5.62k|                    Ok(Self::from_le_bytes(buf))
   20|  5.62k|                }
_RNvXsc_NtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3numdNtBb_9Arbitrary9arbitrary:
   75|  7.23k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   76|  7.23k|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
   77|  7.23k|                }

_RNvNtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3str13arbitrary_str:
    6|  70.2k|fn arbitrary_str<'a>(u: &mut Unstructured<'a>, size: usize) -> Result<&'a str> {
    7|  70.2k|    match str::from_utf8(u.peek_bytes(size).unwrap()) {
    8|  4.43k|        Ok(s) => {
    9|  4.43k|            u.bytes(size).unwrap();
   10|  4.43k|            Ok(s)
   11|       |        }
   12|  65.8k|        Err(e) => {
   13|  65.8k|            let i = e.valid_up_to();
   14|  65.8k|            let valid = u.bytes(i).unwrap();
   15|  65.8k|            let s = unsafe {
   16|  65.8k|                debug_assert!(str::from_utf8(valid).is_ok());
   17|  65.8k|                str::from_utf8_unchecked(valid)
   18|  65.8k|            };
   19|  65.8k|            Ok(s)
   20|       |        }
   21|       |    }
   22|  70.2k|}
_RNvXNtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core3strReNtB8_9Arbitrary9arbitrary:
   25|  70.2k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   26|  70.2k|        let size = u.arbitrary_len::<u8>()?;
   27|  70.2k|        arbitrary_str(u, size)
   28|  70.2k|    }

_RNvXsm_NtNtNtCsf4HWeWhA5iz_9arbitrary7foreign4core5tupleTNtNtCs8f6x4lOZV33_5alloc6string6StringNtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB1D_4JsonNtBb_9Arbitrary9arbitrary8RawValueEB2n_9arbitraryB1D_:
   13|  61.8k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   14|  61.8k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
   15|  61.8k|            }

_RNvXNtNtNtNtCsf4HWeWhA5iz_9arbitrary7foreign3std11collections8hash_mapINtNtNtNtCsjixu6NuYCfn_3std11collections4hash3map7HashMapNtNtCs8f6x4lOZV33_5alloc6string6StringNtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB2L_4JsonNtBa_9Arbitrary9arbitrary8RawValueEB3v_9arbitraryB2L_:
   15|  25.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   16|  25.0k|        u.arbitrary_iter()?.collect()
   17|  25.0k|    }

_RNvYNtNtCs6zVzifqCO6f_15rsonpath_syntax3num8JsonUIntNtCsf4HWeWhA5iz_9arbitrary9Arbitrary13try_size_hintCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  423|  5.31k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  5.31k|        Ok(Self::size_hint(depth))
  425|  5.31k|    }
_RNvYNtNtCs6zVzifqCO6f_15rsonpath_syntax3num8JsonUIntNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9size_hintCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  320|  5.31k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  321|  5.31k|        let _ = depth;
  322|  5.31k|        (0, None)
  323|  5.31k|    }
_RNvYNtCsgMNWDGKKfbu_19fuzz_arbitrary_json14SupportedQueryNtCsf4HWeWhA5iz_9arbitrary9Arbitrary13try_size_hintB4_:
  423|  2.65k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  2.65k|        Ok(Self::size_hint(depth))
  425|  2.65k|    }
_RNvYNtCsgMNWDGKKfbu_19fuzz_arbitrary_json14SupportedQueryNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9size_hintB4_:
  320|  2.65k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  321|  2.65k|        let _ = depth;
  322|  2.65k|        (0, None)
  323|  2.65k|    }
_RNvYNtCsgMNWDGKKfbu_19fuzz_arbitrary_json4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary13try_size_hintB4_:
  423|  2.65k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  2.65k|        Ok(Self::size_hint(depth))
  425|  2.65k|    }
_RNvYNtCsgMNWDGKKfbu_19fuzz_arbitrary_json4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary19arbitrary_take_restB4_:
  216|  2.65k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  217|  2.65k|        Self::arbitrary(&mut u)
  218|  2.65k|    }
_RNvYNtCsgMNWDGKKfbu_19fuzz_arbitrary_json4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9size_hintB4_:
  320|  2.65k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  321|  2.65k|        let _ = depth;
  322|  2.65k|        (0, None)
  323|  2.65k|    }
_RNvYmNtCsf4HWeWhA5iz_9arbitrary9Arbitrary13try_size_hintCs6zVzifqCO6f_15rsonpath_syntax:
  423|  7.96k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  7.96k|        Ok(Self::size_hint(depth))
  425|  7.96k|    }
_RNvYNtNtCs6zVzifqCO6f_15rsonpath_syntax3str10JsonStringNtCsf4HWeWhA5iz_9arbitrary9Arbitrary13try_size_hintB6_:
  423|  5.31k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  5.31k|        Ok(Self::size_hint(depth))
  425|  5.31k|    }
_RNvYNtNtCs6zVzifqCO6f_15rsonpath_syntax3str10JsonStringNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9size_hintB6_:
  320|  5.31k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  321|  5.31k|        let _ = depth;
  322|  5.31k|        (0, None)
  323|  5.31k|    }

_RNvNtCsf4HWeWhA5iz_9arbitrary9size_hint3andCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   51|  7.96k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   52|  7.96k|    let lower = lhs.0 + rhs.0;
   53|  7.96k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   54|  7.96k|    (lower, upper)
   55|  7.96k|}
_RNvNtCsf4HWeWhA5iz_9arbitrary9size_hint6or_allCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   82|  7.96k|pub fn or_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   83|  7.96k|    if let Some(head) = hints.first().copied() {
   84|  7.96k|        hints[1..].iter().copied().fold(head, or)
   85|       |    } else {
   86|      0|        (0, Some(0))
   87|       |    }
   88|  7.96k|}
_RNvNtCsf4HWeWhA5iz_9arbitrary9size_hint7and_allCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   62|  23.9k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   63|  23.9k|    hints.iter().copied().fold((0, Some(0)), and)
   64|  23.9k|}
_RINvNtCsf4HWeWhA5iz_9arbitrary9size_hint19try_recursion_guardNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_json1__NtB14_8FuzzDataNtB4_9Arbitrary13try_size_hint0EB14_:
   38|  2.65k|pub fn try_recursion_guard(
   39|  2.65k|    depth: usize,
   40|  2.65k|    f: impl FnOnce(usize) -> Result<(usize, Option<usize>), crate::MaxRecursionReached>,
   41|  2.65k|) -> Result<(usize, Option<usize>), crate::MaxRecursionReached> {
   42|  2.65k|    if depth > MAX_DEPTH {
   43|      0|        Err(crate::MaxRecursionReached {})
   44|       |    } else {
   45|  2.65k|        f(depth + 1)
   46|       |    }
   47|  2.65k|}
_RINvNtCsf4HWeWhA5iz_9arbitrary9size_hint19try_recursion_guardNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons0_1__NtB14_16SupportedSegmentNtB4_9Arbitrary13try_size_hint0EB14_:
   38|  2.65k|pub fn try_recursion_guard(
   39|  2.65k|    depth: usize,
   40|  2.65k|    f: impl FnOnce(usize) -> Result<(usize, Option<usize>), crate::MaxRecursionReached>,
   41|  2.65k|) -> Result<(usize, Option<usize>), crate::MaxRecursionReached> {
   42|  2.65k|    if depth > MAX_DEPTH {
   43|      0|        Err(crate::MaxRecursionReached {})
   44|       |    } else {
   45|  2.65k|        f(depth + 1)
   46|       |    }
   47|  2.65k|}
_RINvNtCsf4HWeWhA5iz_9arbitrary9size_hint19try_recursion_guardNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons1_1__NtB14_17SupportedSelectorNtB4_9Arbitrary13try_size_hint0EB14_:
   38|  5.31k|pub fn try_recursion_guard(
   39|  5.31k|    depth: usize,
   40|  5.31k|    f: impl FnOnce(usize) -> Result<(usize, Option<usize>), crate::MaxRecursionReached>,
   41|  5.31k|) -> Result<(usize, Option<usize>), crate::MaxRecursionReached> {
   42|  5.31k|    if depth > MAX_DEPTH {
   43|      0|        Err(crate::MaxRecursionReached {})
   44|       |    } else {
   45|  5.31k|        f(depth + 1)
   46|       |    }
   47|  5.31k|}
_RNvNtCsf4HWeWhA5iz_9arbitrary9size_hint2orCs6zVzifqCO6f_15rsonpath_syntax:
   69|  13.2k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   70|  13.2k|    let lower = std::cmp::min(lhs.0, rhs.0);
   71|  13.2k|    let upper = lhs
   72|  13.2k|        .1
   73|  13.2k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   74|  13.2k|    (lower, upper)
   75|  13.2k|}
_RNvNtCsf4HWeWhA5iz_9arbitrary9size_hint3andCs6zVzifqCO6f_15rsonpath_syntax:
   51|  21.2k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   52|  21.2k|    let lower = lhs.0 + rhs.0;
   53|  21.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   54|  21.2k|    (lower, upper)
   55|  21.2k|}
_RNCNvNtCsf4HWeWhA5iz_9arbitrary9size_hint3and0B5_:
   53|  26.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB2_12Unstructured3lenCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  109|   146k|    pub fn len(&self) -> usize {
  110|   146k|        self.data.len()
  111|   146k|    }
_RNvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  133|   146k|    pub fn is_empty(&self) -> bool {
  134|   146k|        self.len() == 0
  135|   146k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangeyECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  300|  5.41k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  301|  5.41k|    where
  302|  5.41k|        T: Int,
  303|  5.41k|    {
  304|  5.41k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  305|  5.41k|        self.data = &self.data[bytes_consumed..];
  306|  5.41k|        Ok(result)
  307|  5.41k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenNtCsgMNWDGKKfbu_19fuzz_arbitrary_json16SupportedSegmentEB1h_:
  214|  2.65k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  215|  2.65k|    where
  216|  2.65k|        ElementType: Arbitrary<'a>,
  217|  2.65k|    {
  218|  2.65k|        let byte_size = self.arbitrary_byte_size()?;
  219|  2.65k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  220|  2.65k|        let elem_size = upper.unwrap_or(lower * 2);
  221|  2.65k|        let elem_size = std::cmp::max(1, elem_size);
  222|  2.65k|        Ok(byte_size / elem_size)
  223|  2.65k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB1o_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1o_:
  662|  27.0k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  663|  27.0k|        &'b mut self,
  664|  27.0k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  665|  27.0k|        Ok(ArbitraryIter {
  666|  27.0k|            u: &mut *self,
  667|  27.0k|            _marker: PhantomData,
  668|  27.0k|        })
  669|  27.0k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtNtCs8f6x4lOZV33_5alloc6string6StringNtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB21_4JsonNtB5_9Arbitrary9arbitrary8RawValueEEB21_:
  662|  25.0k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  663|  25.0k|        &'b mut self,
  664|  25.0k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  665|  25.0k|        Ok(ArbitraryIter {
  666|  25.0k|            u: &mut *self,
  667|  25.0k|            _marker: PhantomData,
  668|  25.0k|        })
  669|  25.0k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implyINtNtNtNtCshZc3FwCJ069_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  309|  5.41k|    fn int_in_range_impl<T>(
  310|  5.41k|        range: ops::RangeInclusive<T>,
  311|  5.41k|        mut bytes: impl Iterator<Item = u8>,
  312|  5.41k|    ) -> Result<(T, usize)>
  313|  5.41k|    where
  314|  5.41k|        T: Int,
  315|  5.41k|    {
  316|  5.41k|        let start = *range.start();
  317|  5.41k|        let end = *range.end();
  318|  5.41k|        assert!(
  319|  5.41k|            start <= end,
  320|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  321|       |        );
  322|       |
  323|       |        // When there is only one possible choice, don't waste any entropy from
  324|       |        // the underlying data.
  325|  5.41k|        if start == end {
  326|      0|            return Ok((start, 0));
  327|  5.41k|        }
  328|  5.41k|
  329|  5.41k|        // From here on out we work with the unsigned representation. All of the
  330|  5.41k|        // operations performed below work out just as well whether or not `T`
  331|  5.41k|        // is a signed or unsigned integer.
  332|  5.41k|        let start = start.to_unsigned();
  333|  5.41k|        let end = end.to_unsigned();
  334|  5.41k|
  335|  5.41k|        let delta = end.wrapping_sub(start);
  336|  5.41k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  337|       |
  338|       |        // Compute an arbitrary integer offset from the start of the range. We
  339|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  340|       |        // arbitrary integer and then clamping that int into our range bounds
  341|       |        // with a modulo operation.
  342|  5.41k|        let mut arbitrary_int = T::Unsigned::ZERO;
  343|  5.41k|        let mut bytes_consumed: usize = 0;
  344|       |
  345|  43.2k|        while (bytes_consumed < mem::size_of::<T>())
  346|  43.2k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  347|       |        {
  348|  37.8k|            let byte = match bytes.next() {
  349|     11|                None => break,
  350|  37.8k|                Some(b) => b,
  351|  37.8k|            };
  352|  37.8k|            bytes_consumed += 1;
  353|  37.8k|
  354|  37.8k|            // Combine this byte into our arbitrary integer, but avoid
  355|  37.8k|            // overflowing the shift for `u8` and `i8`.
  356|  37.8k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  357|      0|                T::Unsigned::from_u8(byte)
  358|       |            } else {
  359|  37.8k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  360|       |            };
  361|       |        }
  362|       |
  363|  5.41k|        let offset = if delta == T::Unsigned::MAX {
  364|      0|            arbitrary_int
  365|       |        } else {
  366|  5.41k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  367|       |        };
  368|       |
  369|       |        // Finally, we add `start` to our offset from `start` to get the result
  370|       |        // actual value within the range.
  371|  5.41k|        let result = start.wrapping_add(offset);
  372|  5.41k|
  373|  5.41k|        // And convert back to our maybe-signed representation.
  374|  5.41k|        let result = T::from_unsigned(result);
  375|  5.41k|        debug_assert!(*range.start() <= result);
  376|  5.41k|        debug_assert!(result <= *range.end());
  377|       |
  378|  5.41k|        Ok((result, bytes_consumed))
  379|  5.41k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsgMNWDGKKfbu_19fuzz_arbitrary_json16SupportedSegmentEB1c_:
  168|  17.4k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  169|  17.4k|    where
  170|  17.4k|        A: Arbitrary<'a>,
  171|  17.4k|    {
  172|  17.4k|        <A as Arbitrary<'a>>::arbitrary(self)
  173|  17.4k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB1i_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1i_:
  168|  2.65k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  169|  2.65k|    where
  170|  2.65k|        A: Arbitrary<'a>,
  171|  2.65k|    {
  172|  2.65k|        <A as Arbitrary<'a>>::arbitrary(self)
  173|  2.65k|    }
_RNvXs_NtCsf4HWeWhA5iz_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB1b_4JsonNtB6_9Arbitrary9arbitrary8RawValueENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB1b_:
  776|  71.5k|    fn next(&mut self) -> Option<Result<ElementType>> {
  777|  71.5k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  778|  71.5k|        if keep_going {
  779|  44.4k|            Some(Arbitrary::arbitrary(self.u))
  780|       |        } else {
  781|  27.0k|            None
  782|       |        }
  783|  71.5k|    }
_RNvXs_NtCsf4HWeWhA5iz_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtNtCs8f6x4lOZV33_5alloc6string6StringNtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB1O_4JsonNtB6_9Arbitrary9arbitrary8RawValueEENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB1O_:
  776|  86.8k|    fn next(&mut self) -> Option<Result<ElementType>> {
  777|  86.8k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  778|  86.8k|        if keep_going {
  779|  61.8k|            Some(Arbitrary::arbitrary(self.u))
  780|       |        } else {
  781|  25.0k|            None
  782|       |        }
  783|  86.8k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECs6zVzifqCO6f_15rsonpath_syntax:
  662|  8.12k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  663|  8.12k|        &'b mut self,
  664|  8.12k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  665|  8.12k|        Ok(ArbitraryIter {
  666|  8.12k|            u: &mut *self,
  667|  8.12k|            _marker: PhantomData,
  668|  8.12k|        })
  669|  8.12k|    }
_RNvXs_NtCsf4HWeWhA5iz_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCs6zVzifqCO6f_15rsonpath_syntax:
  776|  26.5k|    fn next(&mut self) -> Option<Result<ElementType>> {
  777|  26.5k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  778|  26.5k|        if keep_going {
  779|  18.3k|            Some(Arbitrary::arbitrary(self.u))
  780|       |        } else {
  781|  8.12k|            None
  782|       |        }
  783|  26.5k|    }
_RNvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB2_12Unstructured3new:
   86|  2.65k|    pub fn new(data: &'a [u8]) -> Self {
   87|  2.65k|        Unstructured { data }
   88|  2.65k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybEB5_:
  168|   184k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  169|   184k|    where
  170|   184k|        A: Arbitrary<'a>,
  171|   184k|    {
  172|   184k|        <A as Arbitrary<'a>>::arbitrary(self)
  173|   184k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenhEB5_:
  214|  70.2k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  215|  70.2k|    where
  216|  70.2k|        ElementType: Arbitrary<'a>,
  217|  70.2k|    {
  218|  70.2k|        let byte_size = self.arbitrary_byte_size()?;
  219|  70.2k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  220|  70.2k|        let elem_size = upper.unwrap_or(lower * 2);
  221|  70.2k|        let elem_size = std::cmp::max(1, elem_size);
  222|  70.2k|        Ok(byte_size / elem_size)
  223|  70.2k|    }
_RNvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  225|  72.9k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  226|  72.9k|        if self.data.is_empty() {
  227|    311|            Ok(0)
  228|  72.5k|        } else if self.data.len() == 1 {
  229|    105|            self.data = &[];
  230|    105|            Ok(0)
  231|       |        } else {
  232|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  233|       |            // found that this lets fuzzers more efficiently explore the input
  234|       |            // space.
  235|       |            //
  236|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  237|       |
  238|       |            // We only consume as many bytes as necessary to cover the entire
  239|       |            // range of the byte string.
  240|       |            // Note: We cast to u64 so we don't overflow when checking u32::MAX + 4 on 32-bit archs
  241|  72.4k|            let len = if self.data.len() as u64 <= u8::MAX as u64 + 1 {
  242|  21.4k|                let bytes = 1;
  243|  21.4k|                let max_size = self.data.len() - bytes;
  244|  21.4k|                let (rest, for_size) = self.data.split_at(max_size);
  245|  21.4k|                self.data = rest;
  246|  21.4k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  247|  51.0k|            } else if self.data.len() as u64 <= u16::MAX as u64 + 2 {
  248|  51.0k|                let bytes = 2;
  249|  51.0k|                let max_size = self.data.len() - bytes;
  250|  51.0k|                let (rest, for_size) = self.data.split_at(max_size);
  251|  51.0k|                self.data = rest;
  252|  51.0k|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  253|      0|            } else if self.data.len() as u64 <= u32::MAX as u64 + 4 {
  254|      0|                let bytes = 4;
  255|      0|                let max_size = self.data.len() - bytes;
  256|      0|                let (rest, for_size) = self.data.split_at(max_size);
  257|      0|                self.data = rest;
  258|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  259|       |            } else {
  260|      0|                let bytes = 8;
  261|      0|                let max_size = self.data.len() - bytes;
  262|      0|                let (rest, for_size) = self.data.split_at(max_size);
  263|      0|                self.data = rest;
  264|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  265|       |            };
  266|       |
  267|  72.4k|            Ok(len)
  268|       |        }
  269|  72.9k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCshZc3FwCJ069_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  309|  21.4k|    fn int_in_range_impl<T>(
  310|  21.4k|        range: ops::RangeInclusive<T>,
  311|  21.4k|        mut bytes: impl Iterator<Item = u8>,
  312|  21.4k|    ) -> Result<(T, usize)>
  313|  21.4k|    where
  314|  21.4k|        T: Int,
  315|  21.4k|    {
  316|  21.4k|        let start = *range.start();
  317|  21.4k|        let end = *range.end();
  318|  21.4k|        assert!(
  319|  21.4k|            start <= end,
  320|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  321|       |        );
  322|       |
  323|       |        // When there is only one possible choice, don't waste any entropy from
  324|       |        // the underlying data.
  325|  21.4k|        if start == end {
  326|      0|            return Ok((start, 0));
  327|  21.4k|        }
  328|  21.4k|
  329|  21.4k|        // From here on out we work with the unsigned representation. All of the
  330|  21.4k|        // operations performed below work out just as well whether or not `T`
  331|  21.4k|        // is a signed or unsigned integer.
  332|  21.4k|        let start = start.to_unsigned();
  333|  21.4k|        let end = end.to_unsigned();
  334|  21.4k|
  335|  21.4k|        let delta = end.wrapping_sub(start);
  336|  21.4k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  337|       |
  338|       |        // Compute an arbitrary integer offset from the start of the range. We
  339|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  340|       |        // arbitrary integer and then clamping that int into our range bounds
  341|       |        // with a modulo operation.
  342|  21.4k|        let mut arbitrary_int = T::Unsigned::ZERO;
  343|  21.4k|        let mut bytes_consumed: usize = 0;
  344|       |
  345|  42.8k|        while (bytes_consumed < mem::size_of::<T>())
  346|  21.4k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  347|       |        {
  348|  21.4k|            let byte = match bytes.next() {
  349|      0|                None => break,
  350|  21.4k|                Some(b) => b,
  351|  21.4k|            };
  352|  21.4k|            bytes_consumed += 1;
  353|  21.4k|
  354|  21.4k|            // Combine this byte into our arbitrary integer, but avoid
  355|  21.4k|            // overflowing the shift for `u8` and `i8`.
  356|  21.4k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  357|  21.4k|                T::Unsigned::from_u8(byte)
  358|       |            } else {
  359|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  360|       |            };
  361|       |        }
  362|       |
  363|  21.4k|        let offset = if delta == T::Unsigned::MAX {
  364|     50|            arbitrary_int
  365|       |        } else {
  366|  21.3k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  367|       |        };
  368|       |
  369|       |        // Finally, we add `start` to our offset from `start` to get the result
  370|       |        // actual value within the range.
  371|  21.4k|        let result = start.wrapping_add(offset);
  372|  21.4k|
  373|  21.4k|        // And convert back to our maybe-signed representation.
  374|  21.4k|        let result = T::from_unsigned(result);
  375|  21.4k|        debug_assert!(*range.start() <= result);
  376|  21.4k|        debug_assert!(result <= *range.end());
  377|       |
  378|  21.4k|        Ok((result, bytes_consumed))
  379|  21.4k|    }
_RINvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCshZc3FwCJ069_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  309|  51.0k|    fn int_in_range_impl<T>(
  310|  51.0k|        range: ops::RangeInclusive<T>,
  311|  51.0k|        mut bytes: impl Iterator<Item = u8>,
  312|  51.0k|    ) -> Result<(T, usize)>
  313|  51.0k|    where
  314|  51.0k|        T: Int,
  315|  51.0k|    {
  316|  51.0k|        let start = *range.start();
  317|  51.0k|        let end = *range.end();
  318|  51.0k|        assert!(
  319|  51.0k|            start <= end,
  320|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  321|       |        );
  322|       |
  323|       |        // When there is only one possible choice, don't waste any entropy from
  324|       |        // the underlying data.
  325|  51.0k|        if start == end {
  326|      0|            return Ok((start, 0));
  327|  51.0k|        }
  328|  51.0k|
  329|  51.0k|        // From here on out we work with the unsigned representation. All of the
  330|  51.0k|        // operations performed below work out just as well whether or not `T`
  331|  51.0k|        // is a signed or unsigned integer.
  332|  51.0k|        let start = start.to_unsigned();
  333|  51.0k|        let end = end.to_unsigned();
  334|  51.0k|
  335|  51.0k|        let delta = end.wrapping_sub(start);
  336|  51.0k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  337|       |
  338|       |        // Compute an arbitrary integer offset from the start of the range. We
  339|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  340|       |        // arbitrary integer and then clamping that int into our range bounds
  341|       |        // with a modulo operation.
  342|  51.0k|        let mut arbitrary_int = T::Unsigned::ZERO;
  343|  51.0k|        let mut bytes_consumed: usize = 0;
  344|       |
  345|   153k|        while (bytes_consumed < mem::size_of::<T>())
  346|   102k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  347|       |        {
  348|   102k|            let byte = match bytes.next() {
  349|      0|                None => break,
  350|   102k|                Some(b) => b,
  351|   102k|            };
  352|   102k|            bytes_consumed += 1;
  353|   102k|
  354|   102k|            // Combine this byte into our arbitrary integer, but avoid
  355|   102k|            // overflowing the shift for `u8` and `i8`.
  356|   102k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  357|      0|                T::Unsigned::from_u8(byte)
  358|       |            } else {
  359|   102k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  360|       |            };
  361|       |        }
  362|       |
  363|  51.0k|        let offset = if delta == T::Unsigned::MAX {
  364|      0|            arbitrary_int
  365|       |        } else {
  366|  51.0k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  367|       |        };
  368|       |
  369|       |        // Finally, we add `start` to our offset from `start` to get the result
  370|       |        // actual value within the range.
  371|  51.0k|        let result = start.wrapping_add(offset);
  372|  51.0k|
  373|  51.0k|        // And convert back to our maybe-signed representation.
  374|  51.0k|        let result = T::from_unsigned(result);
  375|  51.0k|        debug_assert!(*range.start() <= result);
  376|  51.0k|        debug_assert!(result <= *range.end());
  377|       |
  378|  51.0k|        Ok((result, bytes_consumed))
  379|  51.0k|    }
_RNvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  577|   373k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  578|   373k|        let n = std::cmp::min(buffer.len(), self.data.len());
  579|   373k|        buffer[..n].copy_from_slice(&self.data[..n]);
  580|   373k|        for byte in buffer[n..].iter_mut() {
  581|  60.8k|            *byte = 0;
  582|  60.8k|        }
  583|   373k|        self.data = &self.data[n..];
  584|   373k|        Ok(())
  585|   373k|    }
_RNvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  604|  70.2k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  605|  70.2k|        if self.data.len() < size {
  606|      0|            return Err(Error::NotEnoughData);
  607|  70.2k|        }
  608|  70.2k|
  609|  70.2k|        let (for_buf, rest) = self.data.split_at(size);
  610|  70.2k|        self.data = rest;
  611|  70.2k|        Ok(for_buf)
  612|  70.2k|    }
_RNvMNtCsf4HWeWhA5iz_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  635|  70.2k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  636|  70.2k|        self.data.get(..size)
  637|  70.2k|    }
_RNvXs2_NtCsf4HWeWhA5iz_9arbitrary12unstructuredhNtB5_3Int7from_u8:
  877|  21.4k|                fn from_u8(b: u8) -> Self {
  878|  21.4k|                    b as Self
  879|  21.4k|                }
_RNvXs2_NtCsf4HWeWhA5iz_9arbitrary12unstructuredhNtB5_3Int10from_usize:
  881|  21.4k|                fn from_usize(u: usize) -> Self {
  882|  21.4k|                    u as Self
  883|  21.4k|                }
_RNvXs2_NtCsf4HWeWhA5iz_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  885|  21.3k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  886|  21.3k|                    <$ty>::checked_add(self, rhs)
  887|  21.3k|                }
_RNvXs2_NtCsf4HWeWhA5iz_9arbitrary12unstructuredhNtB5_3Int12wrapping_add:
  889|  21.4k|                fn wrapping_add(self, rhs: Self) -> Self {
  890|  21.4k|                    <$ty>::wrapping_add(self, rhs)
  891|  21.4k|                }
_RNvXs2_NtCsf4HWeWhA5iz_9arbitrary12unstructuredhNtB5_3Int12wrapping_sub:
  893|  21.4k|                fn wrapping_sub(self, rhs: Self) -> Self {
  894|  21.4k|                    <$ty>::wrapping_sub(self, rhs)
  895|  21.4k|                }
_RNvXs2_NtCsf4HWeWhA5iz_9arbitrary12unstructuredhNtB5_3Int11to_unsigned:
  897|  42.8k|                fn to_unsigned(self) -> Self::Unsigned {
  898|  42.8k|                    self as $unsigned_ty
  899|  42.8k|                }
_RNvXs2_NtCsf4HWeWhA5iz_9arbitrary12unstructuredhNtB5_3Int13from_unsigned:
  901|  21.4k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  902|  21.4k|                    unsigned as Self
  903|  21.4k|                }
_RNvXs3_NtCsf4HWeWhA5iz_9arbitrary12unstructuredtNtB5_3Int7from_u8:
  877|   102k|                fn from_u8(b: u8) -> Self {
  878|   102k|                    b as Self
  879|   102k|                }
_RNvXs3_NtCsf4HWeWhA5iz_9arbitrary12unstructuredtNtB5_3Int10from_usize:
  881|   102k|                fn from_usize(u: usize) -> Self {
  882|   102k|                    u as Self
  883|   102k|                }
_RNvXs3_NtCsf4HWeWhA5iz_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  885|  51.0k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  886|  51.0k|                    <$ty>::checked_add(self, rhs)
  887|  51.0k|                }
_RNvXs3_NtCsf4HWeWhA5iz_9arbitrary12unstructuredtNtB5_3Int12wrapping_add:
  889|  51.0k|                fn wrapping_add(self, rhs: Self) -> Self {
  890|  51.0k|                    <$ty>::wrapping_add(self, rhs)
  891|  51.0k|                }
_RNvXs3_NtCsf4HWeWhA5iz_9arbitrary12unstructuredtNtB5_3Int12wrapping_sub:
  893|  51.0k|                fn wrapping_sub(self, rhs: Self) -> Self {
  894|  51.0k|                    <$ty>::wrapping_sub(self, rhs)
  895|  51.0k|                }
_RNvXs3_NtCsf4HWeWhA5iz_9arbitrary12unstructuredtNtB5_3Int11to_unsigned:
  897|   102k|                fn to_unsigned(self) -> Self::Unsigned {
  898|   102k|                    self as $unsigned_ty
  899|   102k|                }
_RNvXs3_NtCsf4HWeWhA5iz_9arbitrary12unstructuredtNtB5_3Int13from_unsigned:
  901|  51.0k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  902|  51.0k|                    unsigned as Self
  903|  51.0k|                }
_RNvXs5_NtCsf4HWeWhA5iz_9arbitrary12unstructuredyNtB5_3Int7from_u8:
  877|  37.8k|                fn from_u8(b: u8) -> Self {
  878|  37.8k|                    b as Self
  879|  37.8k|                }
_RNvXs5_NtCsf4HWeWhA5iz_9arbitrary12unstructuredyNtB5_3Int10from_usize:
  881|  43.2k|                fn from_usize(u: usize) -> Self {
  882|  43.2k|                    u as Self
  883|  43.2k|                }
_RNvXs5_NtCsf4HWeWhA5iz_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  885|  5.41k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  886|  5.41k|                    <$ty>::checked_add(self, rhs)
  887|  5.41k|                }
_RNvXs5_NtCsf4HWeWhA5iz_9arbitrary12unstructuredyNtB5_3Int12wrapping_add:
  889|  5.41k|                fn wrapping_add(self, rhs: Self) -> Self {
  890|  5.41k|                    <$ty>::wrapping_add(self, rhs)
  891|  5.41k|                }
_RNvXs5_NtCsf4HWeWhA5iz_9arbitrary12unstructuredyNtB5_3Int12wrapping_sub:
  893|  5.41k|                fn wrapping_sub(self, rhs: Self) -> Self {
  894|  5.41k|                    <$ty>::wrapping_sub(self, rhs)
  895|  5.41k|                }
_RNvXs5_NtCsf4HWeWhA5iz_9arbitrary12unstructuredyNtB5_3Int11to_unsigned:
  897|  10.8k|                fn to_unsigned(self) -> Self::Unsigned {
  898|  10.8k|                    self as $unsigned_ty
  899|  10.8k|                }
_RNvXs5_NtCsf4HWeWhA5iz_9arbitrary12unstructuredyNtB5_3Int13from_unsigned:
  901|  5.41k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  902|  5.41k|                    unsigned as Self
  903|  5.41k|                }

_RINvMs1_CsjFHCDNIvBkv_4itoaNtB6_6Buffer6formatxECs4mj07ouNzCz_10serde_json:
   98|  1.40k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   99|  1.40k|        let string = i.write(unsafe {
  100|  1.40k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; i128::MAX_STR_LEN]
  101|  1.40k|                as *mut <I as private::Sealed>::Buffer)
  102|  1.40k|        });
  103|  1.40k|        if string.len() > I::MAX_STR_LEN {
  104|      0|            unsafe { hint::unreachable_unchecked() };
  105|  1.40k|        }
  106|  1.40k|        string
  107|  1.40k|    }
_RINvMs1_CsjFHCDNIvBkv_4itoaNtB6_6Buffer6formatyECs4mj07ouNzCz_10serde_json:
   98|  3.71k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   99|  3.71k|        let string = i.write(unsafe {
  100|  3.71k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; i128::MAX_STR_LEN]
  101|  3.71k|                as *mut <I as private::Sealed>::Buffer)
  102|  3.71k|        });
  103|  3.71k|        if string.len() > I::MAX_STR_LEN {
  104|      0|            unsafe { hint::unreachable_unchecked() };
  105|  3.71k|        }
  106|  3.71k|        string
  107|  3.71k|    }
_RNvMs1_CsjFHCDNIvBkv_4itoaNtB5_6Buffer3newCs4mj07ouNzCz_10serde_json:
   90|  5.11k|    pub fn new() -> Buffer {
   91|  5.11k|        let bytes = [MaybeUninit::<u8>::uninit(); i128::MAX_STR_LEN];
   92|  5.11k|        Buffer { bytes }
   93|  5.11k|    }
_RNvXsf_CsjFHCDNIvBkv_4itoaxNtNtB5_7private6Sealed5writeCs4mj07ouNzCz_10serde_json:
  150|  1.40k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  151|  1.40k|                let is_nonnegative = self >= 0;
  152|  1.40k|                let mut n = if is_nonnegative {
  153|      0|                    self as $large_unsigned
  154|       |                } else {
  155|       |                    // Convert negative number to positive by summing 1 to its two's complement.
  156|  1.40k|                    (!(self as $large_unsigned)).wrapping_add(1)
  157|       |                };
  158|  1.40k|                let mut curr = buf.len();
  159|  1.40k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  160|  1.40k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  161|       |
  162|       |                // Render 4 digits at a time.
  163|  5.61k|                while n >= 10000 {
  164|  4.20k|                    let rem = n % 10000;
  165|  4.20k|                    n /= 10000;
  166|  4.20k|
  167|  4.20k|                    let d1 = ((rem / 100) << 1) as usize;
  168|  4.20k|                    let d2 = ((rem % 100) << 1) as usize;
  169|  4.20k|                    curr -= 4;
  170|  4.20k|                    unsafe {
  171|  4.20k|                        ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
  172|  4.20k|                        ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);
  173|  4.20k|                    }
  174|       |                }
  175|       |
  176|       |                // Render 2 more digits, if >2 digits.
  177|  1.40k|                if n >= 100 {
  178|    949|                    let d1 = ((n % 100) << 1) as usize;
  179|    949|                    n /= 100;
  180|    949|                    curr -= 2;
  181|    949|                    unsafe {
  182|    949|                        ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
  183|    949|                    }
  184|    453|                }
  185|       |
  186|       |                // Render last 1 or 2 digits.
  187|  1.40k|                if n < 10 {
  188|  1.21k|                    curr -= 1;
  189|  1.21k|                    unsafe {
  190|  1.21k|                        *buf_ptr.add(curr) = (n as u8) + b'0';
  191|  1.21k|                    }
  192|       |                } else {
  193|    190|                    let d1 = (n << 1) as usize;
  194|    190|                    curr -= 2;
  195|    190|                    unsafe {
  196|    190|                        ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
  197|    190|                    }
  198|       |                }
  199|       |
  200|  1.40k|                if !is_nonnegative {
  201|  1.40k|                    curr -= 1;
  202|  1.40k|                    unsafe {
  203|  1.40k|                        *buf_ptr.add(curr) = b'-';
  204|  1.40k|                    }
  205|      0|                }
  206|       |
  207|  1.40k|                let len = buf.len() - curr;
  208|  1.40k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.add(curr), len) };
  209|  1.40k|                unsafe { str::from_utf8_unchecked(bytes) }
  210|  1.40k|            }
_RNvXsh_CsjFHCDNIvBkv_4itoayNtNtB5_7private6Sealed5writeCs4mj07ouNzCz_10serde_json:
  150|  3.71k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  151|  3.71k|                let is_nonnegative = self >= 0;
  152|  3.71k|                let mut n = if is_nonnegative {
  153|  3.71k|                    self as $large_unsigned
  154|       |                } else {
  155|       |                    // Convert negative number to positive by summing 1 to its two's complement.
  156|      0|                    (!(self as $large_unsigned)).wrapping_add(1)
  157|       |                };
  158|  3.71k|                let mut curr = buf.len();
  159|  3.71k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  160|  3.71k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  161|       |
  162|       |                // Render 4 digits at a time.
  163|  14.4k|                while n >= 10000 {
  164|  10.7k|                    let rem = n % 10000;
  165|  10.7k|                    n /= 10000;
  166|  10.7k|
  167|  10.7k|                    let d1 = ((rem / 100) << 1) as usize;
  168|  10.7k|                    let d2 = ((rem % 100) << 1) as usize;
  169|  10.7k|                    curr -= 4;
  170|  10.7k|                    unsafe {
  171|  10.7k|                        ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
  172|  10.7k|                        ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);
  173|  10.7k|                    }
  174|       |                }
  175|       |
  176|       |                // Render 2 more digits, if >2 digits.
  177|  3.71k|                if n >= 100 {
  178|  2.54k|                    let d1 = ((n % 100) << 1) as usize;
  179|  2.54k|                    n /= 100;
  180|  2.54k|                    curr -= 2;
  181|  2.54k|                    unsafe {
  182|  2.54k|                        ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
  183|  2.54k|                    }
  184|  1.17k|                }
  185|       |
  186|       |                // Render last 1 or 2 digits.
  187|  3.71k|                if n < 10 {
  188|  3.01k|                    curr -= 1;
  189|  3.01k|                    unsafe {
  190|  3.01k|                        *buf_ptr.add(curr) = (n as u8) + b'0';
  191|  3.01k|                    }
  192|       |                } else {
  193|    702|                    let d1 = (n << 1) as usize;
  194|    702|                    curr -= 2;
  195|    702|                    unsafe {
  196|    702|                        ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);
  197|    702|                    }
  198|       |                }
  199|       |
  200|  3.71k|                if !is_nonnegative {
  201|      0|                    curr -= 1;
  202|      0|                    unsafe {
  203|      0|                        *buf_ptr.add(curr) = b'-';
  204|      0|                    }
  205|  3.71k|                }
  206|       |
  207|  3.71k|                let len = buf.len() - curr;
  208|  3.71k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.add(curr), len) };
  209|  3.71k|                unsafe { str::from_utf8_unchecked(bytes) }
  210|  3.71k|            }

LLVMFuzzerInitialize:
  316|      2|            pub extern "C" fn LLVMFuzzerInitialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
  317|      2|                $crate::initialize(_argc, _argv);
  318|      2|
  319|      2|                // Supplied init code
  320|      2|                $init;
  321|      2|                0
  322|      2|            }
rust_fuzzer_test_input:
  325|  2.65k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  326|       |                use $crate::arbitrary::{Arbitrary, Unstructured};
  327|       |
  328|       |                // Early exit if we don't have enough bytes for the `Arbitrary`
  329|       |                // implementation. This helps the fuzzer avoid exploring all the
  330|       |                // different not-enough-input-bytes paths inside the `Arbitrary`
  331|       |                // implementation. Additionally, it exits faster, letting the fuzzer
  332|       |                // get to longer inputs that actually lead to interesting executions
  333|       |                // quicker.
  334|  2.65k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  335|      0|                    return -1;
  336|  2.65k|                }
  337|  2.65k|
  338|  2.65k|                let mut u = Unstructured::new(bytes);
  339|  2.65k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  340|       |
  341|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  342|       |                // formatting of the input to that file. This is only intended for
  343|       |                // `cargo fuzz`'s use!
  344|       |
  345|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  346|  2.65k|                if let Some(path) = $crate::rust_libfuzzer_debug_path() {
  347|       |                    use std::io::Write;
  348|      0|                    let mut file = std::fs::File::create(path)
  349|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  350|      0|                    (match data {
  351|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  352|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  353|       |                    })
  354|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  355|      0|                    return -1;
  356|  2.65k|                }
  357|  2.65k|
  358|  2.65k|                let data = match data {
  359|  2.65k|                    Ok(d) => d,
  360|      0|                    Err(_) => return -1,
  361|       |                };
  362|       |
  363|  2.65k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  364|  2.65k|                result.to_libfuzzer_code()
  365|       |            }
_RNvNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons_1__19___libfuzzer_sys_run:
  368|  2.65k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  369|       |                $body
  370|       |            }
_RNvMs_Cs4A0D7c7M2j1_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  2.65k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.65k|        match self {
   42|  2.61k|            Corpus::Keep => 0,
   43|     41|            Corpus::Reject => -1,
   44|       |        }
   45|  2.65k|    }
LLVMFuzzerTestOneInput:
   59|  2.65k|pub unsafe fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   60|  2.65k|    let test_input = ::std::panic::catch_unwind(|| {
   61|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   62|       |        rust_fuzzer_test_input(data_slice)
   63|  2.65k|    });
   64|  2.65k|
   65|  2.65k|    match test_input {
   66|  2.65k|        Ok(i) => i,
   67|       |        Err(_) => {
   68|       |            // hopefully the custom panic hook will be called before and abort the
   69|       |            // process before the stack frames are unwinded.
   70|      0|            ::std::process::abort();
   71|       |        }
   72|       |    }
   73|  2.65k|}
_RNCNvCs4A0D7c7M2j1_13libfuzzer_sys15test_input_wrap0B3_:
   60|  2.65k|    let test_input = ::std::panic::catch_unwind(|| {
   61|  2.65k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   62|  2.65k|        rust_fuzzer_test_input(data_slice)
   63|  2.65k|    });
_RNvCs4A0D7c7M2j1_13libfuzzer_sys25rust_libfuzzer_debug_path:
   76|  2.65k|pub fn rust_libfuzzer_debug_path() -> &'static Option<String> {
   77|       |    static RUST_LIBFUZZER_DEBUG_PATH: OnceLock<Option<String>> = OnceLock::new();
   78|  2.65k|    RUST_LIBFUZZER_DEBUG_PATH.get_or_init(|| std::env::var("RUST_LIBFUZZER_DEBUG_PATH").ok())
   79|  2.65k|}
_RNCNvCs4A0D7c7M2j1_13libfuzzer_sys25rust_libfuzzer_debug_path0B3_:
   78|      1|    RUST_LIBFUZZER_DEBUG_PATH.get_or_init(|| std::env::var("RUST_LIBFUZZER_DEBUG_PATH").ok())
_RNvCs4A0D7c7M2j1_13libfuzzer_sys10initialize:
   82|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   83|      2|    // Registers a panic hook that aborts the process before unwinding.
   84|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   85|      2|    // able to analyse the process stack frames to tell different bugs appart.
   86|      2|    //
   87|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   88|      2|    // impossible to build code using compiler plugins with this flag.
   89|      2|    // We will be able to remove this code when
   90|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   91|      2|    let default_hook = std::panic::take_hook();
   92|      2|    std::panic::set_hook(Box::new(move |panic_info| {
   93|       |        default_hook(panic_info);
   94|       |        std::process::abort();
   95|      2|    }));
   96|      2|    0
   97|      2|}

_RNvXs_CsfR1YvRVYLn_3logNtB4_5LevelINtNtCshZc3FwCJ069_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  506|  5.23k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  507|  5.23k|        Some((*self as usize).cmp(&(*other as usize)))
  508|  5.23k|    }
_RNvCsfR1YvRVYLn_3log9max_level:
 1391|  2.61k|pub fn max_level() -> LevelFilter {
 1392|  2.61k|    // Since `LevelFilter` is `repr(usize)`,
 1393|  2.61k|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1394|  2.61k|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1395|  2.61k|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1396|  2.61k|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1397|  2.61k|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1398|  2.61k|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1399|  2.61k|}

_RINvMNtCs8FOv5SRP5Y8_3ryu6bufferNtB3_6Buffer13format_finitedECs4mj07ouNzCz_10serde_json:
   72|  6.36k|    pub fn format_finite<F: Float>(&mut self, f: F) -> &str {
   73|  6.36k|        unsafe {
   74|  6.36k|            let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);
   75|  6.36k|            debug_assert!(n <= self.bytes.len());
   76|  6.36k|            let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);
   77|  6.36k|            str::from_utf8_unchecked(slice)
   78|  6.36k|        }
   79|  6.36k|    }
_RNvMNtCs8FOv5SRP5Y8_3ryu6bufferNtB2_6Buffer3newCs4mj07ouNzCz_10serde_json:
   29|  6.36k|    pub fn new() -> Self {
   30|  6.36k|        let bytes = [MaybeUninit::<u8>::uninit(); 24];
   31|  6.36k|        Buffer { bytes }
   32|  6.36k|    }
_RNvXs5_NtCs8FOv5SRP5Y8_3ryu6bufferdNtB5_6Sealed19write_to_ryu_bufferCs4mj07ouNzCz_10serde_json:
  168|  6.36k|    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {
  169|  6.36k|        raw::format64(self, result)
  170|  6.36k|    }

_RNvNtCs8FOv5SRP5Y8_3ryu6common8pow5bits:
   64|  6.15k|pub fn pow5bits(e: i32) -> i32 /* or u32 -> u32 */ {
   65|  6.15k|    // This approximation works up to the point that the multiplication
   66|  6.15k|    // overflows at e = 3529. If the multiplication were done in 64 bits, it
   67|  6.15k|    // would fail at 5^4004 which is just greater than 2^9297.
   68|  6.15k|    debug_assert!(e >= 0);
   69|  6.15k|    debug_assert!(e <= 3528);
   70|  6.15k|    (((e as u32 * 1217359) >> 19) + 1) as i32
   71|  6.15k|}
_RNvNtCs8FOv5SRP5Y8_3ryu6common10log10_pow2:
   81|  1.93k|pub fn log10_pow2(e: i32) -> u32 /* or u32 -> u32 */ {
   82|  1.93k|    // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
   83|  1.93k|    debug_assert!(e >= 0);
   84|  1.93k|    debug_assert!(e <= 1650);
   85|  1.93k|    (e as u32 * 78913) >> 18
   86|  1.93k|}
_RNvNtCs8FOv5SRP5Y8_3ryu6common10log10_pow5:
   90|  4.22k|pub fn log10_pow5(e: i32) -> u32 /* or u32 -> u32 */ {
   91|  4.22k|    // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
   92|  4.22k|    debug_assert!(e >= 0);
   93|  4.22k|    debug_assert!(e <= 2620);
   94|  4.22k|    (e as u32 * 732923) >> 20
   95|  4.22k|}

_RNvNtCs8FOv5SRP5Y8_3ryu3d2s16decimal_length17:
   38|  6.15k|pub fn decimal_length17(v: u64) -> u32 {
   39|  6.15k|    // This is slightly faster than a loop.
   40|  6.15k|    // The average output length is 16.38 digits, so we check high-to-low.
   41|  6.15k|    // Function precondition: v is not an 18, 19, or 20-digit number.
   42|  6.15k|    // (17 digits are sufficient for round-tripping.)
   43|  6.15k|    debug_assert!(v < 100000000000000000);
   44|       |
   45|  6.15k|    if v >= 10000000000000000 {
   46|  2.02k|        17
   47|  4.13k|    } else if v >= 1000000000000000 {
   48|  1.73k|        16
   49|  2.40k|    } else if v >= 100000000000000 {
   50|    454|        15
   51|  1.94k|    } else if v >= 10000000000000 {
   52|    309|        14
   53|  1.63k|    } else if v >= 1000000000000 {
   54|    273|        13
   55|  1.36k|    } else if v >= 100000000000 {
   56|     75|        12
   57|  1.28k|    } else if v >= 10000000000 {
   58|    536|        11
   59|    753|    } else if v >= 1000000000 {
   60|     85|        10
   61|    668|    } else if v >= 100000000 {
   62|     74|        9
   63|    594|    } else if v >= 10000000 {
   64|    108|        8
   65|    486|    } else if v >= 1000000 {
   66|     77|        7
   67|    409|    } else if v >= 100000 {
   68|     75|        6
   69|    334|    } else if v >= 10000 {
   70|     70|        5
   71|    264|    } else if v >= 1000 {
   72|     78|        4
   73|    186|    } else if v >= 100 {
   74|    112|        3
   75|     74|    } else if v >= 10 {
   76|      3|        2
   77|       |    } else {
   78|     71|        1
   79|       |    }
   80|  6.15k|}
_RNvNtCs8FOv5SRP5Y8_3ryu3d2s3d2d:
   91|  6.15k|pub fn d2d(ieee_mantissa: u64, ieee_exponent: u32) -> FloatingDecimal64 {
   92|  6.15k|    let (e2, m2) = if ieee_exponent == 0 {
   93|  1.34k|        (
   94|  1.34k|            // We subtract 2 so that the bounds computation has 2 additional bits.
   95|  1.34k|            1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
   96|  1.34k|            ieee_mantissa,
   97|  1.34k|        )
   98|       |    } else {
   99|  4.81k|        (
  100|  4.81k|            ieee_exponent as i32 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
  101|  4.81k|            (1u64 << DOUBLE_MANTISSA_BITS) | ieee_mantissa,
  102|  4.81k|        )
  103|       |    };
  104|  6.15k|    let even = (m2 & 1) == 0;
  105|  6.15k|    let accept_bounds = even;
  106|  6.15k|
  107|  6.15k|    // Step 2: Determine the interval of valid decimal representations.
  108|  6.15k|    let mv = 4 * m2;
  109|       |    // Implicit bool -> int conversion. True is 1, false is 0.
  110|  6.15k|    let mm_shift = (ieee_mantissa != 0 || ieee_exponent <= 1) as u32;
  111|       |    // We would compute mp and mm like this:
  112|       |    // uint64_t mp = 4 * m2 + 2;
  113|       |    // uint64_t mm = mv - 1 - mm_shift;
  114|       |
  115|       |    // Step 3: Convert to a decimal power base using 128-bit arithmetic.
  116|       |    let mut vr: u64;
  117|       |    let mut vp: u64;
  118|       |    let mut vm: u64;
  119|  6.15k|    let mut vp_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  120|  6.15k|    let mut vm_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  121|  6.15k|    let e10: i32;
  122|  6.15k|    let mut vm_is_trailing_zeros = false;
  123|  6.15k|    let mut vr_is_trailing_zeros = false;
  124|  6.15k|    if e2 >= 0 {
  125|       |        // I tried special-casing q == 0, but there was no effect on performance.
  126|       |        // This expression is slightly faster than max(0, log10_pow2(e2) - 1).
  127|  1.93k|        let q = log10_pow2(e2) - (e2 > 3) as u32;
  128|  1.93k|        e10 = q as i32;
  129|  1.93k|        let k = DOUBLE_POW5_INV_BITCOUNT + pow5bits(q as i32) - 1;
  130|  1.93k|        let i = -e2 + q as i32 + k;
  131|  1.93k|        vr = unsafe {
  132|  1.93k|            mul_shift_all_64(
  133|  1.93k|                m2,
  134|  1.93k|                #[cfg(feature = "small")]
  135|  1.93k|                &compute_inv_pow5(q),
  136|  1.93k|                #[cfg(not(feature = "small"))]
  137|  1.93k|                {
  138|  1.93k|                    debug_assert!(q < DOUBLE_POW5_INV_SPLIT.len() as u32);
  139|  1.93k|                    DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize)
  140|  1.93k|                },
  141|  1.93k|                i as u32,
  142|  1.93k|                vp_uninit.as_mut_ptr(),
  143|  1.93k|                vm_uninit.as_mut_ptr(),
  144|  1.93k|                mm_shift,
  145|  1.93k|            )
  146|  1.93k|        };
  147|  1.93k|        vp = unsafe { vp_uninit.assume_init() };
  148|  1.93k|        vm = unsafe { vm_uninit.assume_init() };
  149|  1.93k|        if q <= 21 {
  150|       |            // This should use q <= 22, but I think 21 is also safe. Smaller values
  151|       |            // may still be safe, but it's more difficult to reason about them.
  152|       |            // Only one of mp, mv, and mm can be a multiple of 5, if any.
  153|  1.01k|            let mv_mod5 = (mv as u32).wrapping_sub(5u32.wrapping_mul(div5(mv) as u32));
  154|  1.01k|            if mv_mod5 == 0 {
  155|    151|                vr_is_trailing_zeros = multiple_of_power_of_5(mv, q);
  156|    863|            } else if accept_bounds {
  157|    502|                // Same as min(e2 + (~mm & 1), pow5_factor(mm)) >= q
  158|    502|                // <=> e2 + (~mm & 1) >= q && pow5_factor(mm) >= q
  159|    502|                // <=> true && pow5_factor(mm) >= q, since e2 >= q.
  160|    502|                vm_is_trailing_zeros = multiple_of_power_of_5(mv - 1 - mm_shift as u64, q);
  161|    502|            } else {
  162|    361|                // Same as min(e2 + 1, pow5_factor(mp)) >= q.
  163|    361|                vp -= multiple_of_power_of_5(mv + 2, q) as u64;
  164|    361|            }
  165|    923|        }
  166|       |    } else {
  167|       |        // This expression is slightly faster than max(0, log10_pow5(-e2) - 1).
  168|  4.22k|        let q = log10_pow5(-e2) - (-e2 > 1) as u32;
  169|  4.22k|        e10 = q as i32 + e2;
  170|  4.22k|        let i = -e2 - q as i32;
  171|  4.22k|        let k = pow5bits(i) - DOUBLE_POW5_BITCOUNT;
  172|  4.22k|        let j = q as i32 - k;
  173|  4.22k|        vr = unsafe {
  174|  4.22k|            mul_shift_all_64(
  175|  4.22k|                m2,
  176|  4.22k|                #[cfg(feature = "small")]
  177|  4.22k|                &compute_pow5(i as u32),
  178|  4.22k|                #[cfg(not(feature = "small"))]
  179|  4.22k|                {
  180|  4.22k|                    debug_assert!(i < DOUBLE_POW5_SPLIT.len() as i32);
  181|  4.22k|                    DOUBLE_POW5_SPLIT.get_unchecked(i as usize)
  182|  4.22k|                },
  183|  4.22k|                j as u32,
  184|  4.22k|                vp_uninit.as_mut_ptr(),
  185|  4.22k|                vm_uninit.as_mut_ptr(),
  186|  4.22k|                mm_shift,
  187|  4.22k|            )
  188|  4.22k|        };
  189|  4.22k|        vp = unsafe { vp_uninit.assume_init() };
  190|  4.22k|        vm = unsafe { vm_uninit.assume_init() };
  191|  4.22k|        if q <= 1 {
  192|       |            // {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q trailing 0 bits.
  193|       |            // mv = 4 * m2, so it always has at least two trailing 0 bits.
  194|    604|            vr_is_trailing_zeros = true;
  195|    604|            if accept_bounds {
  196|    327|                // mm = mv - 1 - mm_shift, so it has 1 trailing 0 bit iff mm_shift == 1.
  197|    327|                vm_is_trailing_zeros = mm_shift == 1;
  198|    327|            } else {
  199|    277|                // mp = mv + 2, so it always has at least one trailing 0 bit.
  200|    277|                vp -= 1;
  201|    277|            }
  202|  3.61k|        } else if q < 63 {
  203|  1.02k|            // TODO(ulfjack): Use a tighter bound here.
  204|  1.02k|            // We want to know if the full product has at least q trailing zeros.
  205|  1.02k|            // We need to compute min(p2(mv), p5(mv) - e2) >= q
  206|  1.02k|            // <=> p2(mv) >= q && p5(mv) - e2 >= q
  207|  1.02k|            // <=> p2(mv) >= q (because -e2 >= q)
  208|  1.02k|            vr_is_trailing_zeros = multiple_of_power_of_2(mv, q);
  209|  2.59k|        }
  210|       |    }
  211|       |
  212|       |    // Step 4: Find the shortest decimal representation in the interval of valid representations.
  213|  6.15k|    let mut removed = 0i32;
  214|  6.15k|    let mut last_removed_digit = 0u8;
  215|       |    // On average, we remove ~2 digits.
  216|  6.15k|    let output = if vm_is_trailing_zeros || vr_is_trailing_zeros {
  217|       |        // General case, which happens rarely (~0.7%).
  218|       |        loop {
  219|  4.46k|            let vp_div10 = div10(vp);
  220|  4.46k|            let vm_div10 = div10(vm);
  221|  4.46k|            if vp_div10 <= vm_div10 {
  222|  1.23k|                break;
  223|  3.22k|            }
  224|  3.22k|            let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  225|  3.22k|            let vr_div10 = div10(vr);
  226|  3.22k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  227|  3.22k|            vm_is_trailing_zeros &= vm_mod10 == 0;
  228|  3.22k|            vr_is_trailing_zeros &= last_removed_digit == 0;
  229|  3.22k|            last_removed_digit = vr_mod10 as u8;
  230|  3.22k|            vr = vr_div10;
  231|  3.22k|            vp = vp_div10;
  232|  3.22k|            vm = vm_div10;
  233|  3.22k|            removed += 1;
  234|       |        }
  235|  1.23k|        if vm_is_trailing_zeros {
  236|       |            loop {
  237|    613|                let vm_div10 = div10(vm);
  238|    613|                let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  239|    613|                if vm_mod10 != 0 {
  240|    349|                    break;
  241|    264|                }
  242|    264|                let vp_div10 = div10(vp);
  243|    264|                let vr_div10 = div10(vr);
  244|    264|                let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  245|    264|                vr_is_trailing_zeros &= last_removed_digit == 0;
  246|    264|                last_removed_digit = vr_mod10 as u8;
  247|    264|                vr = vr_div10;
  248|    264|                vp = vp_div10;
  249|    264|                vm = vm_div10;
  250|    264|                removed += 1;
  251|       |            }
  252|    883|        }
  253|  1.23k|        if vr_is_trailing_zeros && last_removed_digit == 5 && vr % 2 == 0 {
  254|      1|            // Round even if the exact number is .....50..0.
  255|      1|            last_removed_digit = 4;
  256|  1.23k|        }
  257|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  258|  1.23k|        vr + ((vr == vm && (!accept_bounds || !vm_is_trailing_zeros)) || last_removed_digit >= 5)
  259|       |            as u64
  260|       |    } else {
  261|       |        // Specialized for the common case (~99.3%). Percentages below are relative to this.
  262|  4.92k|        let mut round_up = false;
  263|  4.92k|        let vp_div100 = div100(vp);
  264|  4.92k|        let vm_div100 = div100(vm);
  265|  4.92k|        // Optimization: remove two digits at a time (~86.2%).
  266|  4.92k|        if vp_div100 > vm_div100 {
  267|  3.24k|            let vr_div100 = div100(vr);
  268|  3.24k|            let vr_mod100 = (vr as u32).wrapping_sub(100u32.wrapping_mul(vr_div100 as u32));
  269|  3.24k|            round_up = vr_mod100 >= 50;
  270|  3.24k|            vr = vr_div100;
  271|  3.24k|            vp = vp_div100;
  272|  3.24k|            vm = vm_div100;
  273|  3.24k|            removed += 2;
  274|  3.24k|        }
  275|       |        // Loop iterations below (approximately), without optimization above:
  276|       |        // 0: 0.03%, 1: 13.8%, 2: 70.6%, 3: 14.0%, 4: 1.40%, 5: 0.14%, 6+: 0.02%
  277|       |        // Loop iterations below (approximately), with optimization above:
  278|       |        // 0: 70.6%, 1: 27.8%, 2: 1.40%, 3: 0.14%, 4+: 0.02%
  279|       |        loop {
  280|  8.37k|            let vp_div10 = div10(vp);
  281|  8.37k|            let vm_div10 = div10(vm);
  282|  8.37k|            if vp_div10 <= vm_div10 {
  283|  4.92k|                break;
  284|  3.45k|            }
  285|  3.45k|            let vr_div10 = div10(vr);
  286|  3.45k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  287|  3.45k|            round_up = vr_mod10 >= 5;
  288|  3.45k|            vr = vr_div10;
  289|  3.45k|            vp = vp_div10;
  290|  3.45k|            vm = vm_div10;
  291|  3.45k|            removed += 1;
  292|       |        }
  293|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  294|  4.92k|        vr + (vr == vm || round_up) as u64
  295|       |    };
  296|  6.15k|    let exp = e10 + removed;
  297|  6.15k|
  298|  6.15k|    FloatingDecimal64 {
  299|  6.15k|        exponent: exp,
  300|  6.15k|        mantissa: output,
  301|  6.15k|    }
  302|  6.15k|}

_RNvNtCs8FOv5SRP5Y8_3ryu14d2s_intrinsics4div5:
   24|  1.01k|pub fn div5(x: u64) -> u64 {
   25|  1.01k|    x / 5
   26|  1.01k|}
_RNvNtCs8FOv5SRP5Y8_3ryu14d2s_intrinsics5div10:
   29|  33.5k|pub fn div10(x: u64) -> u64 {
   30|  33.5k|    x / 10
   31|  33.5k|}
_RNvNtCs8FOv5SRP5Y8_3ryu14d2s_intrinsics6div100:
   34|  13.0k|pub fn div100(x: u64) -> u64 {
   35|  13.0k|    x / 100
   36|  13.0k|}
_RNvNtCs8FOv5SRP5Y8_3ryu14d2s_intrinsics11pow5_factor:
   39|  1.01k|pub(crate) fn pow5_factor(mut value: u64) -> u32 {
   40|       |    const M_INV_5: u64 = 14757395258967641293; // 5 * m_inv_5 = 1 (mod 2^64)
   41|       |    const N_DIV_5: u64 = 3689348814741910323; // #{ n | n = 0 (mod 2^64) } = 2^64 / 5
   42|  1.01k|    let mut count = 0u32;
   43|       |    loop {
   44|  2.47k|        debug_assert!(value != 0);
   45|  2.47k|        value = value.wrapping_mul(M_INV_5);
   46|  2.47k|        if value > N_DIV_5 {
   47|  1.01k|            break;
   48|  1.46k|        }
   49|  1.46k|        count += 1;
   50|       |    }
   51|  1.01k|    count
   52|  1.01k|}
_RNvNtCs8FOv5SRP5Y8_3ryu14d2s_intrinsics22multiple_of_power_of_5:
   56|  1.01k|pub fn multiple_of_power_of_5(value: u64, p: u32) -> bool {
   57|  1.01k|    // I tried a case distinction on p, but there was no performance difference.
   58|  1.01k|    pow5_factor(value) >= p
   59|  1.01k|}
_RNvNtCs8FOv5SRP5Y8_3ryu14d2s_intrinsics22multiple_of_power_of_2:
   63|  1.02k|pub fn multiple_of_power_of_2(value: u64, p: u32) -> bool {
   64|  1.02k|    debug_assert!(value != 0);
   65|  1.02k|    debug_assert!(p < 64);
   66|       |    // __builtin_ctzll doesn't appear to be faster here.
   67|  1.02k|    (value & ((1u64 << p) - 1)) == 0
   68|  1.02k|}
_RNvNtCs8FOv5SRP5Y8_3ryu14d2s_intrinsics12mul_shift_64:
   71|  18.4k|pub fn mul_shift_64(m: u64, mul: &(u64, u64), j: u32) -> u64 {
   72|  18.4k|    let b0 = m as u128 * mul.0 as u128;
   73|  18.4k|    let b2 = m as u128 * mul.1 as u128;
   74|  18.4k|    (((b0 >> 64) + b2) >> (j - 64)) as u64
   75|  18.4k|}
_RNvNtCs8FOv5SRP5Y8_3ryu14d2s_intrinsics16mul_shift_all_64:
   78|  6.15k|pub unsafe fn mul_shift_all_64(
   79|  6.15k|    m: u64,
   80|  6.15k|    mul: &(u64, u64),
   81|  6.15k|    j: u32,
   82|  6.15k|    vp: *mut u64,
   83|  6.15k|    vm: *mut u64,
   84|  6.15k|    mm_shift: u32,
   85|  6.15k|) -> u64 {
   86|  6.15k|    ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));
   87|  6.15k|    ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));
   88|  6.15k|    mul_shift_64(4 * m, mul, j)
   89|  6.15k|}

_RNvNtNtCs8FOv5SRP5Y8_3ryu6pretty8exponent15write_exponent3:
    5|  4.91k|pub unsafe fn write_exponent3(mut k: isize, mut result: *mut u8) -> usize {
    6|  4.91k|    let sign = k < 0;
    7|  4.91k|    if sign {
    8|  2.80k|        *result = b'-';
    9|  2.80k|        result = result.offset(1);
   10|  2.80k|        k = -k;
   11|  2.80k|    }
   12|       |
   13|  4.91k|    debug_assert!(k < 1000);
   14|  4.91k|    if k >= 100 {
   15|  3.24k|        *result = b'0' + (k / 100) as u8;
   16|  3.24k|        k %= 100;
   17|  3.24k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   18|  3.24k|        ptr::copy_nonoverlapping(d, result.offset(1), 2);
   19|  3.24k|        sign as usize + 3
   20|  1.66k|    } else if k >= 10 {
   21|  1.47k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   22|  1.47k|        ptr::copy_nonoverlapping(d, result, 2);
   23|  1.47k|        sign as usize + 2
   24|       |    } else {
   25|    196|        *result = b'0' + k as u8;
   26|    196|        sign as usize + 1
   27|       |    }
   28|  4.91k|}

_RNvNtNtCs8FOv5SRP5Y8_3ryu6pretty8mantissa19write_mantissa_long:
    5|  6.08k|pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {
    6|  6.08k|    if (output >> 32) != 0 {
    7|  5.41k|        // One expensive 64-bit division.
    8|  5.41k|        let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;
    9|  5.41k|        output /= 100_000_000;
   10|  5.41k|
   11|  5.41k|        let c = output2 % 10_000;
   12|  5.41k|        output2 /= 10_000;
   13|  5.41k|        let d = output2 % 10_000;
   14|  5.41k|        let c0 = (c % 100) << 1;
   15|  5.41k|        let c1 = (c / 100) << 1;
   16|  5.41k|        let d0 = (d % 100) << 1;
   17|  5.41k|        let d1 = (d / 100) << 1;
   18|  5.41k|        ptr::copy_nonoverlapping(
   19|  5.41k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   20|  5.41k|            result.offset(-2),
   21|  5.41k|            2,
   22|  5.41k|        );
   23|  5.41k|        ptr::copy_nonoverlapping(
   24|  5.41k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   25|  5.41k|            result.offset(-4),
   26|  5.41k|            2,
   27|  5.41k|        );
   28|  5.41k|        ptr::copy_nonoverlapping(
   29|  5.41k|            DIGIT_TABLE.as_ptr().offset(d0 as isize),
   30|  5.41k|            result.offset(-6),
   31|  5.41k|            2,
   32|  5.41k|        );
   33|  5.41k|        ptr::copy_nonoverlapping(
   34|  5.41k|            DIGIT_TABLE.as_ptr().offset(d1 as isize),
   35|  5.41k|            result.offset(-8),
   36|  5.41k|            2,
   37|  5.41k|        );
   38|  5.41k|        result = result.offset(-8);
   39|  5.41k|    }
   40|  6.08k|    write_mantissa(output as u32, result);
   41|  6.08k|}
_RNvNtNtCs8FOv5SRP5Y8_3ryu6pretty8mantissa14write_mantissa:
   44|  6.08k|pub unsafe fn write_mantissa(mut output: u32, mut result: *mut u8) {
   45|  13.5k|    while output >= 10_000 {
   46|  7.43k|        let c = output - 10_000 * (output / 10_000);
   47|  7.43k|        output /= 10_000;
   48|  7.43k|        let c0 = (c % 100) << 1;
   49|  7.43k|        let c1 = (c / 100) << 1;
   50|  7.43k|        ptr::copy_nonoverlapping(
   51|  7.43k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   52|  7.43k|            result.offset(-2),
   53|  7.43k|            2,
   54|  7.43k|        );
   55|  7.43k|        ptr::copy_nonoverlapping(
   56|  7.43k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   57|  7.43k|            result.offset(-4),
   58|  7.43k|            2,
   59|  7.43k|        );
   60|  7.43k|        result = result.offset(-4);
   61|  7.43k|    }
   62|  6.08k|    if output >= 100 {
   63|  3.17k|        let c = (output % 100) << 1;
   64|  3.17k|        output /= 100;
   65|  3.17k|        ptr::copy_nonoverlapping(
   66|  3.17k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   67|  3.17k|            result.offset(-2),
   68|  3.17k|            2,
   69|  3.17k|        );
   70|  3.17k|        result = result.offset(-2);
   71|  3.17k|    }
   72|  6.08k|    if output >= 10 {
   73|  2.46k|        let c = output << 1;
   74|  2.46k|        ptr::copy_nonoverlapping(
   75|  2.46k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   76|  2.46k|            result.offset(-2),
   77|  2.46k|            2,
   78|  2.46k|        );
   79|  3.62k|    } else {
   80|  3.62k|        *result.offset(-1) = b'0' + output as u8;
   81|  3.62k|    }
   82|  6.08k|}

_RNvNtCs8FOv5SRP5Y8_3ryu6pretty8format64:
   52|  6.36k|pub unsafe fn format64(f: f64, result: *mut u8) -> usize {
   53|  6.36k|    let bits = f.to_bits();
   54|  6.36k|    let sign = ((bits >> (DOUBLE_MANTISSA_BITS + DOUBLE_EXPONENT_BITS)) & 1) != 0;
   55|  6.36k|    let ieee_mantissa = bits & ((1u64 << DOUBLE_MANTISSA_BITS) - 1);
   56|  6.36k|    let ieee_exponent =
   57|  6.36k|        (bits >> DOUBLE_MANTISSA_BITS) as u32 & ((1u32 << DOUBLE_EXPONENT_BITS) - 1);
   58|  6.36k|
   59|  6.36k|    let mut index = 0isize;
   60|  6.36k|    if sign {
   61|  2.33k|        *result = b'-';
   62|  2.33k|        index += 1;
   63|  4.03k|    }
   64|       |
   65|  6.36k|    if ieee_exponent == 0 && ieee_mantissa == 0 {
   66|    205|        ptr::copy_nonoverlapping(b"0.0".as_ptr(), result.offset(index), 3);
   67|    205|        return sign as usize + 3;
   68|  6.15k|    }
   69|  6.15k|
   70|  6.15k|    let v = d2d(ieee_mantissa, ieee_exponent);
   71|  6.15k|
   72|  6.15k|    let length = d2s::decimal_length17(v.mantissa) as isize;
   73|  6.15k|    let k = v.exponent as isize;
   74|  6.15k|    let kk = length + k; // 10^(kk-1) <= v < 10^kk
   75|  6.15k|    debug_assert!(k >= -324);
   76|       |
   77|  6.15k|    if 0 <= k && kk <= 16 {
   78|       |        // 1234e7 -> 12340000000.0
   79|    568|        write_mantissa_long(v.mantissa, result.offset(index + length));
   80|    568|        for i in length..kk {
   81|    391|            *result.offset(index + i) = b'0';
   82|    391|        }
   83|    568|        *result.offset(index + kk) = b'.';
   84|    568|        *result.offset(index + kk + 1) = b'0';
   85|    568|        index as usize + kk as usize + 2
   86|  5.58k|    } else if 0 < kk && kk <= 16 {
   87|       |        // 1234e-2 -> 12.34
   88|    151|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
   89|    151|        ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);
   90|    151|        *result.offset(index + kk) = b'.';
   91|    151|        index as usize + length as usize + 1
   92|  5.43k|    } else if -5 < kk && kk <= 0 {
   93|       |        // 1234e-6 -> 0.001234
   94|    527|        *result.offset(index) = b'0';
   95|    527|        *result.offset(index + 1) = b'.';
   96|    527|        let offset = 2 - kk;
   97|    862|        for i in 2..offset {
   98|    862|            *result.offset(index + i) = b'0';
   99|    862|        }
  100|    527|        write_mantissa_long(v.mantissa, result.offset(index + length + offset));
  101|    527|        index as usize + length as usize + offset as usize
  102|  4.91k|    } else if length == 1 {
  103|       |        // 1e30
  104|     69|        *result.offset(index) = b'0' + v.mantissa as u8;
  105|     69|        *result.offset(index + 1) = b'e';
  106|     69|        index as usize + 2 + write_exponent3(kk - 1, result.offset(index + 2))
  107|       |    } else {
  108|       |        // 1234e30 -> 1.234e33
  109|  4.84k|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
  110|  4.84k|        *result.offset(index) = *result.offset(index + 1);
  111|  4.84k|        *result.offset(index + 1) = b'.';
  112|  4.84k|        *result.offset(index + length + 1) = b'e';
  113|  4.84k|        index as usize
  114|  4.84k|            + length as usize
  115|  4.84k|            + 2
  116|  4.84k|            + write_exponent3(kk - 1, result.offset(index + length + 2))
  117|       |    }
  118|  6.36k|}

_RINvXs1H_NtNtCs7amismJlL0J_5serde3ser5implsRNtNtCs4mj07ouNzCz_10serde_json5value5ValueNtB9_9Serialize9serializeQINtNtBK_3ser10SerializerQNtNvXs_BI_BG_NtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEEBK_:
  517|  42.3k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  518|  42.3k|            where
  519|  42.3k|                S: Serializer,
  520|  42.3k|            {
  521|  42.3k|                (**self).serialize(serializer)
  522|  42.3k|            }
_RINvXs_NtNtCs7amismJlL0J_5serde3ser5implsNtNtCs8f6x4lOZV33_5alloc6string6StringNtB7_9Serialize9serializeINtNtCs4mj07ouNzCz_10serde_json3ser16MapKeySerializerQNtNvXs_NtB1J_5valueNtB2D_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB1H_16CompactFormatterEEB1J_:
   54|  53.1k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   55|  53.1k|    where
   56|  53.1k|        S: Serializer,
   57|  53.1k|    {
   58|  53.1k|        serializer.serialize_str(self)
   59|  53.1k|    }
_RINvXs1o_NtNtCs7amismJlL0J_5serde3ser5implsINtNtCs8f6x4lOZV33_5alloc3vec3VecNtNtCs4mj07ouNzCz_10serde_json5value5ValueENtB9_9Serialize9serializeQINtNtB1g_3ser10SerializerQNtNvXs_B1e_B1c_NtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEEB1g_:
  200|  25.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  201|  25.9k|            where
  202|  25.9k|                S: Serializer,
  203|  25.9k|            {
  204|  25.9k|                serializer.collect_seq(self)
  205|  25.9k|            }

_RINvNtCs7amismJlL0J_5serde3ser17iterator_len_hintINtNtNtCshZc3FwCJ069_4core5slice4iter4IterNtNtCs4mj07ouNzCz_10serde_json5value5ValueEEB1v_:
 1945|  25.9k|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1946|  25.9k|where
 1947|  25.9k|    I: Iterator,
 1948|  25.9k|{
 1949|  25.9k|    match iter.size_hint() {
 1950|  25.9k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1951|      0|        _ => None,
 1952|       |    }
 1953|  25.9k|}
_RNCINvYQINtNtCs4mj07ouNzCz_10serde_json3ser10SerializerQNtNvXs_NtBb_5valueNtBZ_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer11collect_seqRINtNtCs8f6x4lOZV33_5alloc3vec3VecB1a_EE0Bb_:
 1288|  42.3k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYINtNtCs4mj07ouNzCz_10serde_json3ser8CompoundQNtNvXs_NtB8_5valueNtBT_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs7amismJlL0J_5serde3ser12SerializeMap15serialize_entryNtNtCs8f6x4lOZV33_5alloc6string6StringB14_EB8_:
 1810|  53.1k|    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>
 1811|  53.1k|    where
 1812|  53.1k|        K: ?Sized + Serialize,
 1813|  53.1k|        V: ?Sized + Serialize,
 1814|  53.1k|    {
 1815|  53.1k|        tri!(self.serialize_key(key));
 1816|  53.1k|        self.serialize_value(value)
 1817|  53.1k|    }
_RINvYQINtNtCs4mj07ouNzCz_10serde_json3ser10SerializerQNtNvXs_NtB9_5valueNtBX_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer11collect_seqRINtNtCs8f6x4lOZV33_5alloc3vec3VecB18_EEB9_:
 1281|  25.9k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1282|  25.9k|    where
 1283|  25.9k|        I: IntoIterator,
 1284|  25.9k|        <I as IntoIterator>::Item: Serialize,
 1285|  25.9k|    {
 1286|  25.9k|        let mut iter = iter.into_iter();
 1287|  25.9k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1288|  25.9k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1289|  25.9k|        serializer.end()
 1290|  25.9k|    }

_RINvXs9_NtCs4mj07ouNzCz_10serde_json3mapINtB6_3MapNtNtCs8f6x4lOZV33_5alloc6string6StringNtNtB8_5value5ValueEINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorTBM_B1o_EE9from_iterINtNtNtB1P_8adapters3map3MapINtNtNtNtCsjixu6NuYCfn_3std11collections4hash3map8IntoIterBM_NtNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB4B_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary8RawValueENCNvXB4v_B1o_INtNtB1R_7convert4FromB4t_E4froms_0EEB4B_:
  550|  23.1k|    fn from_iter<T>(iter: T) -> Self
  551|  23.1k|    where
  552|  23.1k|        T: IntoIterator<Item = (String, Value)>,
  553|  23.1k|    {
  554|  23.1k|        Map {
  555|  23.1k|            map: FromIterator::from_iter(iter),
  556|  23.1k|        }
  557|  23.1k|    }
_RNvMNtCs4mj07ouNzCz_10serde_json3mapINtB2_3MapNtNtCs8f6x4lOZV33_5alloc6string6StringNtNtB4_5value5ValueE3lenB4_:
  291|  23.1k|    pub fn len(&self) -> usize {
  292|  23.1k|        self.map.len()
  293|  23.1k|    }
_RNvXsg_NtCs4mj07ouNzCz_10serde_json3mapRINtB5_3MapNtNtCs8f6x4lOZV33_5alloc6string6StringNtNtB7_5value5ValueENtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB7_:
 1051|  23.1k|    fn into_iter(self) -> Self::IntoIter {
 1052|  23.1k|        Iter {
 1053|  23.1k|            iter: self.map.iter(),
 1054|  23.1k|        }
 1055|  23.1k|    }
_RNvXsl_NtCs4mj07ouNzCz_10serde_json3mapNtB5_4IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB7_:
  574|  76.2k|            fn next(&mut self) -> Option<Self::Item> {
  575|  76.2k|                self.iter.next()
  576|  76.2k|            }

_RNvMs1_NtCs4mj07ouNzCz_10serde_json6numberNtB5_6Number8from_f64:
  183|  6.68k|    pub fn from_f64(f: f64) -> Option<Number> {
  184|  6.68k|        if f.is_finite() {
  185|  6.36k|            let n = {
  186|  6.36k|                #[cfg(not(feature = "arbitrary_precision"))]
  187|  6.36k|                {
  188|  6.36k|                    N::Float(f)
  189|  6.36k|                }
  190|  6.36k|                #[cfg(feature = "arbitrary_precision")]
  191|  6.36k|                {
  192|  6.36k|                    ryu::Buffer::new().format_finite(f).to_owned()
  193|  6.36k|                }
  194|  6.36k|            };
  195|  6.36k|            Some(Number { n })
  196|       |        } else {
  197|    325|            None
  198|       |        }
  199|  6.68k|    }
_RINvXs4_NtCs4mj07ouNzCz_10serde_json6numberNtB6_6NumberNtNtCs7amismJlL0J_5serde3ser9Serialize9serializeQINtNtB8_3ser10SerializerQNtNvXs_NtB8_5valueNtB2a_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEEB8_:
  371|  11.4k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  372|  11.4k|    where
  373|  11.4k|        S: Serializer,
  374|  11.4k|    {
  375|  11.4k|        match self.n {
  376|  3.71k|            N::PosInt(u) => serializer.serialize_u64(u),
  377|  1.40k|            N::NegInt(i) => serializer.serialize_i64(i),
  378|  6.36k|            N::Float(f) => serializer.serialize_f64(f),
  379|       |        }
  380|  11.4k|    }
_RNvXsp_NtCs4mj07ouNzCz_10serde_json6numberNtB5_6NumberINtNtCshZc3FwCJ069_4core7convert4FromxE4from:
  765|  5.11k|                fn from(i: $ty) -> Self {
  766|  5.11k|                    let n = {
  767|       |                        #[cfg(not(feature = "arbitrary_precision"))]
  768|       |                        {
  769|  5.11k|                            if i < 0 {
  770|  1.40k|                                N::NegInt(i as i64)
  771|       |                            } else {
  772|  3.71k|                                N::PosInt(i as u64)
  773|       |                            }
  774|       |                        }
  775|       |                        #[cfg(feature = "arbitrary_precision")]
  776|       |                        {
  777|       |                            itoa::Buffer::new().format(i).to_owned()
  778|       |                        }
  779|       |                    };
  780|  5.11k|                    Number { n }
  781|  5.11k|                }

_RNvMNtCs4mj07ouNzCz_10serde_json3serINtB2_10SerializerQNtNvXs_NtB4_5valueNtBY_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterE3newB4_:
   28|  2.65k|    pub fn new(writer: W) -> Self {
   29|  2.65k|        Serializer::with_formatter(writer, CompactFormatter)
   30|  2.65k|    }
_RNvMs0_NtCs4mj07ouNzCz_10serde_json3serINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterE14with_formatterB7_:
   52|  2.65k|    pub fn with_formatter(writer: W, formatter: F) -> Self {
   53|  2.65k|        Serializer { writer, formatter }
   54|  2.65k|    }
_RNvXs1_NtCs4mj07ouNzCz_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer14serialize_boolB7_:
   80|  11.5k|    fn serialize_bool(self, value: bool) -> Result<()> {
   81|  11.5k|        self.formatter
   82|  11.5k|            .write_bool(&mut self.writer, value)
   83|  11.5k|            .map_err(Error::io)
   84|  11.5k|    }
_RNvXs1_NtCs4mj07ouNzCz_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer13serialize_i64B7_:
  108|  1.40k|    fn serialize_i64(self, value: i64) -> Result<()> {
  109|  1.40k|        self.formatter
  110|  1.40k|            .write_i64(&mut self.writer, value)
  111|  1.40k|            .map_err(Error::io)
  112|  1.40k|    }
_RNvXs1_NtCs4mj07ouNzCz_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer13serialize_u64B7_:
  142|  3.71k|    fn serialize_u64(self, value: u64) -> Result<()> {
  143|  3.71k|        self.formatter
  144|  3.71k|            .write_u64(&mut self.writer, value)
  145|  3.71k|            .map_err(Error::io)
  146|  3.71k|    }
_RNvXs1_NtCs4mj07ouNzCz_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer13serialize_f64B7_:
  169|  6.36k|    fn serialize_f64(self, value: f64) -> Result<()> {
  170|  6.36k|        match value.classify() {
  171|      0|            FpCategory::Nan | FpCategory::Infinite => self
  172|      0|                .formatter
  173|      0|                .write_null(&mut self.writer)
  174|      0|                .map_err(Error::io),
  175|  6.36k|            _ => self
  176|  6.36k|                .formatter
  177|  6.36k|                .write_f64(&mut self.writer, value)
  178|  6.36k|                .map_err(Error::io),
  179|       |        }
  180|  6.36k|    }
_RNvXs1_NtCs4mj07ouNzCz_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer13serialize_strB7_:
  190|  59.8k|    fn serialize_str(self, value: &str) -> Result<()> {
  191|  59.8k|        format_escaped_str(&mut self.writer, &mut self.formatter, value).map_err(Error::io)
  192|  59.8k|    }
_RNvXs1_NtCs4mj07ouNzCz_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer14serialize_unitB7_:
  202|  19.2k|    fn serialize_unit(self) -> Result<()> {
  203|  19.2k|        self.formatter
  204|  19.2k|            .write_null(&mut self.writer)
  205|  19.2k|            .map_err(Error::io)
  206|  19.2k|    }
_RNvXs1_NtCs4mj07ouNzCz_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer13serialize_seqB7_:
  284|  25.9k|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {
  285|  25.9k|        tri!(self
  286|  25.9k|            .formatter
  287|  25.9k|            .begin_array(&mut self.writer)
  288|  25.9k|            .map_err(Error::io));
  289|  25.9k|        if len == Some(0) {
  290|  2.12k|            tri!(self
  291|  2.12k|                .formatter
  292|  2.12k|                .end_array(&mut self.writer)
  293|  2.12k|                .map_err(Error::io));
  294|  2.12k|            Ok(Compound::Map {
  295|  2.12k|                ser: self,
  296|  2.12k|                state: State::Empty,
  297|  2.12k|            })
  298|       |        } else {
  299|  23.8k|            Ok(Compound::Map {
  300|  23.8k|                ser: self,
  301|  23.8k|                state: State::First,
  302|  23.8k|            })
  303|       |        }
  304|  25.9k|    }
_RNvXs1_NtCs4mj07ouNzCz_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer13serialize_mapB7_:
  349|  23.1k|    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {
  350|  23.1k|        tri!(self
  351|  23.1k|            .formatter
  352|  23.1k|            .begin_object(&mut self.writer)
  353|  23.1k|            .map_err(Error::io));
  354|  23.1k|        if len == Some(0) {
  355|  3.16k|            tri!(self
  356|  3.16k|                .formatter
  357|  3.16k|                .end_object(&mut self.writer)
  358|  3.16k|                .map_err(Error::io));
  359|  3.16k|            Ok(Compound::Map {
  360|  3.16k|                ser: self,
  361|  3.16k|                state: State::Empty,
  362|  3.16k|            })
  363|       |        } else {
  364|  20.0k|            Ok(Compound::Map {
  365|  20.0k|                ser: self,
  366|  20.0k|                state: State::First,
  367|  20.0k|            })
  368|       |        }
  369|  23.1k|    }
_RINvXs2_NtCs4mj07ouNzCz_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs7amismJlL0J_5serde3ser12SerializeSeq17serialize_elementRB1a_EB8_:
  491|  42.3k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  492|  42.3k|    where
  493|  42.3k|        T: ?Sized + Serialize,
  494|  42.3k|    {
  495|  42.3k|        match self {
  496|  42.3k|            Compound::Map { ser, state } => {
  497|  42.3k|                tri!(ser
  498|  42.3k|                    .formatter
  499|  42.3k|                    .begin_array_value(&mut ser.writer, *state == State::First)
  500|  42.3k|                    .map_err(Error::io));
  501|  42.3k|                *state = State::Rest;
  502|  42.3k|                tri!(value.serialize(&mut **ser));
  503|  42.3k|                ser.formatter
  504|  42.3k|                    .end_array_value(&mut ser.writer)
  505|  42.3k|                    .map_err(Error::io)
  506|       |            }
  507|       |            #[cfg(feature = "arbitrary_precision")]
  508|       |            Compound::Number { .. } => unreachable!(),
  509|       |            #[cfg(feature = "raw_value")]
  510|       |            Compound::RawValue { .. } => unreachable!(),
  511|       |        }
  512|  42.3k|    }
_RNvXs2_NtCs4mj07ouNzCz_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs7amismJlL0J_5serde3ser12SerializeSeq3endB7_:
  515|  25.9k|    fn end(self) -> Result<()> {
  516|  25.9k|        match self {
  517|  25.9k|            Compound::Map { ser, state } => match state {
  518|  2.12k|                State::Empty => Ok(()),
  519|  23.8k|                _ => ser.formatter.end_array(&mut ser.writer).map_err(Error::io),
  520|       |            },
  521|       |            #[cfg(feature = "arbitrary_precision")]
  522|       |            Compound::Number { .. } => unreachable!(),
  523|       |            #[cfg(feature = "raw_value")]
  524|       |            Compound::RawValue { .. } => unreachable!(),
  525|       |        }
  526|  25.9k|    }
_RINvXs6_NtCs4mj07ouNzCz_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs7amismJlL0J_5serde3ser12SerializeMap13serialize_keyNtNtCs8f6x4lOZV33_5alloc6string6StringEB8_:
  620|  53.1k|    fn serialize_key<T>(&mut self, key: &T) -> Result<()>
  621|  53.1k|    where
  622|  53.1k|        T: ?Sized + Serialize,
  623|  53.1k|    {
  624|  53.1k|        match self {
  625|  53.1k|            Compound::Map { ser, state } => {
  626|  53.1k|                tri!(ser
  627|  53.1k|                    .formatter
  628|  53.1k|                    .begin_object_key(&mut ser.writer, *state == State::First)
  629|  53.1k|                    .map_err(Error::io));
  630|  53.1k|                *state = State::Rest;
  631|       |
  632|  53.1k|                tri!(key.serialize(MapKeySerializer { ser: *ser }));
  633|       |
  634|  53.1k|                ser.formatter
  635|  53.1k|                    .end_object_key(&mut ser.writer)
  636|  53.1k|                    .map_err(Error::io)
  637|       |            }
  638|       |            #[cfg(feature = "arbitrary_precision")]
  639|       |            Compound::Number { .. } => unreachable!(),
  640|       |            #[cfg(feature = "raw_value")]
  641|       |            Compound::RawValue { .. } => unreachable!(),
  642|       |        }
  643|  53.1k|    }
_RINvXs6_NtCs4mj07ouNzCz_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs7amismJlL0J_5serde3ser12SerializeMap15serialize_valueB1a_EB8_:
  646|  53.1k|    fn serialize_value<T>(&mut self, value: &T) -> Result<()>
  647|  53.1k|    where
  648|  53.1k|        T: ?Sized + Serialize,
  649|  53.1k|    {
  650|  53.1k|        match self {
  651|  53.1k|            Compound::Map { ser, .. } => {
  652|  53.1k|                tri!(ser
  653|  53.1k|                    .formatter
  654|  53.1k|                    .begin_object_value(&mut ser.writer)
  655|  53.1k|                    .map_err(Error::io));
  656|  53.1k|                tri!(value.serialize(&mut **ser));
  657|  53.1k|                ser.formatter
  658|  53.1k|                    .end_object_value(&mut ser.writer)
  659|  53.1k|                    .map_err(Error::io)
  660|       |            }
  661|       |            #[cfg(feature = "arbitrary_precision")]
  662|       |            Compound::Number { .. } => unreachable!(),
  663|       |            #[cfg(feature = "raw_value")]
  664|       |            Compound::RawValue { .. } => unreachable!(),
  665|       |        }
  666|  53.1k|    }
_RNvXs6_NtCs4mj07ouNzCz_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs7amismJlL0J_5serde3ser12SerializeMap3endB7_:
  669|  23.1k|    fn end(self) -> Result<()> {
  670|  23.1k|        match self {
  671|  23.1k|            Compound::Map { ser, state } => match state {
  672|  3.16k|                State::Empty => Ok(()),
  673|  20.0k|                _ => ser.formatter.end_object(&mut ser.writer).map_err(Error::io),
  674|       |            },
  675|       |            #[cfg(feature = "arbitrary_precision")]
  676|       |            Compound::Number { .. } => unreachable!(),
  677|       |            #[cfg(feature = "raw_value")]
  678|       |            Compound::RawValue { .. } => unreachable!(),
  679|       |        }
  680|  23.1k|    }
_RNvXs9_NtCs4mj07ouNzCz_10serde_json3serINtB5_16MapKeySerializerQNtNvXs_NtB7_5valueNtB17_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs7amismJlL0J_5serde3ser10Serializer13serialize_strB7_:
  804|  53.1k|    fn serialize_str(self, value: &str) -> Result<()> {
  805|  53.1k|        self.ser.serialize_str(value)
  806|  53.1k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_nullQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1544|  19.2k|    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>
 1545|  19.2k|    where
 1546|  19.2k|        W: ?Sized + io::Write,
 1547|  19.2k|    {
 1548|  19.2k|        writer.write_all(b"null")
 1549|  19.2k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_boolQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1553|  11.5k|    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>
 1554|  11.5k|    where
 1555|  11.5k|        W: ?Sized + io::Write,
 1556|  11.5k|    {
 1557|  11.5k|        let s = if value {
 1558|  9.47k|            b"true" as &[u8]
 1559|       |        } else {
 1560|  2.05k|            b"false" as &[u8]
 1561|       |        };
 1562|  11.5k|        writer.write_all(s)
 1563|  11.5k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_i64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1600|  1.40k|    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>
 1601|  1.40k|    where
 1602|  1.40k|        W: ?Sized + io::Write,
 1603|  1.40k|    {
 1604|  1.40k|        let mut buffer = itoa::Buffer::new();
 1605|  1.40k|        let s = buffer.format(value);
 1606|  1.40k|        writer.write_all(s.as_bytes())
 1607|  1.40k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_u64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1655|  3.71k|    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>
 1656|  3.71k|    where
 1657|  3.71k|        W: ?Sized + io::Write,
 1658|  3.71k|    {
 1659|  3.71k|        let mut buffer = itoa::Buffer::new();
 1660|  3.71k|        let s = buffer.format(value);
 1661|  3.71k|        writer.write_all(s.as_bytes())
 1662|  3.71k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_f64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1716|  6.36k|    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>
 1717|  6.36k|    where
 1718|  6.36k|        W: ?Sized + io::Write,
 1719|  6.36k|    {
 1720|  6.36k|        let mut buffer = ryu::Buffer::new();
 1721|  6.36k|        let s = buffer.format_finite(value);
 1722|  6.36k|        writer.write_all(s.as_bytes())
 1723|  6.36k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_stringQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1737|  59.8k|    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1738|  59.8k|    where
 1739|  59.8k|        W: ?Sized + io::Write,
 1740|  59.8k|    {
 1741|  59.8k|        writer.write_all(b"\"")
 1742|  59.8k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_stringQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1747|  59.8k|    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1748|  59.8k|    where
 1749|  59.8k|        W: ?Sized + io::Write,
 1750|  59.8k|    {
 1751|  59.8k|        writer.write_all(b"\"")
 1752|  59.8k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter21write_string_fragmentQNtNvXs_NtB7_5valueNtB1D_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1757|  38.0k|    fn write_string_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>
 1758|  38.0k|    where
 1759|  38.0k|        W: ?Sized + io::Write,
 1760|  38.0k|    {
 1761|  38.0k|        writer.write_all(fragment.as_bytes())
 1762|  38.0k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter17write_char_escapeQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1766|   125k|    fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()>
 1767|   125k|    where
 1768|   125k|        W: ?Sized + io::Write,
 1769|   125k|    {
 1770|       |        use self::CharEscape::*;
 1771|       |
 1772|   125k|        let escape_char = match char_escape {
 1773|  6.86k|            Quote => b'"',
 1774|    683|            ReverseSolidus => b'\\',
 1775|      0|            Solidus => b'/',
 1776|    420|            Backspace => b'b',
 1777|    316|            FormFeed => b'f',
 1778|    802|            LineFeed => b'n',
 1779|    873|            CarriageReturn => b'r',
 1780|    473|            Tab => b't',
 1781|   114k|            AsciiControl(_) => b'u',
 1782|       |        };
 1783|       |
 1784|   125k|        match char_escape {
 1785|   114k|            AsciiControl(byte) => {
 1786|       |                static HEX_DIGITS: [u8; 16] = *b"0123456789abcdef";
 1787|   114k|                let bytes = &[
 1788|   114k|                    b'\\',
 1789|   114k|                    escape_char,
 1790|   114k|                    b'0',
 1791|   114k|                    b'0',
 1792|   114k|                    HEX_DIGITS[(byte >> 4) as usize],
 1793|   114k|                    HEX_DIGITS[(byte & 0xF) as usize],
 1794|   114k|                ];
 1795|   114k|                writer.write_all(bytes)
 1796|       |            }
 1797|  10.4k|            _ => writer.write_all(&[b'\\', escape_char]),
 1798|       |        }
 1799|   125k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter11begin_arrayQNtNvXs_NtB7_5valueNtB1t_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1822|  25.9k|    fn begin_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1823|  25.9k|    where
 1824|  25.9k|        W: ?Sized + io::Write,
 1825|  25.9k|    {
 1826|  25.9k|        writer.write_all(b"[")
 1827|  25.9k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter9end_arrayQNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1832|  25.9k|    fn end_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1833|  25.9k|    where
 1834|  25.9k|        W: ?Sized + io::Write,
 1835|  25.9k|    {
 1836|  25.9k|        writer.write_all(b"]")
 1837|  25.9k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter17begin_array_valueQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1842|  42.3k|    fn begin_array_value<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1843|  42.3k|    where
 1844|  42.3k|        W: ?Sized + io::Write,
 1845|  42.3k|    {
 1846|  42.3k|        if first {
 1847|  23.8k|            Ok(())
 1848|       |        } else {
 1849|  18.5k|            writer.write_all(b",")
 1850|       |        }
 1851|  42.3k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter15end_array_valueQNtNvXs_NtB7_5valueNtB1x_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1855|  42.3k|    fn end_array_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1856|  42.3k|    where
 1857|  42.3k|        W: ?Sized + io::Write,
 1858|  42.3k|    {
 1859|  42.3k|        Ok(())
 1860|  42.3k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_objectQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1865|  23.1k|    fn begin_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1866|  23.1k|    where
 1867|  23.1k|        W: ?Sized + io::Write,
 1868|  23.1k|    {
 1869|  23.1k|        writer.write_all(b"{")
 1870|  23.1k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_objectQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1875|  23.1k|    fn end_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1876|  23.1k|    where
 1877|  23.1k|        W: ?Sized + io::Write,
 1878|  23.1k|    {
 1879|  23.1k|        writer.write_all(b"}")
 1880|  23.1k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter16begin_object_keyQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1884|  53.1k|    fn begin_object_key<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1885|  53.1k|    where
 1886|  53.1k|        W: ?Sized + io::Write,
 1887|  53.1k|    {
 1888|  53.1k|        if first {
 1889|  20.0k|            Ok(())
 1890|       |        } else {
 1891|  33.0k|            writer.write_all(b",")
 1892|       |        }
 1893|  53.1k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter14end_object_keyQNtNvXs_NtB7_5valueNtB1w_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1899|  53.1k|    fn end_object_key<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1900|  53.1k|    where
 1901|  53.1k|        W: ?Sized + io::Write,
 1902|  53.1k|    {
 1903|  53.1k|        Ok(())
 1904|  53.1k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter18begin_object_valueQNtNvXs_NtB7_5valueNtB1A_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1910|  53.1k|    fn begin_object_value<W>(&mut self, writer: &mut W) -> io::Result<()>
 1911|  53.1k|    where
 1912|  53.1k|        W: ?Sized + io::Write,
 1913|  53.1k|    {
 1914|  53.1k|        writer.write_all(b":")
 1915|  53.1k|    }
_RINvYNtNtCs4mj07ouNzCz_10serde_json3ser16CompactFormatterNtB5_9Formatter16end_object_valueQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1919|  53.1k|    fn end_object_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1920|  53.1k|    where
 1921|  53.1k|        W: ?Sized + io::Write,
 1922|  53.1k|    {
 1923|  53.1k|        Ok(())
 1924|  53.1k|    }
_RINvNtCs4mj07ouNzCz_10serde_json3ser18format_escaped_strQNtNvXs_NtB4_5valueNtB10_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2069|  59.8k|fn format_escaped_str<W, F>(writer: &mut W, formatter: &mut F, value: &str) -> io::Result<()>
 2070|  59.8k|where
 2071|  59.8k|    W: ?Sized + io::Write,
 2072|  59.8k|    F: ?Sized + Formatter,
 2073|  59.8k|{
 2074|  59.8k|    tri!(formatter.begin_string(writer));
 2075|  59.8k|    tri!(format_escaped_str_contents(writer, formatter, value));
 2076|  59.8k|    formatter.end_string(writer)
 2077|  59.8k|}
_RINvNtCs4mj07ouNzCz_10serde_json3ser27format_escaped_str_contentsQNtNvXs_NtB4_5valueNtB19_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2079|  59.8k|fn format_escaped_str_contents<W, F>(
 2080|  59.8k|    writer: &mut W,
 2081|  59.8k|    formatter: &mut F,
 2082|  59.8k|    value: &str,
 2083|  59.8k|) -> io::Result<()>
 2084|  59.8k|where
 2085|  59.8k|    W: ?Sized + io::Write,
 2086|  59.8k|    F: ?Sized + Formatter,
 2087|  59.8k|{
 2088|  59.8k|    let mut bytes = value.as_bytes();
 2089|  59.8k|
 2090|  59.8k|    let mut i = 0;
 2091|   309k|    while i < bytes.len() {
 2092|   249k|        let (string_run, rest) = bytes.split_at(i);
 2093|   249k|        let (&byte, rest) = rest.split_first().unwrap();
 2094|   249k|
 2095|   249k|        let escape = ESCAPE[byte as usize];
 2096|   249k|
 2097|   249k|        i += 1;
 2098|   249k|        if escape == 0 {
 2099|   124k|            continue;
 2100|   125k|        }
 2101|   125k|
 2102|   125k|        bytes = rest;
 2103|   125k|        i = 0;
 2104|   125k|
 2105|   125k|        // Safety: string_run is a valid utf8 string, since we only split on ascii sequences
 2106|   125k|        let string_run = unsafe { str::from_utf8_unchecked(string_run) };
 2107|   125k|        if !string_run.is_empty() {
 2108|  16.6k|            tri!(formatter.write_string_fragment(writer, string_run));
 2109|   108k|        }
 2110|       |
 2111|   125k|        let char_escape = match escape {
 2112|    420|            self::BB => CharEscape::Backspace,
 2113|    473|            self::TT => CharEscape::Tab,
 2114|    802|            self::NN => CharEscape::LineFeed,
 2115|    316|            self::FF => CharEscape::FormFeed,
 2116|    873|            self::RR => CharEscape::CarriageReturn,
 2117|  6.86k|            self::QU => CharEscape::Quote,
 2118|    683|            self::BS => CharEscape::ReverseSolidus,
 2119|   114k|            self::UU => CharEscape::AsciiControl(byte),
 2120|       |            // Safety: the escape table does not contain any other type of character.
 2121|      0|            _ => unsafe { hint::unreachable_unchecked() },
 2122|       |        };
 2123|   125k|        tri!(formatter.write_char_escape(writer, char_escape));
 2124|       |    }
 2125|       |
 2126|       |    // Safety: bytes is a valid utf8 string, since we only split on ascii sequences
 2127|  59.8k|    let string_run = unsafe { str::from_utf8_unchecked(bytes) };
 2128|  59.8k|    if string_run.is_empty() {
 2129|  38.3k|        return Ok(());
 2130|  21.4k|    }
 2131|  21.4k|
 2132|  21.4k|    formatter.write_string_fragment(writer, string_run)
 2133|  59.8k|}
_RINvNtCs4mj07ouNzCz_10serde_json3ser9to_writerQNtNvXs_NtB4_5valueNtBQ_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterB11_EB4_:
 2177|  2.65k|pub fn to_writer<W, T>(writer: W, value: &T) -> Result<()>
 2178|  2.65k|where
 2179|  2.65k|    W: io::Write,
 2180|  2.65k|    T: ?Sized + Serialize,
 2181|  2.65k|{
 2182|  2.65k|    let mut ser = Serializer::new(writer);
 2183|  2.65k|    value.serialize(&mut ser)
 2184|  2.65k|}

_RNvXs_NtNtCs4mj07ouNzCz_10serde_json5value4fromNtB6_5ValueINtNtCshZc3FwCJ069_4core7convert4FromdE4from:
   59|  6.68k|    fn from(f: f64) -> Self {
   60|  6.68k|        Number::from_f64(f).map_or(Value::Null, Value::Number)
   61|  6.68k|    }
_RNvXsg_NtNtCs4mj07ouNzCz_10serde_json5value4fromNtB7_5ValueINtNtCshZc3FwCJ069_4core7convert4FromxE4from:
   12|  5.11k|                fn from(n: $ty) -> Self {
   13|  5.11k|                    Value::Number(n.into())
   14|  5.11k|                }

_RNvXs_NtCs4mj07ouNzCz_10serde_json5valueNtB4_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
  222|  2.65k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  223|       |        struct WriterFormatter<'a, 'b: 'a> {
  224|       |            inner: &'a mut fmt::Formatter<'b>,
  225|       |        }
  226|       |
  227|       |        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {
  228|       |            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|       |                // Safety: the serializer below only emits valid utf8 when using
  230|       |                // the default formatter.
  231|       |                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|       |                tri!(self.inner.write_str(s).map_err(io_error));
  233|       |                Ok(buf.len())
  234|       |            }
  235|       |
  236|       |            fn flush(&mut self) -> io::Result<()> {
  237|       |                Ok(())
  238|       |            }
  239|       |        }
  240|       |
  241|       |        fn io_error(_: fmt::Error) -> io::Error {
  242|       |            // Error value does not matter because Display impl just maps it
  243|       |            // back to fmt::Error.
  244|       |            io::Error::new(io::ErrorKind::Other, "fmt error")
  245|       |        }
  246|       |
  247|  2.65k|        let alternate = f.alternate();
  248|  2.65k|        let mut wr = WriterFormatter { inner: f };
  249|  2.65k|        if alternate {
  250|       |            // {:#}
  251|      0|            super::ser::to_writer_pretty(&mut wr, self).map_err(|_| fmt::Error)
  252|       |        } else {
  253|       |            // {}
  254|  2.65k|            super::ser::to_writer(&mut wr, self).map_err(|_| fmt::Error)
  255|       |        }
  256|  2.65k|    }
_RNvXNvXs_NtCs4mj07ouNzCz_10serde_json5valueNtB7_5ValueNtNtCshZc3FwCJ069_4core3fmt7Display3fmtNtB2_15WriterFormatterNtNtCsjixu6NuYCfn_3std2io5Write5write:
  228|   528k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|   528k|                // Safety: the serializer below only emits valid utf8 when using
  230|   528k|                // the default formatter.
  231|   528k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|   528k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|   528k|                Ok(buf.len())
  234|   528k|            }

_RINvXNtNtCs4mj07ouNzCz_10serde_json5value3serNtB5_5ValueNtNtCs7amismJlL0J_5serde3ser9Serialize9serializeQINtNtB7_3ser10SerializerQNtNvXs_B5_BH_NtNtCshZc3FwCJ069_4core3fmt7Display3fmt15WriterFormatterEEB7_:
   13|  98.1k|    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>
   14|  98.1k|    where
   15|  98.1k|        S: ::serde::Serializer,
   16|  98.1k|    {
   17|  98.1k|        match self {
   18|  19.2k|            Value::Null => serializer.serialize_unit(),
   19|  11.5k|            Value::Bool(b) => serializer.serialize_bool(*b),
   20|  11.4k|            Value::Number(n) => n.serialize(serializer),
   21|  6.73k|            Value::String(s) => serializer.serialize_str(s),
   22|  25.9k|            Value::Array(v) => v.serialize(serializer),
   23|       |            #[cfg(any(feature = "std", feature = "alloc"))]
   24|  23.1k|            Value::Object(m) => {
   25|       |                use serde::ser::SerializeMap;
   26|  23.1k|                let mut map = tri!(serializer.serialize_map(Some(m.len())));
   27|  76.2k|                for (k, v) in m {
   28|  53.1k|                    tri!(map.serialize_entry(k, v));
   29|       |                }
   30|  23.1k|                map.end()
   31|       |            }
   32|       |            #[cfg(not(any(feature = "std", feature = "alloc")))]
   33|       |            Value::Object(_) => unreachable!(),
   34|       |        }
   35|  98.1k|    }

_RINvCs9jNj3t2MxYU_8smallvec12layout_arrayNtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFrameECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  332|     61|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|     61|    let size = mem::size_of::<T>()
  334|     61|        .checked_mul(n)
  335|     61|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|     61|    let align = mem::align_of::<T>();
  337|     61|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|     61|}
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E10inline_mutCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  645|  32.8k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  32.8k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  32.8k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E4heapCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  659|  6.39k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|  6.39k|        (ConstNonNull(self.heap.0), self.heap.1)
  661|  6.39k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E6inlineCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  641|  16.1k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  16.1k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  16.1k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E8heap_mutCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  663|  11.4k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  11.4k|        let h = &mut self.heap;
  665|  11.4k|        (h.0, &mut h.1)
  666|  11.4k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E9from_heapCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  668|     61|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|     61|        SmallVecData { heap: (ptr, len) }
  670|     61|    }
_RNvMsR_Cs9jNj3t2MxYU_8smallvecINtB5_12ConstNonNullNtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFrameE3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 2486|  16.1k|    fn new(ptr: *const T) -> Option<Self> {
 2487|  16.1k|        NonNull::new(ptr as *mut T).map(Self)
 2488|  16.1k|    }
_RNvMsR_Cs9jNj3t2MxYU_8smallvecINtB5_12ConstNonNullNtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFrameE6as_ptrCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 2490|  22.5k|    fn as_ptr(self) -> *const T {
 2491|  22.5k|        self.0.as_ptr()
 2492|  22.5k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E8is_emptyCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  962|    591|    pub fn is_empty(&self) -> bool {
  963|    591|        self.len() == 0
  964|    591|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E10triple_mutCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  988|  44.1k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  44.1k|        unsafe {
  990|  44.1k|            if self.spilled() {
  991|  11.3k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  11.3k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  32.8k|                (
  995|  32.8k|                    self.data.inline_mut(),
  996|  32.8k|                    &mut self.capacity,
  997|  32.8k|                    Self::inline_capacity(),
  998|  32.8k|                )
  999|       |            }
 1000|       |        }
 1001|  44.1k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E15inline_capacityCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  930|   117k|    fn inline_capacity() -> usize {
  931|   117k|        if mem::size_of::<A::Item>() > 0 {
  932|   117k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   117k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 1229|     61|    fn reserve_one_unchecked(&mut self) {
 1230|     61|        debug_assert_eq!(self.len(), self.capacity());
 1231|     61|        let new_cap = self.len()
 1232|     61|            .checked_add(1)
 1233|     61|            .and_then(usize::checked_next_power_of_two)
 1234|     61|            .expect("capacity overflow");
 1235|     61|        infallible(self.try_grow(new_cap))
 1236|     61|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E3lenCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  956|     61|    pub fn len(&self) -> usize {
  957|     61|        self.triple().1
  958|     61|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E3popCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 1134|  17.6k|    pub fn pop(&mut self) -> Option<A::Item> {
 1135|  17.6k|        unsafe {
 1136|  17.6k|            let (ptr, len_ptr, _) = self.triple_mut();
 1137|  17.6k|            let ptr: *const _ = ptr.as_ptr();
 1138|  17.6k|            if *len_ptr == 0 {
 1139|      0|                return None;
 1140|  17.6k|            }
 1141|  17.6k|            let last_index = *len_ptr - 1;
 1142|  17.6k|            *len_ptr = last_index;
 1143|  17.6k|            Some(ptr::read(ptr.add(last_index)))
 1144|       |        }
 1145|  17.6k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E4pushCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 1118|  24.4k|    pub fn push(&mut self, value: A::Item) {
 1119|  24.4k|        unsafe {
 1120|  24.4k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1121|  24.4k|            if *len == cap {
 1122|     61|                self.reserve_one_unchecked();
 1123|     61|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1124|     61|                ptr = heap_ptr;
 1125|     61|                len = heap_len;
 1126|  24.4k|            }
 1127|  24.4k|            ptr::write(ptr.as_ptr().add(*len), value);
 1128|  24.4k|            *len += 1;
 1129|  24.4k|        }
 1130|  24.4k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E6tripleCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  975|  22.5k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  22.5k|        unsafe {
  977|  22.5k|            if self.spilled() {
  978|  6.39k|                let (ptr, len) = self.data.heap();
  979|  6.39k|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  16.1k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  22.5k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E7spilledCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 1005|  68.8k|    pub fn spilled(&self) -> bool {
 1006|  68.8k|        self.capacity > Self::inline_capacity()
 1007|  68.8k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E8try_growCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 1177|     61|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1178|     61|        unsafe {
 1179|     61|            let unspilled = !self.spilled();
 1180|     61|            let (ptr, &mut len, cap) = self.triple_mut();
 1181|     61|            assert!(new_cap >= len);
 1182|     61|            if new_cap <= Self::inline_capacity() {
 1183|      0|                if unspilled {
 1184|      0|                    return Ok(());
 1185|      0|                }
 1186|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1187|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1188|      0|                self.capacity = len;
 1189|      0|                deallocate(ptr, cap);
 1190|     61|            } else if new_cap != cap {
 1191|     61|                let layout = layout_array::<A::Item>(new_cap)?;
 1192|     61|                debug_assert!(layout.size() > 0);
 1193|       |                let new_alloc;
 1194|     61|                if unspilled {
 1195|     61|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1196|     61|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1197|     61|                        .cast();
 1198|     61|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1199|       |                } else {
 1200|       |                    // This should never fail since the same succeeded
 1201|       |                    // when previously allocating `ptr`.
 1202|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1203|       |
 1204|      0|                    let new_ptr =
 1205|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1206|      0|                    new_alloc = NonNull::new(new_ptr)
 1207|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1208|      0|                        .cast();
 1209|       |                }
 1210|     61|                self.data = SmallVecData::from_heap(new_alloc, len);
 1211|     61|                self.capacity = new_cap;
 1212|      0|            }
 1213|     61|            Ok(())
 1214|       |        }
 1215|     61|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E8is_emptyCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  962|    591|    pub fn is_empty(&self) -> bool {
  963|    591|        self.len() == 0
  964|    591|    }
_RNvXsf_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_ENtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5derefCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 1850|  22.5k|    fn deref(&self) -> &[A::Item] {
 1851|  22.5k|        unsafe {
 1852|  22.5k|            let (ptr, len, _) = self.triple();
 1853|  22.5k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1854|  22.5k|        }
 1855|  22.5k|    }
_RNvXsg_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 1860|  1.96k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1861|  1.96k|        unsafe {
 1862|  1.96k|            let (ptr, &mut len, _) = self.triple_mut();
 1863|  1.96k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1864|  1.96k|        }
 1865|  1.96k|    }
_RNvXsp_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_EINtNtNtCshZc3FwCJ069_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 2066|  1.96k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2067|  1.96k|        &mut (&mut **self)[index]
 2068|  1.96k|    }
_RNvXsv_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_ENtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 2148|  2.02k|    fn drop(&mut self) {
 2149|  2.02k|        unsafe {
 2150|  2.02k|            if self.spilled() {
 2151|     61|                let (ptr, &mut len) = self.data.heap_mut();
 2152|     61|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2153|  1.96k|            } else {
 2154|  1.96k|                ptr::drop_in_place(&mut self[..]);
 2155|  1.96k|            }
 2156|       |        }
 2157|  2.02k|    }
_RINvCs9jNj3t2MxYU_8smallvec10infallibleuECse0ISAJPynz5_8rsonpath:
  322|  85.3k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|  85.3k|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|  85.3k|}
_RINvCs9jNj3t2MxYU_8smallvec12layout_arrayNtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionEBH_:
  332|  2.54k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|  2.54k|    let size = mem::size_of::<T>()
  334|  2.54k|        .checked_mul(n)
  335|  2.54k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|  2.54k|    let align = mem::align_of::<T>();
  337|  2.54k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|  2.54k|}
_RINvCs9jNj3t2MxYU_8smallvec12layout_arrayNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256EBJ_:
  332|  1.40k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|  1.40k|    let size = mem::size_of::<T>()
  334|  1.40k|        .checked_mul(n)
  335|  1.40k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|  1.40k|    let align = mem::align_of::<T>();
  337|  1.40k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|  1.40k|}
_RINvCs9jNj3t2MxYU_8smallvec12layout_arrayTINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1g_9automaton5state5StateEEB1g_:
  332|  1.06k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|  1.06k|    let size = mem::size_of::<T>()
  334|  1.06k|        .checked_mul(n)
  335|  1.06k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|  1.06k|    let align = mem::align_of::<T>();
  337|  1.06k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|  1.06k|}
_RINvXsr_Cs9jNj3t2MxYU_8smallvecINtB6_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorBJ_E9from_iterINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4l_9Minimizer18process_superstate0EEBN_:
 2083|  41.0k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2084|  41.0k|        let mut v = SmallVec::new();
 2085|  41.0k|        v.extend(iterable);
 2086|  41.0k|        v
 2087|  41.0k|    }
_RINvXsr_Cs9jNj3t2MxYU_8smallvecINtB6_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1m_9automaton5state5StateEj2_EINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorBJ_E9from_iterINtNtNtB2X_8adapters3map3MapINtCsldiL0x81zBv_10vector_map8IntoIterBK_NtNtB2j_9small_set11SmallSet256ENCNvMNtB2j_9minimizerNtB5M_9Minimizer18process_superstates_0EEB1m_:
 2083|  41.0k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2084|  41.0k|        let mut v = SmallVec::new();
 2085|  41.0k|        v.extend(iterable);
 2086|  41.0k|        v
 2087|  41.0k|    }
_RINvXss_Cs9jNj3t2MxYU_8smallvecINtB6_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendBJ_E6extendINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4b_9Minimizer18process_superstate0EEBN_:
 2091|  41.0k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2092|  41.0k|        let mut iter = iterable.into_iter();
 2093|  41.0k|        let (lower_size_bound, _) = iter.size_hint();
 2094|  41.0k|        self.reserve(lower_size_bound);
 2095|  41.0k|
 2096|  41.0k|        unsafe {
 2097|  41.0k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2098|  41.0k|            let ptr = ptr.as_ptr();
 2099|  41.0k|            let mut len = SetLenOnDrop::new(len_ptr);
 2100|  73.8k|            while len.get() < cap {
 2101|  64.5k|                if let Some(out) = iter.next() {
 2102|  32.8k|                    ptr::write(ptr.add(len.get()), out);
 2103|  32.8k|                    len.increment_len(1);
 2104|  32.8k|                } else {
 2105|  31.7k|                    return;
 2106|       |                }
 2107|       |            }
 2108|       |        }
 2109|       |
 2110|  12.1k|        for elem in iter {
 2111|  2.89k|            self.push(elem);
 2112|  2.89k|        }
 2113|  41.0k|    }
_RINvXss_Cs9jNj3t2MxYU_8smallvecINtB6_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1m_9automaton5state5StateEj2_EINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendBJ_E6extendINtNtNtB2X_8adapters3map3MapINtCsldiL0x81zBv_10vector_map8IntoIterBK_NtNtB2j_9small_set11SmallSet256ENCNvMNtB2j_9minimizerNtB5C_9Minimizer18process_superstates_0EEB1m_:
 2091|  41.0k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2092|  41.0k|        let mut iter = iterable.into_iter();
 2093|  41.0k|        let (lower_size_bound, _) = iter.size_hint();
 2094|  41.0k|        self.reserve(lower_size_bound);
 2095|  41.0k|
 2096|  41.0k|        unsafe {
 2097|  41.0k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2098|  41.0k|            let ptr = ptr.as_ptr();
 2099|  41.0k|            let mut len = SetLenOnDrop::new(len_ptr);
 2100|  66.8k|            while len.get() < cap {
 2101|  61.3k|                if let Some(out) = iter.next() {
 2102|  25.8k|                    ptr::write(ptr.add(len.get()), out);
 2103|  25.8k|                    len.increment_len(1);
 2104|  25.8k|                } else {
 2105|  35.5k|                    return;
 2106|       |                }
 2107|       |            }
 2108|       |        }
 2109|       |
 2110|  5.47k|        for elem in iter {
 2111|      0|            self.push(elem);
 2112|      0|        }
 2113|  41.0k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutBR_:
  645|   171k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|   171k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|   171k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E11from_inlineBR_:
  649|  86.9k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  86.9k|        SmallVecData {
  651|  86.9k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  86.9k|        }
  653|  86.9k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E4heapBR_:
  659|  3.13k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|  3.13k|        (ConstNonNull(self.heap.0), self.heap.1)
  661|  3.13k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E6inlineBR_:
  641|  64.4k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  64.4k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  64.4k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E8heap_mutBR_:
  663|  5.43k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  5.43k|        let h = &mut self.heap;
  665|  5.43k|        (h.0, &mut h.1)
  666|  5.43k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E9from_heapBR_:
  668|  2.51k|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|  2.51k|        SmallVecData { heap: (ptr, len) }
  670|  2.51k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  649|  2.02k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  2.02k|        SmallVecData {
  651|  2.02k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  2.02k|        }
  653|  2.02k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E10inline_mutBT_:
  645|  35.8k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  35.8k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  35.8k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E11from_inlineBT_:
  649|  2.65k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  2.65k|        SmallVecData {
  651|  2.65k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  2.65k|        }
  653|  2.65k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E4heapBT_:
  659|    584|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|    584|        (ConstNonNull(self.heap.0), self.heap.1)
  661|    584|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E6inlineBT_:
  641|    233|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|    233|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|    233|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E8heap_mutBT_:
  663|  55.3k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  55.3k|        let h = &mut self.heap;
  665|  55.3k|        (h.0, &mut h.1)
  666|  55.3k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E9from_heapBT_:
  668|    817|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|    817|        SmallVecData { heap: (ptr, len) }
  670|    817|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E10inline_mutB1q_:
  645|   167k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|   167k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|   167k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E11from_inlineB1q_:
  649|  86.9k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  86.9k|        SmallVecData {
  651|  86.9k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  86.9k|        }
  653|  86.9k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E4heapB1q_:
  659|  1.06k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|  1.06k|        (ConstNonNull(self.heap.0), self.heap.1)
  661|  1.06k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E6inlineB1q_:
  641|  67.7k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  67.7k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  67.7k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E8heap_mutB1q_:
  663|  2.12k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  2.12k|        let h = &mut self.heap;
  665|  2.12k|        (h.0, &mut h.1)
  666|  2.12k|    }
_RNvMs9_Cs9jNj3t2MxYU_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E9from_heapB1q_:
  668|  1.06k|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|  1.06k|        SmallVecData { heap: (ptr, len) }
  670|  1.06k|    }
_RNvMsR_Cs9jNj3t2MxYU_8smallvecINtB5_12ConstNonNullNtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionE3newBQ_:
 2486|  64.4k|    fn new(ptr: *const T) -> Option<Self> {
 2487|  64.4k|        NonNull::new(ptr as *mut T).map(Self)
 2488|  64.4k|    }
_RNvMsR_Cs9jNj3t2MxYU_8smallvecINtB5_12ConstNonNullNtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionE6as_ptrBQ_:
 2490|  64.4k|    fn as_ptr(self) -> *const T {
 2491|  64.4k|        self.0.as_ptr()
 2492|  64.4k|    }
_RNvMsR_Cs9jNj3t2MxYU_8smallvecINtB5_12ConstNonNullNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256E3newBS_:
 2486|    233|    fn new(ptr: *const T) -> Option<Self> {
 2487|    233|        NonNull::new(ptr as *mut T).map(Self)
 2488|    233|    }
_RNvMsR_Cs9jNj3t2MxYU_8smallvecINtB5_12ConstNonNullTINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1p_9automaton5state5StateEE3newB1p_:
 2486|  67.7k|    fn new(ptr: *const T) -> Option<Self> {
 2487|  67.7k|        NonNull::new(ptr as *mut T).map(Self)
 2488|  67.7k|    }
_RNvMsR_Cs9jNj3t2MxYU_8smallvecINtB5_12ConstNonNullTINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1p_9automaton5state5StateEE6as_ptrB1p_:
 2490|  68.2k|    fn as_ptr(self) -> *const T {
 2491|  68.2k|        self.0.as_ptr()
 2492|  68.2k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutBM_:
  988|   171k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|   171k|        unsafe {
  990|   171k|            if self.spilled() {
  991|    441|                let (ptr, len_ptr) = self.data.heap_mut();
  992|    441|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|   171k|                (
  995|   171k|                    self.data.inline_mut(),
  996|   171k|                    &mut self.capacity,
  997|   171k|                    Self::inline_capacity(),
  998|   171k|                )
  999|       |            }
 1000|       |        }
 1001|   171k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E11try_reserveBM_:
 1241|  41.0k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1242|  41.0k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1243|  41.0k|        // calls to it from callers.
 1244|  41.0k|        let (_, &mut len, cap) = self.triple_mut();
 1245|  41.0k|        if cap - len >= additional {
 1246|  41.0k|            return Ok(());
 1247|      0|        }
 1248|      0|        let new_cap = len
 1249|      0|            .checked_add(additional)
 1250|      0|            .and_then(usize::checked_next_power_of_two)
 1251|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1252|      0|        self.try_grow(new_cap)
 1253|  41.0k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityBM_:
  930|   567k|    fn inline_capacity() -> usize {
  931|   567k|        if mem::size_of::<A::Item>() > 0 {
  932|   567k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   567k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E21reserve_one_uncheckedBM_:
 1229|  2.51k|    fn reserve_one_unchecked(&mut self) {
 1230|  2.51k|        debug_assert_eq!(self.len(), self.capacity());
 1231|  2.51k|        let new_cap = self.len()
 1232|  2.51k|            .checked_add(1)
 1233|  2.51k|            .and_then(usize::checked_next_power_of_two)
 1234|  2.51k|            .expect("capacity overflow");
 1235|  2.51k|        infallible(self.try_grow(new_cap))
 1236|  2.51k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E3lenBM_:
  956|  3.10k|    pub fn len(&self) -> usize {
  957|  3.10k|        self.triple().1
  958|  3.10k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E3newBM_:
  783|  86.9k|    pub fn new() -> SmallVec<A> {
  784|  86.9k|        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|  86.9k|        // this check should be optimized away entirely for valid ones.
  786|  86.9k|        assert!(
  787|  86.9k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  86.9k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  86.9k|        SmallVec {
  791|  86.9k|            capacity: 0,
  792|  86.9k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  86.9k|        }
  794|  86.9k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E4pushBM_:
 1118|  2.89k|    pub fn push(&mut self, value: A::Item) {
 1119|  2.89k|        unsafe {
 1120|  2.89k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1121|  2.89k|            if *len == cap {
 1122|  2.51k|                self.reserve_one_unchecked();
 1123|  2.51k|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1124|  2.51k|                ptr = heap_ptr;
 1125|  2.51k|                len = heap_len;
 1126|  2.51k|            }
 1127|  2.89k|            ptr::write(ptr.as_ptr().add(*len), value);
 1128|  2.89k|            *len += 1;
 1129|  2.89k|        }
 1130|  2.89k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E6tripleBM_:
  975|  67.5k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  67.5k|        unsafe {
  977|  67.5k|            if self.spilled() {
  978|  3.13k|                let (ptr, len) = self.data.heap();
  979|  3.13k|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  64.4k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  67.5k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E7reserveBM_:
 1223|  41.0k|    pub fn reserve(&mut self, additional: usize) {
 1224|  41.0k|        infallible(self.try_reserve(additional))
 1225|  41.0k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E7spilledBM_:
 1005|   328k|    pub fn spilled(&self) -> bool {
 1006|   328k|        self.capacity > Self::inline_capacity()
 1007|   328k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_E8try_growBM_:
 1177|  2.51k|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1178|  2.51k|        unsafe {
 1179|  2.51k|            let unspilled = !self.spilled();
 1180|  2.51k|            let (ptr, &mut len, cap) = self.triple_mut();
 1181|  2.51k|            assert!(new_cap >= len);
 1182|  2.51k|            if new_cap <= Self::inline_capacity() {
 1183|      0|                if unspilled {
 1184|      0|                    return Ok(());
 1185|      0|                }
 1186|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1187|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1188|      0|                self.capacity = len;
 1189|      0|                deallocate(ptr, cap);
 1190|  2.51k|            } else if new_cap != cap {
 1191|  2.51k|                let layout = layout_array::<A::Item>(new_cap)?;
 1192|  2.51k|                debug_assert!(layout.size() > 0);
 1193|       |                let new_alloc;
 1194|  2.51k|                if unspilled {
 1195|  2.48k|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1196|  2.48k|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1197|  2.48k|                        .cast();
 1198|  2.48k|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1199|       |                } else {
 1200|       |                    // This should never fail since the same succeeded
 1201|       |                    // when previously allocating `ptr`.
 1202|     32|                    let old_layout = layout_array::<A::Item>(cap)?;
 1203|       |
 1204|     32|                    let new_ptr =
 1205|     32|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1206|     32|                    new_alloc = NonNull::new(new_ptr)
 1207|     32|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1208|     32|                        .cast();
 1209|       |                }
 1210|  2.51k|                self.data = SmallVecData::from_heap(new_alloc, len);
 1211|  2.51k|                self.capacity = new_cap;
 1212|      0|            }
 1213|  2.51k|            Ok(())
 1214|       |        }
 1215|  2.51k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_E3newBO_:
  783|  2.02k|    pub fn new() -> SmallVec<A> {
  784|  2.02k|        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|  2.02k|        // this check should be optimized away entirely for valid ones.
  786|  2.02k|        assert!(
  787|  2.02k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  2.02k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  2.02k|        SmallVec {
  791|  2.02k|            capacity: 0,
  792|  2.02k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  2.02k|        }
  794|  2.02k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E10triple_mutBO_:
  988|  90.1k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  90.1k|        unsafe {
  990|  90.1k|            if self.spilled() {
  991|  54.3k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  54.3k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  35.8k|                (
  995|  35.8k|                    self.data.inline_mut(),
  996|  35.8k|                    &mut self.capacity,
  997|  35.8k|                    Self::inline_capacity(),
  998|  35.8k|                )
  999|       |            }
 1000|       |        }
 1001|  90.1k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E15inline_capacityBO_:
  930|   131k|    fn inline_capacity() -> usize {
  931|   131k|        if mem::size_of::<A::Item>() > 0 {
  932|   131k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   131k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E21reserve_one_uncheckedBO_:
 1229|    817|    fn reserve_one_unchecked(&mut self) {
 1230|    817|        debug_assert_eq!(self.len(), self.capacity());
 1231|    817|        let new_cap = self.len()
 1232|    817|            .checked_add(1)
 1233|    817|            .and_then(usize::checked_next_power_of_two)
 1234|    817|            .expect("capacity overflow");
 1235|    817|        infallible(self.try_grow(new_cap))
 1236|    817|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E3lenBO_:
  956|    817|    pub fn len(&self) -> usize {
  957|    817|        self.triple().1
  958|    817|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E3newBO_:
  783|  2.65k|    pub fn new() -> SmallVec<A> {
  784|  2.65k|        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|  2.65k|        // this check should be optimized away entirely for valid ones.
  786|  2.65k|        assert!(
  787|  2.65k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  2.65k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  2.65k|        SmallVec {
  791|  2.65k|            capacity: 0,
  792|  2.65k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  2.65k|        }
  794|  2.65k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E3popBO_:
 1134|  43.6k|    pub fn pop(&mut self) -> Option<A::Item> {
 1135|  43.6k|        unsafe {
 1136|  43.6k|            let (ptr, len_ptr, _) = self.triple_mut();
 1137|  43.6k|            let ptr: *const _ = ptr.as_ptr();
 1138|  43.6k|            if *len_ptr == 0 {
 1139|  2.61k|                return None;
 1140|  41.0k|            }
 1141|  41.0k|            let last_index = *len_ptr - 1;
 1142|  41.0k|            *len_ptr = last_index;
 1143|  41.0k|            Some(ptr::read(ptr.add(last_index)))
 1144|       |        }
 1145|  43.6k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E4pushBO_:
 1118|  43.2k|    pub fn push(&mut self, value: A::Item) {
 1119|  43.2k|        unsafe {
 1120|  43.2k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1121|  43.2k|            if *len == cap {
 1122|    817|                self.reserve_one_unchecked();
 1123|    817|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1124|    817|                ptr = heap_ptr;
 1125|    817|                len = heap_len;
 1126|  42.4k|            }
 1127|  43.2k|            ptr::write(ptr.as_ptr().add(*len), value);
 1128|  43.2k|            *len += 1;
 1129|  43.2k|        }
 1130|  43.2k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E6tripleBO_:
  975|    817|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|    817|        unsafe {
  977|    817|            if self.spilled() {
  978|    584|                let (ptr, len) = self.data.heap();
  979|    584|                (ptr, len, self.capacity)
  980|       |            } else {
  981|    233|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|    817|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E7spilledBO_:
 1005|  94.4k|    pub fn spilled(&self) -> bool {
 1006|  94.4k|        self.capacity > Self::inline_capacity()
 1007|  94.4k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_E8try_growBO_:
 1177|    817|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1178|    817|        unsafe {
 1179|    817|            let unspilled = !self.spilled();
 1180|    817|            let (ptr, &mut len, cap) = self.triple_mut();
 1181|    817|            assert!(new_cap >= len);
 1182|    817|            if new_cap <= Self::inline_capacity() {
 1183|      0|                if unspilled {
 1184|      0|                    return Ok(());
 1185|      0|                }
 1186|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1187|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1188|      0|                self.capacity = len;
 1189|      0|                deallocate(ptr, cap);
 1190|    817|            } else if new_cap != cap {
 1191|    817|                let layout = layout_array::<A::Item>(new_cap)?;
 1192|    817|                debug_assert!(layout.size() > 0);
 1193|       |                let new_alloc;
 1194|    817|                if unspilled {
 1195|    233|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1196|    233|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1197|    233|                        .cast();
 1198|    233|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1199|       |                } else {
 1200|       |                    // This should never fail since the same succeeded
 1201|       |                    // when previously allocating `ptr`.
 1202|    584|                    let old_layout = layout_array::<A::Item>(cap)?;
 1203|       |
 1204|    584|                    let new_ptr =
 1205|    584|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1206|    584|                    new_alloc = NonNull::new(new_ptr)
 1207|    584|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1208|    584|                        .cast();
 1209|       |                }
 1210|    817|                self.data = SmallVecData::from_heap(new_alloc, len);
 1211|    817|                self.capacity = new_cap;
 1212|      0|            }
 1213|    817|            Ok(())
 1214|       |        }
 1215|    817|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E10triple_mutB1l_:
  988|   168k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|   168k|        unsafe {
  990|   168k|            if self.spilled() {
  991|  1.06k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  1.06k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|   167k|                (
  995|   167k|                    self.data.inline_mut(),
  996|   167k|                    &mut self.capacity,
  997|   167k|                    Self::inline_capacity(),
  998|   167k|                )
  999|       |            }
 1000|       |        }
 1001|   168k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E11try_reserveB1l_:
 1241|  41.0k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1242|  41.0k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1243|  41.0k|        // calls to it from callers.
 1244|  41.0k|        let (_, &mut len, cap) = self.triple_mut();
 1245|  41.0k|        if cap - len >= additional {
 1246|  39.9k|            return Ok(());
 1247|  1.06k|        }
 1248|  1.06k|        let new_cap = len
 1249|  1.06k|            .checked_add(additional)
 1250|  1.06k|            .and_then(usize::checked_next_power_of_two)
 1251|  1.06k|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1252|  1.06k|        self.try_grow(new_cap)
 1253|  41.0k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E15inline_capacityB1l_:
  930|   562k|    fn inline_capacity() -> usize {
  931|   562k|        if mem::size_of::<A::Item>() > 0 {
  932|   562k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   562k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E3lenB1l_:
  956|    591|    pub fn len(&self) -> usize {
  957|    591|        self.triple().1
  958|    591|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E3newB1l_:
  783|  86.9k|    pub fn new() -> SmallVec<A> {
  784|  86.9k|        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|  86.9k|        // this check should be optimized away entirely for valid ones.
  786|  86.9k|        assert!(
  787|  86.9k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  86.9k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  86.9k|        SmallVec {
  791|  86.9k|            capacity: 0,
  792|  86.9k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  86.9k|        }
  794|  86.9k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E6tripleB1l_:
  975|  68.7k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  68.7k|        unsafe {
  977|  68.7k|            if self.spilled() {
  978|  1.06k|                let (ptr, len) = self.data.heap();
  979|  1.06k|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  67.7k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  68.7k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E7reserveB1l_:
 1223|  41.0k|    pub fn reserve(&mut self, additional: usize) {
 1224|  41.0k|        infallible(self.try_reserve(additional))
 1225|  41.0k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E7spilledB1l_:
 1005|   325k|    pub fn spilled(&self) -> bool {
 1006|   325k|        self.capacity > Self::inline_capacity()
 1007|   325k|    }
_RNvMsc_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E8try_growB1l_:
 1177|  1.06k|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1178|  1.06k|        unsafe {
 1179|  1.06k|            let unspilled = !self.spilled();
 1180|  1.06k|            let (ptr, &mut len, cap) = self.triple_mut();
 1181|  1.06k|            assert!(new_cap >= len);
 1182|  1.06k|            if new_cap <= Self::inline_capacity() {
 1183|      0|                if unspilled {
 1184|      0|                    return Ok(());
 1185|      0|                }
 1186|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1187|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1188|      0|                self.capacity = len;
 1189|      0|                deallocate(ptr, cap);
 1190|  1.06k|            } else if new_cap != cap {
 1191|  1.06k|                let layout = layout_array::<A::Item>(new_cap)?;
 1192|  1.06k|                debug_assert!(layout.size() > 0);
 1193|       |                let new_alloc;
 1194|  1.06k|                if unspilled {
 1195|  1.06k|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1196|  1.06k|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1197|  1.06k|                        .cast();
 1198|  1.06k|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1199|       |                } else {
 1200|       |                    // This should never fail since the same succeeded
 1201|       |                    // when previously allocating `ptr`.
 1202|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1203|       |
 1204|      0|                    let new_ptr =
 1205|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1206|      0|                    new_alloc = NonNull::new(new_ptr)
 1207|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1208|      0|                        .cast();
 1209|       |                }
 1210|  1.06k|                self.data = SmallVecData::from_heap(new_alloc, len);
 1211|  1.06k|                self.capacity = new_cap;
 1212|      0|            }
 1213|  1.06k|            Ok(())
 1214|       |        }
 1215|  1.06k|    }
_RNvXsf_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5derefBM_:
 1850|  64.4k|    fn deref(&self) -> &[A::Item] {
 1851|  64.4k|        unsafe {
 1852|  64.4k|            let (ptr, len, _) = self.triple();
 1853|  64.4k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1854|  64.4k|        }
 1855|  64.4k|    }
_RNvXsf_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_ENtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5derefB1l_:
 1850|  68.2k|    fn deref(&self) -> &[A::Item] {
 1851|  68.2k|        unsafe {
 1852|  68.2k|            let (ptr, len, _) = self.triple();
 1853|  68.2k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1854|  68.2k|        }
 1855|  68.2k|    }
_RNvXsg_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutBM_:
 1860|  84.4k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1861|  84.4k|        unsafe {
 1862|  84.4k|            let (ptr, &mut len, _) = self.triple_mut();
 1863|  84.4k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1864|  84.4k|        }
 1865|  84.4k|    }
_RNvXsg_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutBO_:
 1860|  2.42k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1861|  2.42k|        unsafe {
 1862|  2.42k|            let (ptr, &mut len, _) = self.triple_mut();
 1863|  2.42k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1864|  2.42k|        }
 1865|  2.42k|    }
_RNvXsg_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutB1l_:
 1860|  85.8k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1861|  85.8k|        unsafe {
 1862|  85.8k|            let (ptr, &mut len, _) = self.triple_mut();
 1863|  85.8k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1864|  85.8k|        }
 1865|  85.8k|    }
_RNvXsp_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCshZc3FwCJ069_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutBM_:
 2066|  84.4k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2067|  84.4k|        &mut (&mut **self)[index]
 2068|  84.4k|    }
_RNvXsp_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_EINtNtNtCshZc3FwCJ069_4core3ops5index8IndexMutNtNtB1R_5range9RangeFullE9index_mutBO_:
 2066|  2.42k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2067|  2.42k|        &mut (&mut **self)[index]
 2068|  2.42k|    }
_RNvXsp_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_EINtNtNtCshZc3FwCJ069_4core3ops5index8IndexMutNtNtB2U_5range9RangeFullE9index_mutB1l_:
 2066|  85.8k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2067|  85.8k|        &mut (&mut **self)[index]
 2068|  85.8k|    }
_RNvXsu_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_ENtNtCshZc3FwCJ069_4core7default7Default7defaultBM_:
 2127|  43.2k|    fn default() -> SmallVec<A> {
 2128|  43.2k|        SmallVec::new()
 2129|  43.2k|    }
_RNvXsu_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_ENtNtCshZc3FwCJ069_4core7default7Default7defaultB1l_:
 2127|  43.2k|    fn default() -> SmallVec<A> {
 2128|  43.2k|        SmallVec::new()
 2129|  43.2k|    }
_RNvXsX_Cs9jNj3t2MxYU_8smallvecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB16_9automaton5state5StateEj2_NtB5_5Array4sizeB16_:
 2451|   649k|                fn size() -> usize { $size }
_RNvMsO_Cs9jNj3t2MxYU_8smallvecNtB5_12SetLenOnDrop13increment_lenCse0ISAJPynz5_8rsonpath:
 2381|  58.6k|    fn increment_len(&mut self, increment: usize) {
 2382|  58.6k|        self.local_len += increment;
 2383|  58.6k|    }
_RNvMsO_Cs9jNj3t2MxYU_8smallvecNtB5_12SetLenOnDrop3getCse0ISAJPynz5_8rsonpath:
 2376|   199k|    fn get(&self) -> usize {
 2377|   199k|        self.local_len
 2378|   199k|    }
_RNvMsO_Cs9jNj3t2MxYU_8smallvecNtB5_12SetLenOnDrop3newCse0ISAJPynz5_8rsonpath:
 2368|  82.0k|    fn new(len: &'a mut usize) -> Self {
 2369|  82.0k|        SetLenOnDrop {
 2370|  82.0k|            local_len: *len,
 2371|  82.0k|            len,
 2372|  82.0k|        }
 2373|  82.0k|    }
_RNvXsX_Cs9jNj3t2MxYU_8smallvecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBz_:
 2451|   133k|                fn size() -> usize { $size }
_RNvXsX_Cs9jNj3t2MxYU_8smallvecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeBx_:
 2451|   654k|                fn size() -> usize { $size }
_RNvXs1v_Cs9jNj3t2MxYU_8smallvecANtNtNtCse0ISAJPynz5_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2451|   119k|                fn size() -> usize { $size }
_RNvXsP_Cs9jNj3t2MxYU_8smallvecNtB5_12SetLenOnDropNtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropCse0ISAJPynz5_8rsonpath:
 2388|  82.0k|    fn drop(&mut self) {
 2389|  82.0k|        *self.len = self.local_len;
 2390|  82.0k|    }
_RNvXsv_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtCse0ISAJPynz5_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropBM_:
 2148|  86.9k|    fn drop(&mut self) {
 2149|  86.9k|        unsafe {
 2150|  86.9k|            if self.spilled() {
 2151|  2.48k|                let (ptr, &mut len) = self.data.heap_mut();
 2152|  2.48k|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2153|  84.4k|            } else {
 2154|  84.4k|                ptr::drop_in_place(&mut self[..]);
 2155|  84.4k|            }
 2156|       |        }
 2157|  86.9k|    }
_RNvXsv_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecANtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropBO_:
 2148|  2.65k|    fn drop(&mut self) {
 2149|  2.65k|        unsafe {
 2150|  2.65k|            if self.spilled() {
 2151|    233|                let (ptr, &mut len) = self.data.heap_mut();
 2152|    233|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2153|  2.42k|            } else {
 2154|  2.42k|                ptr::drop_in_place(&mut self[..]);
 2155|  2.42k|            }
 2156|       |        }
 2157|  2.65k|    }
_RNvXsv_Cs9jNj3t2MxYU_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_ENtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropB1l_:
 2148|  86.9k|    fn drop(&mut self) {
 2149|  86.9k|        unsafe {
 2150|  86.9k|            if self.spilled() {
 2151|  1.06k|                let (ptr, &mut len) = self.data.heap_mut();
 2152|  1.06k|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2153|  85.8k|            } else {
 2154|  85.8k|                ptr::drop_in_place(&mut self[..]);
 2155|  85.8k|            }
 2156|       |        }
 2157|  86.9k|    }

_RINvMCsldiL0x81zBv_10vector_mapINtB3_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1i_9automaton9small_set11SmallSet256E7get_mutBG_EB1i_:
   83|  39.9k|    pub fn get_mut<'l, Q: PartialEq<K> + ?Sized>(&'l mut self, key: &Q) -> Option<&'l mut V> {
   84|  39.9k|        self.position(key).map(move |p| &mut self.values[p])
   85|  39.9k|    }
_RINvMCsldiL0x81zBv_10vector_mapINtB3_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1i_9automaton9small_set11SmallSet256E8positionBG_EB1i_:
   71|  65.8k|    fn position<Q: PartialEq<K> + ?Sized>(&self, key: &Q) -> Option<usize> {
   72|  65.8k|        self.keys.iter().position(|k| key == k)
   73|  65.8k|    }
_RINvMCsldiL0x81zBv_10vector_mapINtB3_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE3getBG_EBM_:
   79|  33.7k|    pub fn get<'l, Q: PartialEq<K> + ?Sized>(&'l self, key: &Q) -> Option<&'l V> {
   80|  33.7k|        self.position(key).map(|p| &self.values[p])
   81|  33.7k|    }
_RINvMCsldiL0x81zBv_10vector_mapINtB3_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE8positionBG_EBM_:
   71|   140k|    fn position<Q: PartialEq<K> + ?Sized>(&self, key: &Q) -> Option<usize> {
   72|   140k|        self.keys.iter().position(|k| key == k)
   73|   140k|    }
_RINvMCsldiL0x81zBv_10vector_mapINtB3_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE12contains_keyBG_EBM_:
   75|   105k|    pub fn contains_key<Q: PartialEq<K> + ?Sized>(&self, key: &Q) -> bool {
   76|   105k|        self.position(key).is_some()
   77|   105k|    }
_RINvMCsldiL0x81zBv_10vector_mapINtB3_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE3getBG_EBM_:
   79|   143k|    pub fn get<'l, Q: PartialEq<K> + ?Sized>(&'l self, key: &Q) -> Option<&'l V> {
   80|   143k|        self.position(key).map(|p| &self.values[p])
   81|   143k|    }
_RINvMCsldiL0x81zBv_10vector_mapINtB3_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE8positionBG_EBM_:
   71|   294k|    fn position<Q: PartialEq<K> + ?Sized>(&self, key: &Q) -> Option<usize> {
   72|   294k|        self.keys.iter().position(|k| key == k)
   73|   294k|    }
_RNCINvMCsldiL0x81zBv_10vector_mapINtB5_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1k_9automaton9small_set11SmallSet256E7get_mutBI_E0B1k_:
   84|  14.0k|        self.position(key).map(move |p| &mut self.values[p])
_RNCINvMCsldiL0x81zBv_10vector_mapINtB5_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1k_9automaton9small_set11SmallSet256E8positionBI_E0B1k_:
   72|  33.9k|        self.keys.iter().position(|k| key == k)
_RNCINvMCsldiL0x81zBv_10vector_mapINtB5_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE3getBI_E0BO_:
   80|  31.5k|        self.position(key).map(|p| &self.values[p])
_RNCINvMCsldiL0x81zBv_10vector_mapINtB5_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE8positionBI_E0BO_:
   72|  10.2M|        self.keys.iter().position(|k| key == k)
_RNCINvMCsldiL0x81zBv_10vector_mapINtB5_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateE3getBI_E0BO_:
   80|   143k|        self.position(key).map(|p| &self.values[p])
_RNCINvMCsldiL0x81zBv_10vector_mapINtB5_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateE8positionBI_E0BO_:
   72|  21.1M|        self.keys.iter().position(|k| key == k)
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1h_9automaton9small_set11SmallSet256E13with_capacityB1h_:
   43|  41.0k|    pub fn with_capacity(capacity: usize) -> Self
   44|  41.0k|    where
   45|  41.0k|        K: PartialEq,
   46|  41.0k|    {
   47|  41.0k|        VecMap {
   48|  41.0k|            keys: Vec::with_capacity(capacity),
   49|  41.0k|            values: Vec::with_capacity(capacity),
   50|  41.0k|        }
   51|  41.0k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1h_9automaton9small_set11SmallSet256E3newB1h_:
   36|  41.0k|    pub fn new() -> Self
   37|  41.0k|    where
   38|  41.0k|        K: PartialEq,
   39|  41.0k|    {
   40|  41.0k|        Self::with_capacity(0)
   41|  41.0k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1h_9automaton9small_set11SmallSet256E6insertB1h_:
   87|  25.8k|    pub fn insert(&mut self, key: K, mut value: V) -> Option<V>
   88|  25.8k|    where
   89|  25.8k|        K: PartialEq,
   90|  25.8k|    {
   91|  25.8k|        if let Some(position) = self.position(&key) {
   92|      0|            std::mem::swap(&mut value, &mut self.values[position]);
   93|      0|            Some(value)
   94|       |        } else {
   95|  25.8k|            self.keys.push(key);
   96|  25.8k|            self.values.push(value);
   97|  25.8k|            None
   98|       |        }
   99|  25.8k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1h_9automaton9small_set11SmallSet256E8iter_mutB1h_:
  171|  41.0k|    pub fn iter_mut(&mut self) -> IterMut<K, V> {
  172|  41.0k|        IterMut {
  173|  41.0k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  174|  41.0k|        }
  175|  41.0k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE13with_capacityBL_:
   43|  2.65k|    pub fn with_capacity(capacity: usize) -> Self
   44|  2.65k|    where
   45|  2.65k|        K: PartialEq,
   46|  2.65k|    {
   47|  2.65k|        VecMap {
   48|  2.65k|            keys: Vec::with_capacity(capacity),
   49|  2.65k|            values: Vec::with_capacity(capacity),
   50|  2.65k|        }
   51|  2.65k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE3newBL_:
   36|  2.65k|    pub fn new() -> Self
   37|  2.65k|    where
   38|  2.65k|        K: PartialEq,
   39|  2.65k|    {
   40|  2.65k|        Self::with_capacity(0)
   41|  2.65k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE6insertBL_:
   87|   106k|    pub fn insert(&mut self, key: K, mut value: V) -> Option<V>
   88|   106k|    where
   89|   106k|        K: PartialEq,
   90|   106k|    {
   91|   106k|        if let Some(position) = self.position(&key) {
   92|  65.5k|            std::mem::swap(&mut value, &mut self.values[position]);
   93|  65.5k|            Some(value)
   94|       |        } else {
   95|  41.1k|            self.keys.push(key);
   96|  41.1k|            self.values.push(value);
   97|  41.1k|            None
   98|       |        }
   99|   106k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE13with_capacityBL_:
   43|  2.65k|    pub fn with_capacity(capacity: usize) -> Self
   44|  2.65k|    where
   45|  2.65k|        K: PartialEq,
   46|  2.65k|    {
   47|  2.65k|        VecMap {
   48|  2.65k|            keys: Vec::with_capacity(capacity),
   49|  2.65k|            values: Vec::with_capacity(capacity),
   50|  2.65k|        }
   51|  2.65k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3lenBL_:
   53|  43.3k|    pub fn len(&self) -> usize {
   54|  43.3k|        self.keys.len()
   55|  43.3k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3newBL_:
   36|  2.65k|    pub fn new() -> Self
   37|  2.65k|    where
   38|  2.65k|        K: PartialEq,
   39|  2.65k|    {
   40|  2.65k|        Self::with_capacity(0)
   41|  2.65k|    }
_RNvMCsldiL0x81zBv_10vector_mapINtB2_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE6insertBL_:
   87|  45.9k|    pub fn insert(&mut self, key: K, mut value: V) -> Option<V>
   88|  45.9k|    where
   89|  45.9k|        K: PartialEq,
   90|  45.9k|    {
   91|  45.9k|        if let Some(position) = self.position(&key) {
   92|      0|            std::mem::swap(&mut value, &mut self.values[position]);
   93|      0|            Some(value)
   94|       |        } else {
   95|  45.9k|            self.keys.push(key);
   96|  45.9k|            self.values.push(value);
   97|  45.9k|            None
   98|       |        }
   99|  45.9k|    }
_RNvXs5_CsldiL0x81zBv_10vector_mapINtB5_6VecMapNtNtNtCse0ISAJPynz5_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateEINtNtNtCshZc3FwCJ069_4core3ops5index5IndexRBI_E5indexBO_:
  280|   143k|    fn index(&self, key: &'a Q) -> &Self::Output {
  281|   143k|        self.get(key).unwrap()
  282|   143k|    }
_RNvXs8_CsldiL0x81zBv_10vector_mapQINtB5_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB1l_:
  302|  41.0k|    fn into_iter(self) -> Self::IntoIter {
  303|  41.0k|        self.iter_mut()
  304|  41.0k|    }
_RNvXs9_CsldiL0x81zBv_10vector_mapINtB5_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1k_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB1k_:
  310|  41.0k|    fn into_iter(self) -> Self::IntoIter {
  311|  41.0k|        IntoIter {
  312|  41.0k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  313|  41.0k|        }
  314|  41.0k|    }
_RNvXsa_CsldiL0x81zBv_10vector_mapINtB5_8IntoIterINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1m_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB1m_:
  325|  66.8k|    fn next(&mut self) -> Option<(K, V)> {
  326|  66.8k|        self.iter.next()
  327|  66.8k|    }
_RNvXsa_CsldiL0x81zBv_10vector_mapINtB5_8IntoIterINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1m_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator9size_hintB1m_:
  329|  41.0k|    fn size_hint(&self) -> (usize, Option<usize>) {
  330|  41.0k|        self.iter.size_hint()
  331|  41.0k|    }
_RNvXsr_CsldiL0x81zBv_10vector_mapINtB5_7IterMutINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCse0ISAJPynz5_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB1l_:
  497|  66.8k|            fn next(&mut self) -> Option<Self::Item> {
  498|  66.8k|                self.iter.next()
  499|  66.8k|            }

_RNCNkNvNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons0_1__32RECURSIVE_COUNT_SupportedSegment0s_0B7_:
   96|  3.85k|                    |init| {
   97|  3.85k|                        #[thread_local]
   98|  3.85k|                        static VAL: LazyStorage<$t, !> = LazyStorage::new();
   99|  3.85k|                        VAL.get_or_init(init, __init)
  100|  3.85k|                    }
_RNCNkNvNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons1_1__33RECURSIVE_COUNT_SupportedSelector0s_0B7_:
   96|  3.90k|                    |init| {
   97|  3.90k|                        #[thread_local]
   98|  3.90k|                        static VAL: LazyStorage<$t, !> = LazyStorage::new();
   99|  3.90k|                        VAL.get_or_init(init, __init)
  100|  3.90k|                    }
_RNCNkNvNvNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtBd_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary1__24RECURSIVE_COUNT_RawValue0s_0Bd_:
   96|  1.94k|                    |init| {
   97|  1.94k|                        #[thread_local]
   98|  1.94k|                        static VAL: LazyStorage<$t, !> = LazyStorage::new();
   99|  1.94k|                        VAL.get_or_init(init, __init)
  100|  1.94k|                    }
_RNvNvNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons0_1__32RECURSIVE_COUNT_SupportedSegment6___initB5_:
   79|      1|        fn __init() -> $t {
   80|      1|            $init
   81|      1|        }
_RNvNvNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons1_1__33RECURSIVE_COUNT_SupportedSelector6___initB5_:
   79|      1|        fn __init() -> $t {
   80|      1|            $init
   81|      1|        }
_RNvNvNvNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtBb_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary1__24RECURSIVE_COUNT_RawValue6___initBb_:
   79|      1|        fn __init() -> $t {
   80|      1|            $init
   81|      1|        }

_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  164|  2.65k|    pub fn new(query: &JsonPathQuery) -> Result<Self, CompilerError> {
  165|  2.65k|        let nfa = NondeterministicAutomaton::new(query)?;
  166|       |        debug!("NFA: {}", nfa);
  167|  2.65k|        Self::minimize(nfa)
  168|  2.65k|    }
_RNvMs2_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_15ArrayTransition12target_state:
  113|  68.8k|    pub(crate) fn target_state(&self) -> State {
  114|  68.8k|        self.target
  115|  68.8k|    }
_RNvMs2_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_15ArrayTransition7matches:
  118|  11.3k|    pub(crate) fn matches(&self, index: JsonUInt) -> bool {
  119|  11.3k|        self.label.matches(index)
  120|  11.3k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton10is_unitary:
  391|  25.9k|    pub fn is_unitary(&self, state: State) -> bool {
  392|  25.9k|        self[state].attributes.is_unitary()
  393|  25.9k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton12is_accepting:
  268|   119k|    pub fn is_accepting(&self, state: State) -> bool {
  269|   119k|        self[state].attributes.is_accepting()
  270|   119k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton12is_rejecting:
  370|  23.4k|    pub fn is_rejecting(&self, state: State) -> bool {
  371|  23.4k|        self[state].attributes.is_rejecting()
  372|  23.4k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton13initial_state:
  251|  4.04k|    pub fn initial_state(&self) -> State {
  252|  4.04k|        State(1)
  253|  4.04k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton14is_empty_query:
  221|  2.02k|    pub fn is_empty_query(&self) -> bool {
  222|  2.02k|        self.states.len() == 2
  223|      0|            && self.states[1].array_transitions.is_empty()
  224|      0|            && self.states[1].member_transitions.is_empty()
  225|      0|            && self.states[1].fallback_state == State(0)
  226|      0|            && !self.states[1].attributes.is_accepting()
  227|  2.02k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton20is_select_root_query:
  190|  2.61k|    pub fn is_select_root_query(&self) -> bool {
  191|  2.61k|        self.states.len() == 2
  192|    591|            && self.states[1].array_transitions.is_empty()
  193|    591|            && self.states[1].member_transitions.is_empty()
  194|    591|            && self.states[1].fallback_state == State(0)
  195|    591|            && self.states[1].attributes.is_accepting()
  196|  2.61k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton27has_transition_to_accepting:
  353|  22.5k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  354|  22.5k|        self[state].attributes.has_transition_to_accepting()
  355|  22.5k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton29has_any_array_item_transition:
  285|  35.7k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  286|  35.7k|        self[state].attributes.has_array_transition()
  287|  35.7k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  331|  8.39k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &JsonUInt) -> bool {
  332|  8.39k|        let state = &self[state];
  333|  8.39k|        state.attributes.has_array_transition_to_accepting()
  334|  4.14k|            && state
  335|  4.14k|                .array_transitions()
  336|  4.14k|                .iter()
  337|  4.14k|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
  338|  8.39k|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton45has_first_array_index_transition_to_accepting:
  310|  6.14k|    pub fn has_first_array_index_transition_to_accepting(&self, state: State) -> bool {
  311|  6.14k|        self.has_array_index_transition_to_accepting(state, &JsonUInt::ZERO)
  312|  6.14k|    }
_RNvMs7_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_10StateTable14fallback_state:
  407|   103k|    pub fn fallback_state(&self) -> State {
  408|   103k|        self.fallback_state
  409|   103k|    }
_RNvMs7_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_10StateTable17array_transitions:
  417|  23.4k|    pub fn array_transitions(&self) -> &[ArrayTransition] {
  418|  23.4k|        &self.array_transitions
  419|  23.4k|    }
_RNvMs7_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_10StateTable18member_transitions:
  427|  27.2k|    pub fn member_transitions(&self) -> &[MemberTransition] {
  428|  27.2k|        &self.member_transitions
  429|  27.2k|    }
_RNvXs1_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9AutomatonINtNtNtCshZc3FwCJ069_4core3ops5index5IndexNtNtB5_5state5StateE5index:
  102|   385k|    fn index(&self, index: State) -> &Self::Output {
  103|   385k|        &self.states[index.0 as usize]
  104|   385k|    }
_RNCNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB7_9Automaton39has_array_index_transition_to_accepting0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  337|  5.18k|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
_RNvXNtCse0ISAJPynz5_8rsonpath9automatonNtB2_10StateTableNtNtCshZc3FwCJ069_4core7default7Default7defaultB4_:
   69|  43.2k|    fn default() -> Self {
   70|  43.2k|        Self {
   71|  43.2k|            attributes: StateAttributes::default(),
   72|  43.2k|            member_transitions: SmallVec::default(),
   73|  43.2k|            array_transitions: SmallVec::default(),
   74|  43.2k|            fallback_state: State(0),
   75|  43.2k|        }
   76|  43.2k|    }
_RNvMs2_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_15ArrayTransition3new:
  108|  35.7k|    pub(crate) fn new(label: ArrayTransitionLabel, target: State) -> Self {
  109|  35.7k|        Self { label, target }
  110|  35.7k|    }
_RNvMs3_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_20ArrayTransitionLabel7matches:
  124|  11.3k|    pub(crate) fn matches(&self, index: JsonUInt) -> bool {
  125|  11.3k|        match self {
  126|  11.3k|            Self::Index(i) => index.eq(i),
  127|      0|            Self::Slice(s) => s.contains(index),
  128|       |        }
  129|  11.3k|    }
_RNvMs3_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_20ArrayTransitionLabel20matches_at_most_once:
  131|    148|    fn matches_at_most_once(&self) -> bool {
  132|    148|        match self {
  133|    148|            Self::Index(_) => true,
  134|      0|            Self::Slice(slice) => {
  135|      0|                slice.step == JsonUInt::ZERO && slice.end.map_or(false, |end| slice.start.as_u64() + 1 >= end.as_u64())
  136|       |            }
  137|       |        }
  138|    148|    }
_RNvMs6_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_9Automaton8minimize:
  395|  2.65k|    fn minimize(nfa: NondeterministicAutomaton) -> Result<Self, CompilerError> {
  396|  2.65k|        minimizer::minimize(nfa)
  397|  2.65k|    }
_RNvMsa_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_11SimpleSlice3new:
  524|  3.40k|    fn new(start: JsonUInt, end: Option<JsonUInt>, step: JsonUInt) -> Self {
  525|  3.40k|        Self { start, end, step }
  526|  3.40k|    }
_RNvXs4_NtCse0ISAJPynz5_8rsonpath9automatonNtB5_20ArrayTransitionLabelINtNtCshZc3FwCJ069_4core7convert4FromNtNtCs6zVzifqCO6f_15rsonpath_syntax3num8JsonUIntE4from:
  143|  5.41k|    fn from(index: JsonUInt) -> Self {
  144|  5.41k|        Self::Index(index)
  145|  5.41k|    }

_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet3new:
   80|  41.0k|    pub(super) fn new() -> Self {
   81|  41.0k|        Self {
   82|  41.0k|            transitions: HashMap::new(),
   83|  41.0k|        }
   84|  41.0k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet14add_transition:
   86|  37.3k|    pub(super) fn add_transition(&mut self, label: ArrayTransitionLabel, target: SmallSet256) {
   87|       |        use std::collections::hash_map::Entry;
   88|  37.3k|        let Some(label) = LinearSet::from_label(label) else {
   89|      0|            return;
   90|       |        };
   91|  37.3k|        let overlaps: Vec<_> = self
   92|  37.3k|            .transitions
   93|  37.3k|            .iter()
   94|  37.3k|            .filter_map(|(other, trans)| {
   95|       |                let overlap = other.overlap_with(&label)?;
   96|       |                let priority = trans.priority + 1;
   97|       |                let mut overlap_target = target;
   98|       |                overlap_target.union(&trans.target);
   99|       |
  100|       |                Some((overlap, LinearSetTransition { priority, target }))
  101|  37.3k|            })
  102|  37.3k|            .collect();
  103|       |
  104|  42.7k|        for (label, trans) in overlaps {
  105|  5.49k|            match self.transitions.entry(label) {
  106|  2.08k|                Entry::Occupied(mut entry) => {
  107|  2.08k|                    let entry = entry.get_mut();
  108|  2.08k|                    entry.priority = std::cmp::max(entry.priority, trans.priority);
  109|  2.08k|                    entry.target.union(&trans.target);
  110|  2.08k|                }
  111|  3.40k|                Entry::Vacant(entry) => {
  112|  3.40k|                    entry.insert(trans);
  113|  3.40k|                }
  114|       |            }
  115|       |        }
  116|       |
  117|  37.3k|        match self.transitions.entry(label) {
  118|       |            // Label overlapped (entirely) with some existing label, so it is already handled.
  119|  4.94k|            Entry::Occupied(_) => (),
  120|  32.3k|            Entry::Vacant(entry) => {
  121|  32.3k|                entry.insert(LinearSetTransition { priority: 1, target });
  122|  32.3k|            }
  123|       |        }
  124|  37.3k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet10states_mut:
  126|  41.0k|    pub(super) fn states_mut(&mut self) -> impl Iterator<Item = &mut SmallSet256> {
  127|  41.0k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
  128|  41.0k|    }
_RNvMs_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB4_26ArrayTransitionSetIterator3new:
  132|  41.0k|    fn new(mut transitions: Vec<(LinearSet, LinearSetTransition)>) -> Self {
  133|  41.0k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
  134|  41.0k|        Self {
  135|  41.0k|            transitions: transitions.into_iter(),
  136|  41.0k|        }
  137|  41.0k|    }
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB5_18ArrayTransitionSetNtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iter:
  145|  41.0k|    fn into_iter(self) -> Self::IntoIter {
  146|  41.0k|        ArrayTransitionSetIterator::new(self.transitions.into_iter().collect())
  147|  41.0k|    }
_RNvXs1_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB5_26ArrayTransitionSetIteratorNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  153|  76.7k|    fn next(&mut self) -> Option<Self::Item> {
  154|  76.7k|        let (label, transition) = self.transitions.next()?;
  155|  35.7k|        Some(match label {
  156|  32.3k|            LinearSet::Singleton(idx) => (ArrayTransitionLabel::Index(idx), transition.target),
  157|      0|            LinearSet::BoundedSlice(start, end, step) => (
  158|      0|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, Some(end), step)),
  159|      0|                transition.target,
  160|      0|            ),
  161|  3.40k|            LinearSet::OpenEndedSlice(start, step) => (
  162|  3.40k|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, None, step)),
  163|  3.40k|                transition.target,
  164|  3.40k|            ),
  165|       |        })
  166|  76.7k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB5_9LinearSet10from_label:
  170|  37.3k|    fn from_label(label: ArrayTransitionLabel) -> Option<Self> {
  171|  37.3k|        match label {
  172|  37.3k|            ArrayTransitionLabel::Index(idx) => Some(Self::Singleton(idx)),
  173|      0|            ArrayTransitionLabel::Slice(slice) => {
  174|      0|                if slice.step == JsonUInt::ZERO {
  175|      0|                    None
  176|      0|                } else if let Some(end) = slice.end {
  177|      0|                    if slice.start >= end {
  178|      0|                        None
  179|      0|                    } else if slice.start.as_u64().saturating_add(slice.step.as_u64()) >= end.as_u64() {
  180|       |                        // Only one item within the slice.
  181|      0|                        Some(Self::Singleton(slice.start))
  182|       |                    } else {
  183|      0|                        debug_assert!(end > JsonUInt::ZERO);
  184|      0|                        Some(Self::BoundedSlice(slice.start, end, slice.step))
  185|       |                    }
  186|       |                } else {
  187|      0|                    Some(Self::OpenEndedSlice(slice.start, slice.step))
  188|       |                }
  189|       |            }
  190|       |        }
  191|  37.3k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB5_9LinearSet10from_slice:
  193|  18.4k|    fn from_slice(start: JsonUInt, end: Option<JsonUInt>, step: JsonUInt) -> Option<Self> {
  194|  18.4k|        if step == JsonUInt::ZERO {
  195|      0|            None
  196|  18.4k|        } else if let Some(end) = end {
  197|  14.0k|            if start >= end {
  198|  13.0k|                None
  199|    995|            } else if start.as_u64().saturating_add(step.as_u64()) >= end.as_u64() {
  200|       |                // Only one item within the slice.
  201|    995|                Some(Self::Singleton(start))
  202|       |            } else {
  203|      0|                debug_assert!(end > JsonUInt::ZERO);
  204|      0|                Some(Self::BoundedSlice(start, end, step))
  205|       |            }
  206|       |        } else {
  207|  4.49k|            Some(Self::OpenEndedSlice(start, step))
  208|       |        }
  209|  18.4k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB5_9LinearSet12overlap_with:
  211|  25.5k|    fn overlap_with(&self, other: &Self) -> Option<Self> {
  212|  25.5k|        // Assume the first set starts not-later, otherwise flip.
  213|  25.5k|        if self.start() > other.start() {
  214|  7.01k|            return other.overlap_with(self);
  215|  18.4k|        }
  216|  18.4k|        // Empty sets are discarded on construction.
  217|  18.4k|        assert_ne!(self.step().as_u64(), 0);
  218|  18.4k|        assert_ne!(other.step().as_u64(), 0);
  219|       |
  220|       |        // First we take both sets as if they are open-ended and linear.
  221|       |        // We can take an overlap under that assumption and then simply apply the lower of the two end constraints,
  222|       |        // if any, to obtain the ultimate result.
  223|       |        //
  224|       |        // If first_element is beyond the range of JsonUInt it will fail conversion at the end of this function,
  225|       |        // and result in an empty set (empty transition = no transition). This is correct behavior - first element
  226|       |        // out of bounds means there are no valid elements.
  227|  18.4k|        let (first_element, gcd) = find_first_element(
  228|  18.4k|            self.start().into(),
  229|  18.4k|            self.step().into(),
  230|  18.4k|            other.start().into(),
  231|  18.4k|            other.step().into(),
  232|  18.4k|        )?;
  233|       |        // Perform the min of ends where None is treated as larger than everything.
  234|  18.4k|        let end = match (self.end_exclusive(), other.end_exclusive()) {
  235|  7.26k|            (None, Some(x)) | (Some(x), None) => Some(x),
  236|  4.49k|            (None, None) => None,
  237|  6.73k|            (Some(x), Some(y)) => Some(std::cmp::min(x, y)),
  238|       |        };
  239|       |        // This can also overflow both JsonUInt and u64. We saturate and then convert to JsonUInt.
  240|       |        // A step that fails this conversion is essentially infinite, which means we need to emit a set containing only the
  241|       |        // first_element.
  242|  18.4k|        let common_step = (self.step().as_u64() / gcd).saturating_mul(other.step().as_u64());
  243|       |
  244|  18.4k|        let start = JsonUInt::try_from(first_element).ok()?;
  245|       |
  246|  18.4k|        return match JsonUInt::try_from(common_step).ok() {
  247|  18.4k|            Some(step) => Self::from_slice(start, end, step),
  248|      0|            None if end.map_or(false, |end| end <= start) => None,
  249|      0|            None => Some(Self::Singleton(start)),
  250|       |        };
  251|       |
  252|       |        fn find_first_element(a: i64, k: i64, b: i64, l: i64) -> Option<(i64, u64)> {
  253|       |            // Now we have two sets, S1=[a::k] and S2=[b::l], a <= b.
  254|       |            // Clearly b \in S2 and every +l step is in S2.
  255|       |            // Now the difference between b and the next element of S1 is given by:
  256|       |            //     c = k - (b - a) mod k
  257|       |            // (note that this can be zero if b-a is a multiple of k, which makes sense)
  258|       |            //
  259|       |            // To get a common element we need to apply +l steps until we land in S1.
  260|       |            // We get the following equation:
  261|       |            //     c + lx = 0 mod k
  262|       |            // or
  263|       |            //     lx = -c mod k
  264|       |            //
  265|       |            // This is a linear congruence which has a known algorithm using extended Euclid.
  266|       |            let c = umod(k - (b - a), k);
  267|       |            let (jumps, gcd) = solve_linear_congruence(l, c, k)?;
  268|       |            Some((jumps.checked_mul(l)?.checked_add(b)?, gcd))
  269|       |        }
  270|  25.5k|    }
_RNvNvMs2_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB7_9LinearSet12overlap_with18find_first_element:
  252|  18.4k|        fn find_first_element(a: i64, k: i64, b: i64, l: i64) -> Option<(i64, u64)> {
  253|  18.4k|            // Now we have two sets, S1=[a::k] and S2=[b::l], a <= b.
  254|  18.4k|            // Clearly b \in S2 and every +l step is in S2.
  255|  18.4k|            // Now the difference between b and the next element of S1 is given by:
  256|  18.4k|            //     c = k - (b - a) mod k
  257|  18.4k|            // (note that this can be zero if b-a is a multiple of k, which makes sense)
  258|  18.4k|            //
  259|  18.4k|            // To get a common element we need to apply +l steps until we land in S1.
  260|  18.4k|            // We get the following equation:
  261|  18.4k|            //     c + lx = 0 mod k
  262|  18.4k|            // or
  263|  18.4k|            //     lx = -c mod k
  264|  18.4k|            //
  265|  18.4k|            // This is a linear congruence which has a known algorithm using extended Euclid.
  266|  18.4k|            let c = umod(k - (b - a), k);
  267|  18.4k|            let (jumps, gcd) = solve_linear_congruence(l, c, k)?;
  268|  18.4k|            Some((jumps.checked_mul(l)?.checked_add(b)?, gcd))
  269|  18.4k|        }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB5_9LinearSet5start:
  272|  88.0k|    fn start(&self) -> JsonUInt {
  273|  88.0k|        match self {
  274|  88.0k|            Self::Singleton(i) | Self::BoundedSlice(i, _, _) | Self::OpenEndedSlice(i, _) => *i,
  275|  88.0k|        }
  276|  88.0k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB5_9LinearSet13end_exclusive:
  278|  36.9k|    fn end_exclusive(&self) -> Option<JsonUInt> {
  279|  36.9k|        match self {
  280|  35.3k|            Self::Singleton(i) => JsonUInt::try_from(i.as_u64() + 1).ok(),
  281|      0|            Self::BoundedSlice(_, i, _) => Some(*i),
  282|  1.63k|            Self::OpenEndedSlice(_, _) => None,
  283|       |        }
  284|  36.9k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB5_9LinearSet4step:
  286|   110k|    fn step(&self) -> JsonUInt {
  287|   110k|        match self {
  288|   106k|            Self::Singleton(_) => JsonUInt::ONE,
  289|  4.91k|            Self::BoundedSlice(_, _, s) | Self::OpenEndedSlice(_, s) => *s,
  290|       |        }
  291|   110k|    }
_RNvNtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_set4umod:
  298|  55.4k|fn umod(x: i64, m: i64) -> i64 {
  299|  55.4k|    assert!(m > 0);
  300|  55.4k|    let k = x % m;
  301|  55.4k|    if k < 0 {
  302|      0|        m + k
  303|       |    } else {
  304|  55.4k|        k
  305|       |    }
  306|  55.4k|}
_RNvNtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_set23solve_linear_congruence:
  310|  18.4k|fn solve_linear_congruence(a: i64, b: i64, m: i64) -> Option<(i64, u64)> {
  311|  18.4k|    // If gcd(a, m) does not divide b mod m, then there are no solutions.
  312|  18.4k|    // Otherwise, find the (x,y) that solve ax - my = gcd(a, m)
  313|  18.4k|    // and take x*(b/gcd(a,m)) mod (m/gcd(a,m)) as the solution.
  314|  18.4k|    //
  315|  18.4k|    // Note that there may be multiple solutions if gcd(a, m) > 1,
  316|  18.4k|    // but this always gives the smallest one.
  317|  18.4k|    let b = umod(b, m);
  318|  18.4k|    let (x, gcd) = extended_euclid(a, m);
  319|  18.4k|
  320|  18.4k|    if b % gcd != 0 {
  321|      0|        None
  322|       |    } else {
  323|       |        Some((
  324|  18.4k|            umod(x.checked_mul(b / gcd)?, m / gcd),
  325|  18.4k|            u64::try_from(gcd).expect("negative gcd"),
  326|       |        ))
  327|       |    }
  328|  18.4k|}
_RNvNtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_set15extended_euclid:
  331|  18.4k|fn extended_euclid(a: i64, b: i64) -> (i64, i64) {
  332|  18.4k|    let (mut old_r, mut r) = (a, b);
  333|  18.4k|    let (mut old_x, mut x) = (1, 0);
  334|       |
  335|  36.9k|    while r != 0 {
  336|  18.4k|        let quotient = old_r / r;
  337|  18.4k|        (old_r, r) = (r, old_r - quotient * r);
  338|  18.4k|        (old_x, x) = (x, old_x - quotient * x);
  339|  18.4k|    }
  340|       |
  341|  18.4k|    (old_x, old_r)
  342|  18.4k|}
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB4_18ArrayTransitionSet14add_transition0B8_:
   94|  18.4k|            .filter_map(|(other, trans)| {
   95|  18.4k|                let overlap = other.overlap_with(&label)?;
   96|  5.49k|                let priority = trans.priority + 1;
   97|  5.49k|                let mut overlap_target = target;
   98|  5.49k|                overlap_target.union(&trans.target);
   99|  5.49k|
  100|  5.49k|                Some((overlap, LinearSetTransition { priority, target }))
  101|  18.4k|            })
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB4_18ArrayTransitionSet10states_mut0B8_:
  127|  35.7k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
_RNCNvMs_NtNtCse0ISAJPynz5_8rsonpath9automaton20array_transition_setNtB6_26ArrayTransitionSetIterator3new0Ba_:
  133|  12.7k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());

_RNvNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizer8minimize:
   22|  2.65k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   23|  2.65k|    let minimizer = Minimizer {
   24|  2.65k|        nfa,
   25|  2.65k|        superstates: VecMap::new(),
   26|  2.65k|        checkpoints: VecMap::new(),
   27|  2.65k|        active_superstates: smallvec![],
   28|  2.65k|        dfa_states: vec![],
   29|  2.65k|        accepting: SmallSet256::default(),
   30|  2.65k|    };
   31|  2.65k|
   32|  2.65k|    minimizer.run()
   33|  2.65k|}
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer3run:
   85|  2.65k|    fn run(mut self) -> Result<Automaton, CompilerError> {
   86|  2.65k|        // Rejecting state has no outgoing transitions except for a self-loop.
   87|  2.65k|        self.dfa_states.push(StateTable {
   88|  2.65k|            array_transitions: smallvec![],
   89|  2.65k|            member_transitions: smallvec![],
   90|  2.65k|            fallback_state: Self::rejecting_state(),
   91|  2.65k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   92|  2.65k|        });
   93|  2.65k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   94|  2.65k|
   95|  2.65k|        // Initial superstate is {0}.
   96|  2.65k|        let initial_superstate = [0].into();
   97|  2.65k|        self.activate_if_new(initial_superstate)?;
   98|       |
   99|  43.6k|        while let Some(superstate) = self.active_superstates.pop() {
  100|  41.0k|            self.process_superstate(superstate)?;
  101|       |        }
  102|       |
  103|  2.61k|        Ok(Automaton {
  104|  2.61k|            states: self.dfa_states,
  105|  2.61k|        })
  106|  2.65k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer15rejecting_state:
  108|  87.3k|    fn rejecting_state() -> DfaStateId {
  109|  87.3k|        DfaStateId(0)
  110|  87.3k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  114|   105k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  115|   105k|        if !self.superstates.contains_key(&superstate) {
  116|  43.3k|            let identifier = self
  117|  43.3k|                .superstates
  118|  43.3k|                .len()
  119|  43.3k|                .try_into()
  120|  43.3k|                .map(DfaStateId)
  121|  43.3k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  122|  43.2k|            self.superstates.insert(superstate, identifier);
  123|  43.2k|            self.active_superstates.push(superstate);
  124|  43.2k|            self.dfa_states.push(StateTable::default());
  125|  43.2k|            debug!("New superstate created: {superstate:?} {identifier}");
  126|  43.2k|            if superstate.contains(self.nfa.accepting_state().0) {
  127|  5.45k|                self.accepting.insert(identifier.0);
  128|  37.8k|            }
  129|  61.9k|        }
  130|       |
  131|   105k|        Ok(())
  132|   105k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer18process_superstate:
  136|  41.0k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  137|  41.0k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  138|       |        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  139|       |
  140|  41.0k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  141|       |        debug!("Raw transitions: {:?}", transitions);
  142|       |
  143|  41.0k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  144|       |        debug!("Normalized transitions: {:?}", transitions);
  145|       |
  146|       |        // Translate the transitions to the data model expected by TransitionTable.
  147|  41.0k|        let array_transitions = transitions
  148|  41.0k|            .array
  149|  41.0k|            .into_iter()
  150|  41.0k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
  151|  41.0k|            .collect::<SmallVec<_>>();
  152|  41.0k|        let member_transitions = transitions
  153|  41.0k|            .member
  154|  41.0k|            .into_iter()
  155|  41.0k|            .map(|(label, state)| (label, self.superstates[&state]))
  156|  41.0k|            .collect::<SmallVec<_>>();
  157|  41.0k|        debug!("Translated transitions (array): {array_transitions:?}");
  158|  41.0k|        debug!("Translated transitions (member): {member_transitions:?}");
  159|  41.0k|
  160|  41.0k|        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  161|  41.0k|        // Otherwise, we set the fallback to the rejecting state.
  162|  41.0k|        let id = self.superstates[&current_superstate];
  163|  41.0k|        let fallback_state = self.superstates[&transitions.wildcard];
  164|  41.0k|        let attributes = self.build_attributes(id, &array_transitions, &member_transitions, fallback_state);
  165|  41.0k|        let table = &mut self.dfa_states[id.0 as usize];
  166|  41.0k|        table.array_transitions = array_transitions;
  167|  41.0k|        table.member_transitions = member_transitions;
  168|  41.0k|        table.fallback_state = fallback_state;
  169|  41.0k|        table.attributes = attributes;
  170|  41.0k|
  171|  41.0k|        Ok(())
  172|  41.0k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer16build_attributes:
  176|  41.0k|    fn build_attributes(
  177|  41.0k|        &self,
  178|  41.0k|        id: DfaStateId,
  179|  41.0k|        array_transitions: &[ArrayTransition],
  180|  41.0k|        member_transitions: &[(Arc<StringPattern>, DfaStateId)],
  181|  41.0k|        fallback: DfaStateId,
  182|  41.0k|    ) -> StateAttributes {
  183|  41.0k|        let mut attrs = StateAttributesBuilder::new();
  184|  41.0k|
  185|  41.0k|        if self.accepting.contains(id.0) {
  186|  5.18k|            debug!("{id} is accepting");
  187|  5.18k|            attrs = attrs.accepting();
  188|  35.8k|        }
  189|  41.0k|        if id == Self::rejecting_state() {
  190|      0|            debug!("{id} is rejecting");
  191|      0|            attrs = attrs.rejecting();
  192|  41.0k|        }
  193|       |
  194|  41.0k|        if self.accepting.contains(fallback.0)
  195|  39.1k|            || array_transitions
  196|  39.1k|                .iter()
  197|  39.1k|                .any(|x| self.accepting.contains(x.target_state().0))
  198|  36.0k|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
  199|  7.71k|        {
  200|  7.71k|            debug!("{id} has transitions to accepting");
  201|  7.71k|            attrs = attrs.transitions_to_accepting();
  202|  33.2k|        }
  203|  41.0k|        if !array_transitions.is_empty() {
  204|  23.5k|            debug!("{id} has an array index transition");
  205|  23.5k|            attrs = attrs.has_array_transition();
  206|  23.5k|        }
  207|  41.0k|        if array_transitions
  208|  41.0k|            .iter()
  209|  41.0k|            .any(|x| self.accepting.contains(x.target_state().0))
  210|  3.95k|        {
  211|  3.95k|            debug!("{id} has an accepting array index transition");
  212|  3.95k|            attrs = attrs.has_array_transition_to_accepting();
  213|  37.0k|        }
  214|       |
  215|       |        // Unitarity check:
  216|       |        // 1. Fallback rejects.
  217|       |        // 2. Only one transition that can match at most one element in a JSON, either:
  218|       |        //   a) member transition; or
  219|       |        //   b) array transition that matches only one index.
  220|  41.0k|        let is_unitary = {
  221|  41.0k|            fallback == Self::rejecting_state()
  222|  1.96k|                && ((member_transitions.len() == 1 && array_transitions.is_empty())
  223|    998|                    || (array_transitions.len() == 1
  224|    148|                        && member_transitions.is_empty()
  225|    148|                        && array_transitions[0].label.matches_at_most_once()))
  226|       |        };
  227|  41.0k|        if is_unitary {
  228|  1.11k|            debug!("{id} is unitary");
  229|  1.11k|            attrs = attrs.unitary();
  230|  39.8k|        }
  231|       |
  232|  41.0k|        attrs.into()
  233|  41.0k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  238|  41.0k|    fn determine_checkpoint(&mut self, superstate: SmallSet256) -> Option<NfaStateId> {
  239|  41.0k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  240|  7.34k|            self.checkpoints.insert(superstate, nfa_state);
  241|  7.34k|            Some(nfa_state)
  242|       |        } else {
  243|  33.7k|            self.checkpoints.get(&superstate).copied()
  244|       |        }
  245|  41.0k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  249|  41.0k|    fn as_checkpoint(&self, superstate: SmallSet256) -> Option<NfaStateId> {
  250|  41.0k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  251|  9.47k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  252|  7.34k|                return Some(single_state);
  253|  2.13k|            }
  254|  31.5k|        }
  255|       |
  256|  33.7k|        None
  257|  41.0k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  261|  41.0k|    fn process_nfa_transitions(
  262|  41.0k|        &self,
  263|  41.0k|        current_superstate: SmallSet256,
  264|  41.0k|        current_checkpoint: Option<NfaStateId>,
  265|  41.0k|    ) -> Result<SuperstateTransitionTable, CompilerError> {
  266|  41.0k|        let mut wildcard_targets = current_superstate
  267|  41.0k|            .iter()
  268|  41.0k|            .map(NfaStateId)
  269|  41.0k|            .filter_map(|id| match self.nfa[id] {
  270|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  271|       |                    Some(id.next().map(|x| x.0))
  272|       |                }
  273|       |                _ => None,
  274|  41.0k|            })
  275|  41.0k|            .collect::<Result<SmallSet256, _>>()?;
  276|  41.0k|        if let Some(checkpoint) = current_checkpoint {
  277|  38.9k|            wildcard_targets.insert(checkpoint.0);
  278|  38.9k|        }
  279|       |
  280|       |        debug!("Wildcard target: {wildcard_targets:?}");
  281|       |
  282|  41.0k|        let mut transitions = SuperstateTransitionTable {
  283|  41.0k|            array: ArrayTransitionSet::new(),
  284|  41.0k|            member: VecMap::new(),
  285|  41.0k|            wildcard: wildcard_targets,
  286|  41.0k|        };
  287|       |
  288|   143k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  289|   143k|            match &self.nfa[nfa_state] {
  290|       |                // Direct states simply have a single transition to the next state in the NFA.
  291|       |                // Recursive transitions also have a self-loop, but that is handled by the
  292|       |                // checkpoints mechanism - here we only handle the forward transition.
  293|  26.8k|                NfaState::Direct(nfa::Transition::Member(label))
  294|  13.1k|                | NfaState::Recursive(nfa::Transition::Member(label)) => {
  295|       |                    debug!(
  296|       |                        "Considering member transition {nfa_state} --{}-> {}",
  297|       |                        std::str::from_utf8(label.unquoted()).unwrap_or("[invalid utf8]"),
  298|       |                        nfa_state.next()?,
  299|       |                    );
  300|       |                    // Add the target NFA state to the target superstate, or create a singleton
  301|       |                    // set if this is the first transition via this label encountered in the loop.
  302|  39.9k|                    if let Some(target) = transitions.member.get_mut(label) {
  303|  14.0k|                        target.insert(nfa_state.next()?.0);
  304|       |                    } else {
  305|  25.8k|                        let mut new_set = transitions.wildcard;
  306|  25.8k|                        new_set.insert(nfa_state.next()?.0);
  307|  25.8k|                        transitions.member.insert(label.clone(), new_set);
  308|       |                    }
  309|       |                }
  310|  15.6k|                NfaState::Direct(nfa::Transition::Array(label))
  311|  21.7k|                | NfaState::Recursive(nfa::Transition::Array(label)) => {
  312|       |                    // Array transitions are trickier, as they can have overlap. For example,
  313|       |                    // a transition over [5] overlaps with a transition over [3::2].
  314|       |                    // If the incoming transition does not overlap with anything then it's easy and analogous
  315|       |                    // to the member case - create a new singleton set with a single transition.
  316|       |                    // Otherwise we need to solve conflicts with - potentially many! - existing transitions.
  317|       |                    // Fortunately, the conflicts can be resolved one at a time.
  318|       |                    // Assume we're processing --t1--> {s1} and there already is a --t2-->S2 (where S2 is a superstate),
  319|       |                    // such that t1 overlaps with t2 (overlap(t1, t2) = t3).
  320|       |                    // The resolution is to have the following transitions:
  321|       |                    //   --t3--> S2+{s1}
  322|       |                    //   --(t1-t3)--> {s1}
  323|       |                    //   --(t2-t3)--> S2
  324|       |                    // If t1 and t2 are slices then t3 is easy to compute and is also a slice.
  325|       |                    // This is not the case for (t1-t3) or (t2-t3). Turns out this is actually a hard problem to solve.
  326|       |                    // We can do away with a trick, however. As long as the engine always processes transitions in order
  327|       |                    // and takes the first one that matches, it is enough for the procedure here to emit
  328|       |                    //   --t3--> S2+{s1}
  329|       |                    //   --t1--> {s1}
  330|       |                    //   --t2--> S2
  331|       |                    // and make sure the transition over t3 is put before the other two.
  332|       |                    // The ArrayTransitionTable does that by assigning priorities to transitions and sorting them accordingly.
  333|       |                    debug!(
  334|       |                        "Considering array transition {nfa_state} --{}-> {}",
  335|       |                        label,
  336|       |                        nfa_state.next()?,
  337|       |                    );
  338|  37.3k|                    let mut new_set = transitions.wildcard;
  339|  37.3k|                    new_set.insert(nfa_state.next()?.0);
  340|  37.3k|                    transitions.array.add_transition(*label, new_set);
  341|       |                }
  342|       |                NfaState::Direct(nfa::Transition::Wildcard)
  343|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  344|  66.6k|                | NfaState::Accepting => (),
  345|       |            }
  346|       |        }
  347|       |
  348|  41.0k|        Ok(transitions)
  349|  41.0k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  353|  41.0k|    fn normalize_superstate_transitions(
  354|  41.0k|        &mut self,
  355|  41.0k|        transitions: &mut SuperstateTransitionTable,
  356|  41.0k|        current_checkpoint: Option<NfaStateId>,
  357|  41.0k|    ) -> Result<(), CompilerError> {
  358|       |        fn normalize_one(
  359|       |            this: &mut Minimizer,
  360|       |            state: &mut SmallSet256,
  361|       |            current_checkpoint: Option<NfaStateId>,
  362|       |        ) -> Result<(), CompilerError> {
  363|       |            if let Some(checkpoint) = current_checkpoint {
  364|       |                state.insert(checkpoint.0);
  365|       |            }
  366|       |
  367|       |            this.normalize(state);
  368|       |            this.activate_if_new(*state)?;
  369|       |
  370|       |            if let Some(checkpoint) = current_checkpoint {
  371|       |                this.checkpoints.insert(*state, checkpoint);
  372|       |            }
  373|       |
  374|       |            Ok(())
  375|       |        }
  376|       |
  377|  41.0k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  378|  66.8k|        for (_, state) in &mut transitions.member {
  379|  25.8k|            normalize_one(self, state, current_checkpoint)?;
  380|       |        }
  381|  41.0k|        for state in &mut transitions.array.states_mut() {
  382|  35.7k|            normalize_one(self, state, current_checkpoint)?;
  383|       |        }
  384|       |
  385|  41.0k|        Ok(())
  386|  41.0k|    }
_RNvNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  358|   102k|        fn normalize_one(
  359|   102k|            this: &mut Minimizer,
  360|   102k|            state: &mut SmallSet256,
  361|   102k|            current_checkpoint: Option<NfaStateId>,
  362|   102k|        ) -> Result<(), CompilerError> {
  363|   102k|            if let Some(checkpoint) = current_checkpoint {
  364|  99.3k|                state.insert(checkpoint.0);
  365|  99.3k|            }
  366|       |
  367|   102k|            this.normalize(state);
  368|   102k|            this.activate_if_new(*state)?;
  369|       |
  370|   102k|            if let Some(checkpoint) = current_checkpoint {
  371|  99.3k|                this.checkpoints.insert(*state, checkpoint);
  372|  99.3k|            }
  373|       |
  374|   102k|            Ok(())
  375|   102k|        }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB2_9Minimizer9normalize:
  391|   102k|    fn normalize(&self, superstate: &mut SmallSet256) {
  392|   102k|        let furthest_checkpoint = superstate
  393|   102k|            .iter()
  394|   102k|            .map(NfaStateId)
  395|   102k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  396|   102k|            .max();
  397|       |
  398|   102k|        if let Some(cutoff) = furthest_checkpoint {
  399|  99.5k|            superstate.remove_all_before(cutoff.0);
  400|  99.5k|        }
  401|   102k|    }
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer15activate_if_new0B8_:
  121|     41|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstate0B8_:
  150|  35.7k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstates_0B8_:
  155|  25.8k|            .map(|(label, state)| (label, self.superstates[&state]))
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributes0B8_:
  197|  32.6k|                .any(|x| self.accepting.contains(x.target_state().0))
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributess_0B8_:
  198|  25.0k|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributess0_0B8_:
  209|  33.4k|            .any(|x| self.accepting.contains(x.target_state().0))
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0B8_:
  269|   143k|            .filter_map(|id| match self.nfa[id] {
  270|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  271|  61.4k|                    Some(id.next().map(|x| x.0))
  272|       |                }
  273|  82.4k|                _ => None,
  274|   143k|            })
_RNCNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Ba_:
  271|  61.4k|                    Some(id.next().map(|x| x.0))
_RNCNvMNtNtCse0ISAJPynz5_8rsonpath9automaton9minimizerNtB4_9Minimizer9normalize0B8_:
  395|   331k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))

_RNCNvMs_NtNtCse0ISAJPynz5_8rsonpath9automaton3nfaNtB6_25NondeterministicAutomaton3new0Ba_:
   79|  17.4k|            .map(|segment| {
   80|  17.4k|                let selectors = segment.selectors();
   81|  17.4k|
   82|  17.4k|                if selectors.len() > 1 {
   83|      0|                    Err(UnsupportedFeatureError::multiple_selectors().into())
   84|       |                } else {
   85|  17.4k|                    let transition = match selectors.first() {
   86|  8.12k|                        Selector::Name(name) => {
   87|  8.12k|                            let pattern = match string_pattern_cache.entry(name) {
   88|  3.91k|                                Entry::Occupied(pat) => pat.get().clone(),
   89|  4.20k|                                Entry::Vacant(entry) => {
   90|  4.20k|                                    let pat = Arc::new(StringPattern::new(name));
   91|  4.20k|                                    entry.insert(pat.clone());
   92|  4.20k|                                    pat
   93|       |                                }
   94|       |                            };
   95|  8.12k|                            Ok::<_, CompilerError>(Transition::Member(pattern))
   96|       |                        }
   97|  3.95k|                        Selector::Wildcard => Ok(Transition::Wildcard),
   98|  5.41k|                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   99|      0|                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  100|      0|                        Selector::Slice(slice) => {
  101|      0|                            let start = match slice.start() {
  102|      0|                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
  103|      0|                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  104|      0|                            }?;
  105|      0|                            let end = match slice.end() {
  106|      0|                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
  107|      0|                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  108|      0|                                None => Ok(None),
  109|      0|                            }?;
  110|      0|                            let step = match slice.step() {
  111|      0|                                Step::Forward(step) => Ok::<_, CompilerError>(step),
  112|      0|                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  113|      0|                            }?;
  114|      0|                            let simple_slice = SimpleSlice::new(start, end, step);
  115|      0|                            Ok(Transition::Array(simple_slice.into()))
  116|       |                        }
  117|      0|                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  118|      0|                    }?;
  119|  17.4k|                    if segment.is_child() {
  120|  10.1k|                        Ok(Direct(transition))
  121|       |                    } else {
  122|  7.35k|                        Ok(Recursive(transition))
  123|       |                    }
  124|       |                }
  125|  17.4k|            })
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton3nfaNtB2_10NfaStateId4next:
   53|   138k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   54|   138k|        self.0
   55|   138k|            .checked_add(1)
   56|   138k|            .ok_or(CompilerError::QueryTooComplex(None))
   57|   138k|            .map(Self)
   58|   138k|    }
_RNvMs_NtNtCse0ISAJPynz5_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   70|  2.65k|    pub(super) fn new<'q>(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   71|       |        use rsonpath_syntax::{Index, Selector};
   72|       |        use std::collections::hash_map::Entry;
   73|       |
   74|  2.65k|        let mut string_pattern_cache: HashMap<&'q JsonString, Arc<StringPattern>> = HashMap::new();
   75|  2.65k|
   76|  2.65k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   77|  2.65k|            .segments()
   78|  2.65k|            .iter()
   79|  2.65k|            .map(|segment| {
   80|       |                let selectors = segment.selectors();
   81|       |
   82|       |                if selectors.len() > 1 {
   83|       |                    Err(UnsupportedFeatureError::multiple_selectors().into())
   84|       |                } else {
   85|       |                    let transition = match selectors.first() {
   86|       |                        Selector::Name(name) => {
   87|       |                            let pattern = match string_pattern_cache.entry(name) {
   88|       |                                Entry::Occupied(pat) => pat.get().clone(),
   89|       |                                Entry::Vacant(entry) => {
   90|       |                                    let pat = Arc::new(StringPattern::new(name));
   91|       |                                    entry.insert(pat.clone());
   92|       |                                    pat
   93|       |                                }
   94|       |                            };
   95|       |                            Ok::<_, CompilerError>(Transition::Member(pattern))
   96|       |                        }
   97|       |                        Selector::Wildcard => Ok(Transition::Wildcard),
   98|       |                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   99|       |                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  100|       |                        Selector::Slice(slice) => {
  101|       |                            let start = match slice.start() {
  102|       |                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
  103|       |                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  104|       |                            }?;
  105|       |                            let end = match slice.end() {
  106|       |                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
  107|       |                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  108|       |                                None => Ok(None),
  109|       |                            }?;
  110|       |                            let step = match slice.step() {
  111|       |                                Step::Forward(step) => Ok::<_, CompilerError>(step),
  112|       |                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  113|       |                            }?;
  114|       |                            let simple_slice = SimpleSlice::new(start, end, step);
  115|       |                            Ok(Transition::Array(simple_slice.into()))
  116|       |                        }
  117|       |                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  118|       |                    }?;
  119|       |                    if segment.is_child() {
  120|       |                        Ok(Direct(transition))
  121|       |                    } else {
  122|       |                        Ok(Recursive(transition))
  123|       |                    }
  124|       |                }
  125|  2.65k|            })
  126|  2.65k|            .collect();
  127|  2.65k|        let mut states = states_result?;
  128|       |
  129|  2.65k|        states.push(Accepting);
  130|  2.65k|
  131|  2.65k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
  132|  2.65k|        if let Err(err) = accepting_state {
  133|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
  134|       |        } else {
  135|  2.65k|            Ok(Self { ordered_states: states })
  136|       |        }
  137|  2.65k|    }
_RNvMs_NtNtCse0ISAJPynz5_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
  139|  43.2k|    pub(super) fn accepting_state(&self) -> NfaStateId {
  140|  43.2k|        // CAST: safe because of the check in `new`.
  141|  43.2k|        NfaStateId((self.ordered_states.len() - 1) as u8)
  142|  43.2k|    }
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCshZc3FwCJ069_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  148|   629k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  149|   629k|        &self.ordered_states[index.0 as usize]
  150|   629k|    }

_RNCNvXNtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB4_11SmallSet256INtB4_8SmallSethE9singleton0B8_:
   85|    591|            self.half_2.singleton().map(|x| x + 128)
_RNvXs_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB4_11SmallSet256INtNtCshZc3FwCJ069_4core7convert4FromAhj1_E4fromB8_:
  200|  2.65k|    fn from(arr: [u8; N]) -> Self {
  201|  2.65k|        Self::from_iter(arr)
  202|  2.65k|    }
_RINvXs4_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBa_:
  234|  2.65k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  235|  2.65k|        let mut result = Self::default();
  236|  5.31k|        for elem in iter {
  237|  2.65k|            result.insert(elem);
  238|  2.65k|        }
  239|  2.65k|        result
  240|  2.65k|    }
_RINvXs4_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1g_8adapters12GenericShuntINtNtB2o_10filter_map9FilterMapINtNtB2o_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4v_9Minimizer23process_nfa_transitions0EINtNtB1i_6result6ResultNtNtB1i_7convert10InfallibleNtNtB8_5error13CompilerErrorEEEBa_:
  234|  41.0k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  235|  41.0k|        let mut result = Self::default();
  236|   102k|        for elem in iter {
  237|  61.4k|            result.insert(elem);
  238|  61.4k|        }
  239|  41.0k|        result
  240|  41.0k|    }
_RNCNvXs6_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Bb_:
  259|   194k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNCNCNvXs6_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB9_15SmallSet256IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next00Bd_:
  259|  9.58k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXNtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   55|   285k|    fn insert(&mut self, elem: u8) {
   56|   285k|        if elem < 128 {
   57|   278k|            self.half_1.insert(elem)
   58|       |        } else {
   59|  6.50k|            self.half_2.insert(elem - 128)
   60|       |        }
   61|   285k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE5union:
   63|  7.58k|    fn union(&mut self, other: &Self) {
   64|  7.58k|        self.half_1.union(&other.half_1);
   65|  7.58k|        self.half_2.union(&other.half_2);
   66|  7.58k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   68|   216k|    fn contains(&self, elem: u8) -> bool {
   69|   216k|        if elem < 128 {
   70|   170k|            self.half_1.contains(elem)
   71|       |        } else {
   72|  45.7k|            self.half_2.contains(elem - 128)
   73|       |        }
   74|   216k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iter:
   76|   184k|    fn iter(&self) -> SmallSet256Iter {
   77|   184k|        SmallSet256Iter {
   78|   184k|            half_1: self.half_1.iter(),
   79|   184k|            half_2: self.half_2.iter(),
   80|   184k|        }
   81|   184k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   83|  41.0k|    fn singleton(&self) -> Option<u8> {
   84|  41.0k|        if self.half_1.is_empty() {
   85|    983|            self.half_2.singleton().map(|x| x + 128)
   86|  40.0k|        } else if self.half_2.is_empty() {
   87|  39.7k|            self.half_1.singleton()
   88|       |        } else {
   89|    320|            None
   90|       |        }
   91|  41.0k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   98|  99.5k|    fn remove_all_before(&mut self, cutoff: u8) {
   99|  99.5k|        if cutoff < 128 {
  100|  97.3k|            self.half_1.remove_all_before(cutoff)
  101|  2.23k|        } else {
  102|  2.23k|            self.half_1.clear();
  103|  2.23k|            self.half_2.remove_all_before(cutoff - 128);
  104|  2.23k|        }
  105|  99.5k|    }
_RNvXs6_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  258|   804k|    fn next(&mut self) -> Option<Self::Item> {
  259|   804k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  260|   804k|    }
_RNvXsd_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8is_empty:
  124|  81.1k|            fn is_empty(&self) -> bool {
  125|  81.1k|                self.bitmask == 0
  126|  81.1k|            }
_RNvXsd_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE6insert:
  128|   285k|            fn insert(&mut self, elem: u8) {
  129|   285k|                self.bitmask |= 1 << elem;
  130|   285k|            }
_RNvXsd_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE5union:
  132|  15.1k|            fn union(&mut self, other: &Self) {
  133|  15.1k|                self.bitmask |= other.bitmask;
  134|  15.1k|            }
_RNvXsd_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8contains:
  136|   216k|            fn contains(&self, elem: u8) -> bool {
  137|   216k|                (self.bitmask & (1 << elem)) != 0
  138|   216k|            }
_RNvXsd_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE4iter:
  140|   369k|            fn iter(&self) -> $iter {
  141|   369k|                $iter {
  142|   369k|                    bitmask: self.bitmask,
  143|   369k|                }
  144|   369k|            }
_RNvXsd_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE9singleton:
  146|  40.7k|            fn singleton(&self) -> Option<u8> {
  147|  40.7k|                let elem = self.bitmask.trailing_zeros();
  148|  40.7k|                let elem_mask = (1 as $mask).wrapping_shl(elem);
  149|  40.7k|                let remainder = self.bitmask ^ elem_mask;
  150|  40.7k|
  151|  40.7k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  152|  40.7k|                (remainder == 0).then_some(elem as u8)
  153|  40.7k|            }
_RNvXsd_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE5clear:
  155|  2.23k|            fn clear(&mut self) {
  156|  2.23k|                self.bitmask = 0;
  157|  2.23k|            }
_RNvXsd_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE17remove_all_before:
  159|  99.5k|            fn remove_all_before(&mut self, cutoff: u8) {
  160|  99.5k|                let mask: $mask = <$mask>::MAX << cutoff;
  161|  99.5k|                self.bitmask &= mask;
  162|  99.5k|            }
_RNvXsf_NtNtCse0ISAJPynz5_8rsonpath9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  177|   998k|            fn next(&mut self) -> Option<Self::Item> {
  178|   998k|                let next_elem = self.bitmask.trailing_zeros();
  179|   998k|
  180|   998k|                if next_elem == $size {
  181|   379k|                    return None;
  182|   619k|                }
  183|   619k|
  184|   619k|                let elem_mask = 1 << next_elem;
  185|   619k|                self.bitmask ^= elem_mask;
  186|   619k|
  187|   619k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  188|   619k|                Some(next_elem as u8)
  189|   998k|            }

_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB5_15StateAttributes10is_unitary:
  144|  25.9k|    pub fn is_unitary(&self) -> bool {
  145|  25.9k|        self.is_set(StateAttribute::Unitary)
  146|  25.9k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB5_15StateAttributes12is_accepting:
  119|   119k|    pub fn is_accepting(&self) -> bool {
  120|   119k|        self.is_set(StateAttribute::Accepting)
  121|   119k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB5_15StateAttributes12is_rejecting:
  127|  23.4k|    pub fn is_rejecting(&self) -> bool {
  128|  23.4k|        self.is_set(StateAttribute::Rejecting)
  129|  23.4k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB5_15StateAttributes20has_array_transition:
  151|  35.7k|    pub fn has_array_transition(&self) -> bool {
  152|  35.7k|        self.is_set(StateAttribute::HasArrayTransition)
  153|  35.7k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  135|  22.5k|    pub fn has_transition_to_accepting(&self) -> bool {
  136|  22.5k|        self.is_set(StateAttribute::TransitionsToAccepting)
  137|  22.5k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB5_15StateAttributes33has_array_transition_to_accepting:
  159|  8.39k|    pub fn has_array_transition_to_accepting(&self) -> bool {
  160|  8.39k|        self.is_set(StateAttribute::HasArrayTransitionToAccepting)
  161|  8.39k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB5_15StateAttributes6is_set:
  165|   236k|    fn is_set(&self, attr: StateAttribute) -> bool {
  166|   236k|        (self.0 & attr as u8) != 0
  167|   236k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3new:
   38|  43.6k|    pub(crate) fn new() -> Self {
   39|  43.6k|        Self {
   40|  43.6k|            attrs: StateAttributes(0),
   41|  43.6k|        }
   42|  43.6k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9accepting:
   44|  5.18k|    pub(crate) fn accepting(self) -> Self {
   45|  5.18k|        self.set(StateAttribute::Accepting)
   46|  5.18k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9rejecting:
   48|  2.65k|    pub(crate) fn rejecting(self) -> Self {
   49|  2.65k|        self.set(StateAttribute::Rejecting)
   50|  2.65k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder7unitary:
   52|  1.11k|    pub(crate) fn unitary(self) -> Self {
   53|  1.11k|        self.set(StateAttribute::Unitary)
   54|  1.11k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_accepting:
   56|  7.71k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   57|  7.71k|        self.set(StateAttribute::TransitionsToAccepting)
   58|  7.71k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder20has_array_transition:
   60|  23.5k|    pub(crate) fn has_array_transition(self) -> Self {
   61|  23.5k|        self.set(StateAttribute::HasArrayTransition)
   62|  23.5k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder33has_array_transition_to_accepting:
   64|  3.95k|    pub(crate) fn has_array_transition_to_accepting(self) -> Self {
   65|  3.95k|        self.set(StateAttribute::HasArrayTransitionToAccepting)
   66|  3.95k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder5build:
   68|  43.6k|    pub(crate) fn build(self) -> StateAttributes {
   69|  43.6k|        self.attrs
   70|  43.6k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3set:
   72|  44.1k|    fn set(self, attr: StateAttribute) -> Self {
   73|  44.1k|        Self {
   74|  44.1k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   75|  44.1k|        }
   76|  44.1k|    }
_RNvXs_NtNtCse0ISAJPynz5_8rsonpath9automaton5stateNtB4_15StateAttributesINtNtCshZc3FwCJ069_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   81|  43.6k|    fn from(value: StateAttributesBuilder) -> Self {
   82|  43.6k|        value.build()
   83|  43.6k|    }

_RNvMNtCse0ISAJPynz5_8rsonpath14classificationINtB2_21ResumeClassifierStateINtNtNtB4_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1f_7padding19TwoSidesPaddedInputINtNtNtB4_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2H_5MatchEEKj40_EINtNtNtB2_6quotes7avx2_6421Avx2QuoteClassifier64B1a_EyKB43_E7get_idxCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   63|  3.21k|    pub(crate) fn get_idx(&self) -> usize {
   64|  3.21k|        debug!(
   65|  3.21k|            "iter offset: {}, block idx: {:?}",
   66|  3.21k|            self.iter.get_offset(),
   67|  3.21k|            self.block.as_ref().map(|b| b.idx)
   68|  3.21k|        );
   69|  3.21k|
   70|  3.21k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
   71|  3.21k|    }
_RNCNvMNtCse0ISAJPynz5_8rsonpath14classificationINtB4_21ResumeClassifierStateINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1h_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2J_5MatchEEKj40_EINtNtNtB4_6quotes7avx2_6421Avx2QuoteClassifier64B1c_EyKB45_E7get_idx0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
   70|  3.21k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)

_RINvYNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_6411ConstructorNtB7_9DepthImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1G_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB38_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1B_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   89|    510|    fn resume<'i, I, Q>(
   90|    510|        state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>,
   91|    510|        opening: BracketType,
   92|    510|    ) -> DepthIteratorResumeOutcome<'i, I, Q, Self::Classifier<'i, I, Q>, MaskType, BLOCK_SIZE>
   93|    510|    where
   94|    510|        I: InputBlockIterator<'i, BLOCK_SIZE>,
   95|    510|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   96|    510|    {
   97|    510|        let (first_block, iter) =
   98|    510|            <Self::Classifier<'i, I, Q> as DepthIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state, opening);
   99|    510|        DepthIteratorResumeOutcome(first_block, iter)
  100|    510|    }

_RINvNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_6410new_vectorRShECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   17|  2.03k|fn new_vector<'a, B: InputBlock<'a, SIZE>>(
   18|  2.03k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   19|  2.03k|    classifier: &DelimiterClassifierImpl256,
   20|  2.03k|) -> DepthVector64<'a, B> {
   21|  2.03k|    new_vector_from(bytes, classifier, 0)
   22|  2.03k|}
_RINvNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_6415new_vector_fromRShECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   25|  2.42k|fn new_vector_from<'a, B: InputBlock<'a, SIZE>>(
   26|  2.42k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   27|  2.42k|    classifier: &DelimiterClassifierImpl256,
   28|  2.42k|    idx: usize,
   29|  2.42k|) -> DepthVector64<'a, B> {
   30|  2.42k|    // SAFETY: target_feature invariant
   31|  2.42k|    unsafe { new_avx2(bytes, classifier, idx) }
   32|  2.42k|}
_RINvNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_648new_avx2RShECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   35|  2.42k|unsafe fn new_avx2<'a, B: InputBlock<'a, SIZE>>(
   36|  2.42k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   37|  2.42k|    classifier: &DelimiterClassifierImpl256,
   38|  2.42k|    start_idx: usize,
   39|  2.42k|) -> DepthVector64<'a, B> {
   40|  2.42k|    let idx_mask = 0xFFFF_FFFF_FFFF_FFFF_u64 << start_idx;
   41|  2.42k|    let (first_block, second_block) = bytes.block.halves();
   42|  2.42k|    let (first_opening_mask, first_closing_mask) = classifier.get_opening_and_closing_masks(first_block);
   43|  2.42k|    let (second_opening_mask, second_closing_mask) = classifier.get_opening_and_closing_masks(second_block);
   44|  2.42k|
   45|  2.42k|    let combined_opening_mask = m64::combine_32(first_opening_mask, second_opening_mask);
   46|  2.42k|    let combined_closing_mask = m64::combine_32(first_closing_mask, second_closing_mask);
   47|  2.42k|
   48|  2.42k|    let opening_mask = combined_opening_mask & (!bytes.within_quotes_mask) & idx_mask;
   49|  2.42k|    let closing_mask = combined_closing_mask & (!bytes.within_quotes_mask) & idx_mask;
   50|  2.42k|
   51|  2.42k|    DepthVector64 {
   52|  2.42k|        quote_classified: bytes,
   53|  2.42k|        opening_mask,
   54|  2.42k|        closing_mask,
   55|  2.42k|        opening_count: opening_mask.count_ones(),
   56|  2.42k|        depth: 0,
   57|  2.42k|        idx: 0,
   58|  2.42k|        phantom: PhantomData,
   59|  2.42k|    }
   60|  2.42k|}

_RNvXs0_NtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E4stopCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   54|    510|            fn stop(self, block: Option<Self::Block>) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
   55|    510|                let block_state = block.map(|b| {
   56|       |                    let idx = b.idx;
   57|       |                    debug!("Depth iterator stopping at index {idx}");
   58|       |                    ResumeClassifierBlockState {
   59|       |                        block: b.quote_classified,
   60|       |                        idx,
   61|       |                    }
   62|    510|                });
   63|    510|
   64|    510|                ResumeClassifierState {
   65|    510|                    iter: self.iter,
   66|    510|                    block: block_state,
   67|    510|                    are_commas_on: self.were_commas_on,
   68|    510|                    are_colons_on: self.were_colons_on,
   69|    510|                }
   70|    510|            }
_RNvXs_NtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_64INtB4_20Avx2VectorIterator64INtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1y_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB30_5MatchEEKj40_EINtNtNtB8_6quotes7avx2_6421Avx2QuoteClassifier64B1t_EENtBa_16FallibleIterator4nextCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   40|  2.03k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   41|  2.03k|                let quote_classified = self.iter.next()?;
   42|  2.03k|                Ok(quote_classified.map(|q| new_vector(q, &self.classifier)))
   43|  2.03k|            }
_RNCNvXs0_NtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E4stop0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
   55|    510|                let block_state = block.map(|b| {
   56|    510|                    let idx = b.idx;
   57|    510|                    debug!("Depth iterator stopping at index {idx}");
   58|    510|                    ResumeClassifierBlockState {
   59|    510|                        block: b.quote_classified,
   60|    510|                        idx,
   61|    510|                    }
   62|    510|                });
_RNCNvXs0_NtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E6resume0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
   78|    510|                let first_block = state.block.and_then(|b| {
   79|    510|                    if b.idx == $size {
   80|    122|                        None
   81|       |                    } else {
   82|    388|                        Some(new_vector_from(b.block, &classifier, b.idx))
   83|       |                    }
   84|    510|                });
_RNCNvXs_NtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_64INtB6_20Avx2VectorIterator64INtNtNtBc_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1A_7padding19TwoSidesPaddedInputINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB32_5MatchEEKj40_EINtNtNtBa_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EENtBc_16FallibleIterator4next0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
   42|  2.03k|                Ok(quote_classified.map(|q| new_vector(q, &self.classifier)))
_RNvXs0_NtNtNtCse0ISAJPynz5_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E6resumeCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   73|    510|            fn resume(
   74|    510|                state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>,
   75|    510|                opening: BracketType,
   76|    510|            ) -> (Option<Self::Block>, Self) {
   77|    510|                let classifier = $core::new(opening);
   78|    510|                let first_block = state.block.and_then(|b| {
   79|       |                    if b.idx == $size {
   80|       |                        None
   81|       |                    } else {
   82|       |                        Some(new_vector_from(b.block, &classifier, b.idx))
   83|       |                    }
   84|    510|                });
   85|    510|
   86|    510|                (
   87|    510|                    first_block,
   88|    510|                    $name {
   89|    510|                        iter: state.iter,
   90|    510|                        classifier,
   91|    510|                        phantom: PhantomData,
   92|    510|                        were_commas_on: state.are_commas_on,
   93|    510|                        were_colons_on: state.are_colons_on,
   94|    510|                    },
   95|    510|                )
   96|    510|            }

_RNvXNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock12depth_at_endCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   70|  1.91k|    fn depth_at_end(&self) -> isize {
   71|  1.91k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   72|  1.91k|        (((self.opening_count as i32) - self.closing_mask.count_ones() as i32) + self.depth) as isize
   73|  1.91k|    }
_RNvXNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30advance_to_next_depth_decreaseCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   31|  1.83k|    fn advance_to_next_depth_decrease(&mut self) -> bool {
   32|  1.83k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   33|  1.83k|        let next_closing = self.closing_mask.trailing_zeros() as usize;
   34|  1.83k|
   35|  1.83k|        if next_closing == SIZE {
   36|    203|            return false;
   37|  1.63k|        }
   38|  1.63k|
   39|  1.63k|        bin_u64!("opening_mask", self.opening_mask);
   40|  1.63k|        bin_u64!("closing_mask", self.closing_mask);
   41|  1.63k|
   42|  1.63k|        self.opening_mask >>= next_closing;
   43|  1.63k|        self.closing_mask >>= next_closing;
   44|  1.63k|        self.opening_mask >>= 1;
   45|  1.63k|        self.closing_mask >>= 1;
   46|  1.63k|
   47|  1.63k|        bin_u64!("new opening_mask", self.opening_mask);
   48|  1.63k|        bin_u64!("new closing_mask", self.closing_mask);
   49|  1.63k|
   50|  1.63k|        let new_opening_count = self.opening_mask.count_ones() as i32;
   51|  1.63k|        let delta = (self.opening_count as i32) - new_opening_count - 1;
   52|  1.63k|        self.opening_count = new_opening_count as u32;
   53|  1.63k|
   54|  1.63k|        debug!("next_closing: {next_closing}");
   55|  1.63k|        debug!("new_opening_count: {new_opening_count}");
   56|  1.63k|        debug!("delta: {delta}");
   57|  1.63k|
   58|  1.63k|        self.depth += delta;
   59|  1.63k|        self.idx += next_closing + 1;
   60|  1.63k|
   61|  1.63k|        true
   62|  1.83k|    }
_RNvXNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30estimate_lowest_possible_depthCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   81|  2.42k|    fn estimate_lowest_possible_depth(&self) -> isize {
   82|  2.42k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   83|  2.42k|        (self.depth - self.closing_mask.count_ones() as i32) as isize
   84|  2.42k|    }
_RNvXNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9add_depthCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   76|  2.42k|    fn add_depth(&mut self, depth: isize) {
   77|  2.42k|        self.depth += depth as i32;
   78|  2.42k|    }
_RNvXNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9get_depthCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   65|  1.63k|    fn get_depth(&self) -> isize {
   66|  1.63k|        self.depth as isize
   67|  1.63k|    }

_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612closing_mask:
   28|  4.84k|    unsafe fn closing_mask(&self) -> __m256i {
   29|  4.84k|        _mm256_set1_epi8(self.opening + 2)
   30|  4.84k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612opening_mask:
   23|  4.84k|    unsafe fn opening_mask(&self) -> __m256i {
   24|  4.84k|        _mm256_set1_epi8(self.opening)
   25|  4.84k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25629get_opening_and_closing_masksCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   34|  4.84k|    pub(crate) unsafe fn get_opening_and_closing_masks(&self, bytes: &[u8]) -> (u32, u32) {
   35|  4.84k|        assert_eq!(32, bytes.len());
   36|       |        // SAFETY: target_feature invariant
   37|       |        unsafe {
   38|  4.84k|            let byte_vector = _mm256_loadu_si256(bytes.as_ptr().cast::<__m256i>());
   39|  4.84k|            let opening_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.opening_mask());
   40|  4.84k|            let closing_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.closing_mask());
   41|  4.84k|            let opening_mask = _mm256_movemask_epi8(opening_brace_cmp) as u32;
   42|  4.84k|            let closing_mask = _mm256_movemask_epi8(closing_brace_cmp) as u32;
   43|  4.84k|
   44|  4.84k|            (opening_mask, closing_mask)
   45|  4.84k|        }
   46|  4.84k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl2563new:
   13|    510|    pub(crate) fn new(opening: BracketType) -> Self {
   14|    510|        let opening = match opening {
   15|     48|            BracketType::Square => b'[',
   16|    462|            BracketType::Curly => b'{',
   17|       |        };
   18|       |
   19|    510|        Self { opening: opening as i8 }
   20|    510|    }

_RINvXNtNtCse0ISAJPynz5_8rsonpath14classification4maskyNtB3_4Mask6is_litjECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   11|  3.00k|    fn is_lit<N>(&self, bit: N) -> bool
   12|  3.00k|    where
   13|  3.00k|        Self: Shl<N, Output = Self>,
   14|  3.00k|    {
   15|  3.00k|        (*self & (1 << bit)) != 0
   16|  3.00k|    }
_RNvNtNtNtCse0ISAJPynz5_8rsonpath14classification4mask3m6410combine_32:
   52|  83.7k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  83.7k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  83.7k|    }

_RNvMs_NtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2e_5MatchEEE10find_emptyCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   55|  1.91k|    unsafe fn find_empty(
   56|  1.91k|        &mut self,
   57|  1.91k|        label: &StringPattern,
   58|  1.91k|        mut offset: usize,
   59|  1.91k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   60|  1.91k|        let classifier = vector_256::BlockClassifier256::new(b'"', b'"');
   61|  1.91k|        let mut previous_block: u64 = 0;
   62|       |
   63|  5.36k|        while let Some(block) = self.iter.next().e()? {
   64|  4.92k|            let (block1, block2) = block.halves();
   65|  4.92k|            let classified1 = classifier.classify_block(block1);
   66|  4.92k|            let classified2 = classifier.classify_block(block2);
   67|  4.92k|
   68|  4.92k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
   69|  4.92k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
   70|  4.92k|
   71|  4.92k|            let mut result = (previous_block | (first_bitmask << 1)) & second_bitmask;
   72|  6.08k|            while result != 0 {
   73|  2.63k|                let idx = result.trailing_zeros() as usize;
   74|  2.63k|                if self
   75|  2.63k|                    .input
   76|  2.63k|                    .is_member_match(offset + idx - 1, offset + idx + 1, label)
   77|  2.63k|                    .e()?
   78|       |                {
   79|  1.47k|                    return Ok(Some((offset + idx - 1, block)));
   80|  1.15k|                }
   81|  1.15k|                result &= !(1 << idx);
   82|       |            }
   83|       |
   84|  3.44k|            offset += SIZE;
   85|  3.44k|            previous_block = first_bitmask >> (SIZE - 1);
   86|       |        }
   87|       |
   88|    441|        Ok(None)
   89|  1.91k|    }
_RNvMs_NtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2e_5MatchEEE11find_letterCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   95|    603|    unsafe fn find_letter(
   96|    603|        &mut self,
   97|    603|        label: &StringPattern,
   98|    603|        mut offset: usize,
   99|    603|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  100|    603|        let classifier = vector_256::BlockClassifier256::new(label.unquoted()[0], b'"');
  101|    603|        let mut previous_block: u64 = 0;
  102|       |
  103|  1.95k|        while let Some(block) = self.iter.next().e()? {
  104|  1.82k|            let (block1, block2) = block.halves();
  105|  1.82k|            let classified1 = classifier.classify_block(block1);
  106|  1.82k|            let classified2 = classifier.classify_block(block2);
  107|  1.82k|
  108|  1.82k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  109|  1.82k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  110|       |
  111|    480|            if let Some(res) =
  112|  1.82k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  113|       |            {
  114|    480|                return Ok(Some((res, block)));
  115|  1.34k|            }
  116|  1.34k|
  117|  1.34k|            offset += SIZE;
  118|  1.34k|            previous_block = first_bitmask >> (SIZE - 1);
  119|       |        }
  120|       |
  121|    123|        Ok(None)
  122|    603|    }
_RNvMs_NtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2e_5MatchEEE15find_label_avx2CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  125|  2.74k|    unsafe fn find_label_avx2(
  126|  2.74k|        &mut self,
  127|  2.74k|        label: &StringPattern,
  128|  2.74k|        mut offset: usize,
  129|  2.74k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  130|  2.74k|        if label.unquoted().is_empty() {
  131|  1.91k|            return self.find_empty(label, offset);
  132|    826|        } else if label.unquoted().len() == 1 {
  133|    603|            return self.find_letter(label, offset);
  134|    223|        }
  135|    223|
  136|    223|        let classifier = vector_256::BlockClassifier256::new(label.unquoted()[0], label.unquoted()[1]);
  137|    223|        let mut previous_block: u64 = 0;
  138|       |
  139|  1.65k|        while let Some(block) = self.iter.next().e()? {
  140|  1.52k|            let (block1, block2) = block.halves();
  141|  1.52k|            let classified1 = classifier.classify_block(block1);
  142|  1.52k|            let classified2 = classifier.classify_block(block2);
  143|  1.52k|
  144|  1.52k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  145|  1.52k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  146|       |
  147|     91|            if let Some(res) =
  148|  1.52k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  149|       |            {
  150|     91|                return Ok(Some((res, block)));
  151|  1.43k|            }
  152|  1.43k|
  153|  1.43k|            offset += SIZE;
  154|  1.43k|            previous_block = first_bitmask >> (SIZE - 1);
  155|       |        }
  156|       |
  157|    132|        Ok(None)
  158|  2.74k|    }
_RNvXs0_NtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem7avx2_64INtB5_22Avx2MemmemClassifier64NtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2f_5MatchEEEINtB7_6MemmemB1x_Kj40_E10find_labelCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  168|  6.22k|    fn find_label(
  169|  6.22k|        &mut self,
  170|  6.22k|        first_block: Option<I::Block<'i, SIZE>>,
  171|  6.22k|        start_idx: usize,
  172|  6.22k|        label: &StringPattern,
  173|  6.22k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  174|  6.22k|        if let Some(b) = first_block {
  175|  5.23k|            if let Some(res) = shared::find_label_in_first_block(self.input, b, start_idx, label)? {
  176|  3.48k|                return Ok(Some(res));
  177|  1.74k|            }
  178|    995|        }
  179|  2.74k|        let next_block_offset = self.iter.get_offset();
  180|  2.74k|        // SAFETY: target feature invariant
  181|  2.74k|        unsafe { self.find_label_avx2(label, next_block_offset) }
  182|  6.22k|    }
_RINvXNtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem7avx2_64NtB3_11ConstructorNtB5_10MemmemImpl6memmemNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2p_5MatchEEECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   20|  6.22k|    fn memmem<'i, 'b, 'r, I, R>(
   21|  6.22k|        input: &'i I,
   22|  6.22k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
   23|  6.22k|    ) -> Self::Classifier<'i, 'b, 'r, I, R>
   24|  6.22k|    where
   25|  6.22k|        I: Input,
   26|  6.22k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
   27|  6.22k|        'i: 'r,
   28|  6.22k|    {
   29|  6.22k|        Self::Classifier { input, iter }
   30|  6.22k|    }

_RINvNtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem6shared25find_label_in_first_blockNtNtNtB8_5input8borrowed13BorrowedBytesKj40_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   18|  5.23k|pub(crate) fn find_label_in_first_block<'i, 'r, I, const N: usize>(
   19|  5.23k|    input: &I,
   20|  5.23k|    first_block: I::Block<'i, N>,
   21|  5.23k|    start_idx: usize,
   22|  5.23k|    label: &StringPattern,
   23|  5.23k|) -> Result<Option<(usize, I::Block<'i, N>)>, InputError>
   24|  5.23k|where
   25|  5.23k|    I: Input,
   26|  5.23k|    'i: 'r,
   27|  5.23k|{
   28|  5.23k|    let block_idx = start_idx % N;
   29|  5.23k|    let label_size = label.quoted().len();
   30|       |
   31|  79.0k|    for (i, c) in first_block[block_idx..].iter().copied().enumerate() {
   32|  79.0k|        let j = start_idx + i;
   33|  79.0k|
   34|  79.0k|        if c == b'"' && input.is_member_match(j, j + label_size, label).e()? {
   35|  3.48k|            return Ok(Some((j, first_block)));
   36|  75.5k|        }
   37|       |    }
   38|       |
   39|  1.74k|    Ok(None)
   40|  5.23k|}

_RINvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem6shared7mask_6412find_in_maskNtNtNtBa_5input8borrowed13BorrowedBytesECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   11|  3.34k|pub(crate) fn find_in_mask<I: Input>(
   12|  3.34k|    input: &I,
   13|  3.34k|    label: &StringPattern,
   14|  3.34k|    previous_block: u64,
   15|  3.34k|    first: u64,
   16|  3.34k|    second: u64,
   17|  3.34k|    offset: usize,
   18|  3.34k|) -> Result<Option<usize>, InputError> {
   19|  3.34k|    let label_size = label.quoted().len();
   20|  3.34k|    let mut result = (previous_block | (first << 1)) & second;
   21|  8.31k|    while result != 0 {
   22|  5.53k|        let idx = result.trailing_zeros() as usize;
   23|  5.53k|        debug!("{offset} + {idx} - 2 to {offset} + {idx} + {label_size} - 3");
   24|  5.53k|        if offset + idx > 1
   25|  5.52k|            && input
   26|  5.52k|                .is_member_match(offset + idx - 2, offset + idx + label_size - 2, label)
   27|  5.52k|                .e()?
   28|       |        {
   29|    571|            return Ok(Some(offset + idx - 2));
   30|  4.96k|        }
   31|  4.96k|        result &= !(1 << idx);
   32|       |    }
   33|  2.77k|    Ok(None)
   34|  3.34k|}

_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier2563new:
   13|  2.74k|    pub(crate) unsafe fn new(first: u8, second: u8) -> Self {
   14|  2.74k|        Self {
   15|  2.74k|            first: _mm256_set1_epi8(first as i8),
   16|  2.74k|            second: _mm256_set1_epi8(second as i8),
   17|  2.74k|        }
   18|  2.74k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier25614classify_block:
   21|  16.5k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   22|  16.5k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   23|  16.5k|
   24|  16.5k|        let first_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.first);
   25|  16.5k|        let second_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.second);
   26|  16.5k|
   27|  16.5k|        let first = _mm256_movemask_epi8(first_cmp_vector) as u32;
   28|  16.5k|        let second = _mm256_movemask_epi8(second_cmp_vector) as u32;
   29|  16.5k|
   30|  16.5k|        BlockClassification256 { first, second }
   31|  16.5k|    }

_RINvMNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   22|  19.8k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   23|  19.8k|        block!(blocks[..64]);
   24|  19.8k|
   25|  19.8k|        let (block1, block2) = blocks.halves();
   26|  19.8k|        let classification1 = vector_256::classify_block(block1);
   27|  19.8k|        let classification2 = vector_256::classify_block(block2);
   28|  19.8k|
   29|  19.8k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   30|  19.8k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   31|  19.8k|
   32|  19.8k|        self.internal_classifier.classify(slashes, quotes)
   33|  19.8k|    }
_RNvMNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3new:
   15|  4.02k|    fn new() -> Self {
   16|  4.02k|        Self {
   17|  4.02k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   18|  4.02k|        }
   19|  4.02k|    }

_RNvXs0_NtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EENtBb_16FallibleIterator4nextCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   82|  17.3k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   83|  17.3k|                match self.iter.next().e()? {
   84|  16.8k|                    Some(block) => {
   85|  16.8k|                        // SAFETY: target_feature invariant
   86|  16.8k|                        let mask = unsafe { self.classifier.classify(&block) };
   87|  16.8k|                        let classified_block = QuoteClassifiedBlock {
   88|  16.8k|                            block,
   89|  16.8k|                            within_quotes_mask: mask,
   90|  16.8k|                        };
   91|  16.8k|                        Ok(Some(classified_block))
   92|       |                    }
   93|    536|                    None => Ok(None),
   94|       |                }
   95|  17.3k|            }
_RNvXs1_NtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E10get_offsetCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  103|   103k|            fn get_offset(&self) -> usize {
  104|   103k|                self.iter.get_offset() - $size
  105|   103k|            }
_RINvXs_NtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1L_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3d_5MatchEEKj40_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   23|  1.02k|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   24|  1.02k|            where
   25|  1.02k|                I: InputBlockIterator<'i, $size>,
   26|  1.02k|            {
   27|  1.02k|                Self::Classifier {
   28|  1.02k|                    iter,
   29|  1.02k|                    classifier: $core::new(),
   30|  1.02k|                    phantom: PhantomData,
   31|  1.02k|                }
   32|  1.02k|            }
_RINvXs_NtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1O_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3g_5MatchEEKj40_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   36|  3.00k|            fn resume<'i, I>(
   37|  3.00k|                iter: I,
   38|  3.00k|                first_block: Option<I::Block>,
   39|  3.00k|            ) -> ResumedQuoteClassifier<Self::Classifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
   40|  3.00k|            where
   41|  3.00k|                I: InputBlockIterator<'i, $size>,
   42|  3.00k|            {
   43|  3.00k|                let mut s = Self::Classifier {
   44|  3.00k|                    iter,
   45|  3.00k|                    classifier: $core::new(),
   46|  3.00k|                    phantom: PhantomData,
   47|  3.00k|                };
   48|  3.00k|
   49|  3.00k|                let block = first_block.map(|b| {
   50|       |                    // SAFETY: target feature invariant
   51|       |                    let mask = unsafe { s.classifier.classify(&b) };
   52|       |                    QuoteClassifiedBlock {
   53|       |                        block: b,
   54|       |                        within_quotes_mask: mask,
   55|       |                    }
   56|  3.00k|                });
   57|  3.00k|
   58|  3.00k|                ResumedQuoteClassifier {
   59|  3.00k|                    classifier: s,
   60|  3.00k|                    first_block: block,
   61|  3.00k|                }
   62|  3.00k|            }
_RNCINvXs_NtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64NtB7_11ConstructorNtB9_10QuotesImpl6resumeINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1Q_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3i_5MatchEEKj40_EE0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
   49|  3.00k|                let block = first_block.map(|b| {
   50|  3.00k|                    // SAFETY: target feature invariant
   51|  3.00k|                    let mask = unsafe { s.classifier.classify(&b) };
   52|  3.00k|                    QuoteClassifiedBlock {
   53|  3.00k|                        block: b,
   54|  3.00k|                        within_quotes_mask: mask,
   55|  3.00k|                    }
   56|  3.00k|                });
_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_9InnerIterB1w_E10into_innerCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  129|  2.70k|            fn into_inner(self) -> I {
  130|  2.70k|                self.iter
  131|  2.70k|            }
_RNvXs1_NtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E15flip_quotes_bitCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  120|  1.33k|            fn flip_quotes_bit(&mut self) {
  121|  1.33k|                self.classifier.internal_classifier.flip_prev_quote_mask();
  122|  1.33k|            }
_RNvXs1_NtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E6offsetCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  108|    238|            fn offset(&mut self, count: isize) -> QuoteIterResult<I::Block, $mask_ty, $size> {
  109|    238|                debug_assert!(count > 0);
  110|       |                debug!("Offsetting by {count}");
  111|       |
  112|    238|                for _ in 0..count - 1 {
  113|     33|                    self.iter.next().e()?;
  114|       |                }
  115|       |
  116|    238|                self.next()
  117|    238|            }

_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared7mask_6411all_ones128:
   13|  19.8k|unsafe fn all_ones128() -> __m128i {
   14|  19.8k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  19.8k|}
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3new:
   26|  4.02k|    pub(crate) fn new() -> Self {
   27|  4.02k|        Self { prev_block_mask: 0 }
   28|  4.02k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_mask:
   31|  19.8k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  19.8k|        let slash_mask = u8::from(set_slash_mask);
   33|  19.8k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  19.8k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  19.8k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit20flip_prev_quote_mask:
   38|  1.33k|    pub(crate) fn flip_prev_quote_mask(&mut self) {
   39|  1.33k|        self.prev_block_mask ^= 0x02;
   40|  1.33k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_mask:
   44|  32.6k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  32.6k|        u64::from(self.prev_block_mask & 0x01)
   46|  32.6k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_mask:
   49|  19.8k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  19.8k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  19.8k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  19.8k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  19.8k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  7.01k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|  12.8k|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|  12.8k|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|  12.8k|            let odd_starts = ODD & starts;
   62|  12.8k|            let even_starts = EVEN & starts;
   63|  12.8k|
   64|  12.8k|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|  12.8k|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|  12.8k|
   67|  12.8k|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|  12.8k|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|  12.8k|
   70|  12.8k|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|  12.8k|
   72|  12.8k|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  19.8k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  19.8k|
   77|  19.8k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  19.8k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  19.8k|
   80|  19.8k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  19.8k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|  19.8k|
   83|  19.8k|        bin_u64!("slashes", slashes);
   84|  19.8k|        bin_u64!("quotes", quotes);
   85|  19.8k|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|  19.8k|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|  19.8k|        bin_u64!("escaped", escaped);
   88|  19.8k|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|  19.8k|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|  19.8k|        bin_u64!("within_quotes", within_quotes);
   91|  19.8k|
   92|  19.8k|        within_quotes
   93|  19.8k|    }

_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  39.6k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  39.6k|    _mm256_set1_epi8(b'"' as i8)
    9|  39.6k|}
_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  39.6k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  39.6k|    _mm256_set1_epi8(b'\\' as i8)
   14|  39.6k|}
_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  39.6k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  39.6k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  39.6k|
   20|  39.6k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  39.6k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  39.6k|
   23|  39.6k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  39.6k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  39.6k|
   26|  39.6k|    BlockClassification256 { slashes, quotes }
   27|  39.6k|}

_RNvNtNtCse0ISAJPynz5_8rsonpath14classification4simd9configureCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  537|  2.61k|pub(crate) fn configure() -> SimdConfiguration {
  538|  2.61k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  539|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  540|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  541|  2.61k|    }
  542|       |
  543|       |    cfg_if! {
  544|       |        if #[cfg(not(feature = "simd"))]
  545|       |        {
  546|       |            let highest_simd = SimdTag::Nosimd;
  547|       |            let fast_quotes = false;
  548|       |            let fast_popcnt = false;
  549|       |        }
  550|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  551|       |        {
  552|  2.61k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  553|  2.61k|                SimdTag::Avx2
  554|      0|            } else if is_x86_feature_detected!("ssse3") {
  555|      0|                SimdTag::Ssse3
  556|      0|            } else if is_x86_feature_detected!("sse2") {
  557|      0|                SimdTag::Sse2
  558|       |            } else {
  559|      0|                SimdTag::Nosimd
  560|       |            };
  561|       |
  562|  2.61k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  563|  2.61k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  564|       |        }
  565|       |        else
  566|       |        {
  567|       |            let highest_simd = SimdTag::Nosimd;
  568|       |            let fast_quotes = false;
  569|       |            let fast_popcnt = false;
  570|       |        }
  571|       |    }
  572|       |
  573|  2.61k|    SimdConfiguration {
  574|  2.61k|        highest_simd,
  575|  2.61k|        fast_quotes,
  576|  2.61k|        fast_popcnt,
  577|  2.61k|    }
  578|  2.61k|}
_RINvXs1_NtNtCse0ISAJPynz5_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_depth_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5T_5MatchEEKj40_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  417|    510|    fn resume_depth_classification<'i, I>(
  418|    510|        self,
  419|    510|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  420|    510|        opening: BracketType,
  421|    510|    ) -> DepthIteratorResumeOutcome<
  422|    510|        'i,
  423|    510|        I,
  424|    510|        Self::QuotesClassifier<'i, I>,
  425|    510|        Self::DepthClassifier<'i, I>,
  426|    510|        MaskType,
  427|    510|        BLOCK_SIZE,
  428|    510|    >
  429|    510|    where
  430|    510|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  431|    510|    {
  432|    510|        D::resume(state, opening)
  433|    510|    }
_RINvXs1_NtNtCse0ISAJPynz5_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd32resume_structural_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4w_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5Y_5MatchEEKj40_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  406|  3.18k|    fn resume_structural_classification<'i, I>(
  407|  3.18k|        self,
  408|  3.18k|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  409|  3.18k|    ) -> Self::StructuralClassifier<'i, I>
  410|  3.18k|    where
  411|  3.18k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  412|  3.18k|    {
  413|  3.18k|        S::resume(state)
  414|  3.18k|    }
_RNvXs1_NtNtCse0ISAJPynz5_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  370|  3.62k|    fn dispatch_tag(self) -> usize {
  371|  3.62k|        TARGET
  372|  3.62k|    }
_RNvMs0_NtNtCse0ISAJPynz5_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  334|  2.02k|    pub(crate) fn new() -> Self {
  335|  2.02k|        Self { phantom: PhantomData }
  336|  2.02k|    }
_RINvXs1_NtNtCse0ISAJPynz5_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4p_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5R_5MatchEEKj40_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  375|  1.02k|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  376|  1.02k|    where
  377|  1.02k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  378|  1.02k|    {
  379|  1.02k|        Q::new(iter)
  380|  1.02k|    }
_RINvXs1_NtNtCse0ISAJPynz5_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4u_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5W_5MatchEEKj40_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  395|  1.02k|    fn classify_structural_characters<'i, I>(
  396|  1.02k|        self,
  397|  1.02k|        iter: Self::QuotesClassifier<'i, I>,
  398|  1.02k|    ) -> Self::StructuralClassifier<'i, I>
  399|  1.02k|    where
  400|  1.02k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  401|  1.02k|    {
  402|  1.02k|        S::new(iter)
  403|  1.02k|    }
_RINvXs1_NtNtCse0ISAJPynz5_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_quote_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5T_5MatchEEKj40_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  383|  3.00k|    fn resume_quote_classification<'i, I>(
  384|  3.00k|        self,
  385|  3.00k|        iter: I,
  386|  3.00k|        first_block: Option<I::Block>,
  387|  3.00k|    ) -> ResumedQuoteClassifier<Self::QuotesClassifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
  388|  3.00k|    where
  389|  3.00k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  390|  3.00k|    {
  391|  3.00k|        Q::resume(iter, first_block)
  392|  3.00k|    }
_RINvXs1_NtNtCse0ISAJPynz5_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd6memmemNtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB4I_5MatchEEECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  436|  6.22k|    fn memmem<'i, 'b, 'r, I, R>(
  437|  6.22k|        self,
  438|  6.22k|        input: &'i I,
  439|  6.22k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
  440|  6.22k|    ) -> Self::MemmemClassifier<'i, 'b, 'r, I, R>
  441|  6.22k|    where
  442|  6.22k|        I: Input,
  443|  6.22k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
  444|  6.22k|        'i: 'r,
  445|  6.22k|    {
  446|  6.22k|        M::memmem(input, iter)
  447|  6.22k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simd:
  475|  2.02k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  476|  2.02k|        self.highest_simd
  477|  2.02k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotes:
  479|  2.02k|    pub(crate) fn fast_quotes(&self) -> bool {
  480|  2.02k|        self.fast_quotes
  481|  2.02k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcnt:
  483|  2.02k|    pub(crate) fn fast_popcnt(&self) -> bool {
  484|  2.02k|        self.fast_popcnt
  485|  2.02k|    }

_RNvMNtNtCse0ISAJPynz5_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|  91.0k|    pub fn offset(self, amount: usize) -> Self {
   70|  91.0k|        match self {
   71|  22.6k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  19.0k|            Colon(idx) => Colon(idx + amount),
   73|  30.0k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  19.3k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|  91.0k|    }
_RINvYNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_6411ConstructorNtB7_14StructuralImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1S_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3k_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1N_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  195|  3.18k|    fn resume<'i, I, Q>(state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>) -> Self::Classifier<'i, I, Q>
  196|  3.18k|    where
  197|  3.18k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  198|  3.18k|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
  199|  3.18k|    {
  200|  3.18k|        <Self::Classifier<'i, I, Q> as StructuralIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state)
  201|  3.18k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath14classification10structuralNtB2_10Structural3idx:
   49|  1.57k|    pub fn idx(self) -> usize {
   50|  1.57k|        match self {
   51|  1.57k|            Closing(_, idx) | Colon(idx) | Opening(_, idx) | Comma(idx) => idx,
   52|  1.57k|        }
   53|  1.57k|    }

_RINvMNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   28|  22.6k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   29|  22.6k|        &mut self,
   30|  22.6k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   31|  22.6k|    ) -> mask_64::StructuralsBlock<B> {
   32|  22.6k|        let (block1, block2) = quote_classified_block.block.halves();
   33|  22.6k|        let classification1 = self.internal_classifier.classify_block(block1);
   34|  22.6k|        let classification2 = self.internal_classifier.classify_block(block2);
   35|  22.6k|
   36|  22.6k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   37|  22.6k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   38|  22.6k|
   39|  22.6k|        bin_u64!("structural", structural);
   40|  22.6k|        bin_u64!("nonquoted_structural", nonquoted_structural);
   41|  22.6k|
   42|  22.6k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   43|  22.6k|    }
_RNvMNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   20|  4.21k|    fn new() -> Self {
   21|  4.21k|        Self {
   22|  4.21k|            // SAFETY: target feature invariant
   23|  4.21k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   24|  4.21k|        }
   25|  4.21k|    }

_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E4stopCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  191|  2.88k|            fn stop(self) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
  192|  2.88k|                let block = self.block.map(|b| ResumeClassifierBlockState {
  193|       |                    idx: b.get_idx() as usize,
  194|       |                    block: b.quote_classified,
  195|  2.88k|                });
  196|  2.88k|
  197|  2.88k|                ResumeClassifierState {
  198|  2.88k|                    iter: self.iter,
  199|  2.88k|                    block,
  200|  2.88k|                    are_commas_on: self.are_commas_on,
  201|  2.88k|                    are_colons_on: self.are_colons_on,
  202|  2.88k|                }
  203|  2.88k|            }
_RINvXs_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1U_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3m_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   24|  1.02k|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   25|  1.02k|            where
   26|  1.02k|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   27|  1.02k|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   28|  1.02k|            {
   29|  1.02k|                Self::Classifier {
   30|  1.02k|                    iter,
   31|  1.02k|                    classifier: $core::new(),
   32|  1.02k|                    block: None,
   33|  1.02k|                    are_commas_on: false,
   34|  1.02k|                    are_colons_on: false,
   35|  1.02k|                }
   36|  1.02k|            }
_RNCNCNvXs1_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1F_7padding19TwoSidesPaddedInputINtNtNtBf_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB37_5MatchEEKj40_EINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  105|  91.0k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
_RNCNvXs1_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EENtBd_16FallibleIterator4next0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  105|  91.0k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
_RNCNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E4stop0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  192|  2.88k|                let block = self.block.map(|b| ResumeClassifierBlockState {
  193|  2.88k|                    idx: b.get_idx() as usize,
  194|  2.88k|                    block: b.quote_classified,
  195|  2.88k|                });
_RNCNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E6resume0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  223|  3.18k|                let block = state.block.map(|b| {
  224|  3.18k|                    // SAFETY: target_feature invariant
  225|  3.18k|                    let mut block = unsafe { classifier.classify(b.block) };
  226|  3.18k|                    let idx_mask = <$mask_ty>::MAX.checked_shl(b.idx as u32).unwrap_or(0);
  227|  3.18k|                    block.structural_mask &= idx_mask;
  228|  3.18k|
  229|  3.18k|                    block
  230|  3.18k|                });
_RNvMs0_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   59|  5.01k|            fn reclassify(&mut self, idx: usize) {
   60|  5.01k|                if let Some(block) = self.block.take() {
   61|  5.01k|                    let relative_idx = idx + 1 - self.iter.get_offset();
   62|  5.01k|                    let quote_classified_block = block.quote_classified;
   63|  5.01k|                    debug!("relative_idx is {relative_idx}.");
   64|  5.01k|
   65|  5.01k|                    if relative_idx < $size {
   66|  4.94k|                        debug!("need to reclassify.");
   67|  4.94k|
   68|  4.94k|                        let mask = <$mask_ty>::MAX << relative_idx;
   69|  4.94k|                        // SAFETY: target_feature invariant
   70|  4.94k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   71|  4.94k|                        new_block.structural_mask &= mask;
   72|  4.94k|                        self.block = Some(new_block);
   73|  4.94k|                    }
   74|      0|                }
   75|  5.01k|            }
_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E6resumeCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  206|  3.18k|            fn resume(state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>) -> Self {
  207|  3.18k|                let mut classifier = $core::new();
  208|  3.18k|
  209|  3.18k|                // SAFETY: target_feature invariant
  210|  3.18k|                unsafe {
  211|  3.18k|                    if state.are_commas_on && state.are_colons_on {
  212|    147|                        classifier.internal_classifier.toggle_colons_and_commas();
  213|    147|                    } else {
  214|  3.03k|                        if state.are_commas_on {
  215|  2.56k|                            classifier.internal_classifier.toggle_commas();
  216|  2.56k|                        }
  217|  3.03k|                        if state.are_colons_on {
  218|     42|                            classifier.internal_classifier.toggle_colons();
  219|  2.99k|                        }
  220|       |                    }
  221|       |                }
  222|       |
  223|  3.18k|                let block = state.block.map(|b| {
  224|       |                    // SAFETY: target_feature invariant
  225|       |                    let mut block = unsafe { classifier.classify(b.block) };
  226|       |                    let idx_mask = <$mask_ty>::MAX.checked_shl(b.idx as u32).unwrap_or(0);
  227|       |                    block.structural_mask &= idx_mask;
  228|       |
  229|       |                    block
  230|  3.18k|                });
  231|  3.18k|
  232|  3.18k|                Self {
  233|  3.18k|                    iter: state.iter,
  234|  3.18k|                    block,
  235|  3.18k|                    classifier,
  236|  3.18k|                    are_commas_on: state.are_commas_on,
  237|  3.18k|                    are_colons_on: state.are_colons_on,
  238|  3.18k|                }
  239|  3.18k|            }
_RNvMs0_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   52|   106k|            fn current_block_is_spent(&self) -> bool {
   53|   106k|                self.block
   54|   106k|                    .as_ref()
   55|   106k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   56|   106k|            }
_RNvXs1_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   87|  91.5k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   88|   106k|                while self.current_block_is_spent() {
   89|  15.0k|                    match self.iter.next() {
   90|  14.5k|                        Ok(Some(block)) => {
   91|  14.5k|                            // SAFETY: target_feature invariant
   92|  14.5k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   93|  14.5k|                        }
   94|       |                        Ok(None) => {
   95|    536|                            self.block = None;
   96|    536|                            break;
   97|       |                        }
   98|      0|                        Err(err) => return Err(err),
   99|       |                    }
  100|       |                }
  101|       |
  102|  91.5k|                Ok(self
  103|  91.5k|                    .block
  104|  91.5k|                    .as_mut()
  105|  91.5k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  106|  91.5k|            }
_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_colons_onCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  169|  1.77k|            fn turn_colons_on(&mut self, idx: usize) {
  170|  1.77k|                if !self.are_colons_on {
  171|  1.77k|                    self.are_colons_on = true;
  172|  1.77k|                    debug!("Turning colons on at {idx}.");
  173|  1.77k|                    // SAFETY: target_feature invariant
  174|  1.77k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  175|  1.77k|
  176|  1.77k|                    self.reclassify(idx);
  177|  1.77k|                }
  178|  1.77k|            }
_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_commas_onCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  147|  25.9k|            fn turn_commas_on(&mut self, idx: usize) {
  148|  25.9k|                if !self.are_commas_on {
  149|  1.76k|                    self.are_commas_on = true;
  150|  1.76k|                    debug!("Turning commas on at {idx}.");
  151|  1.76k|                    // SAFETY: target_feature invariant
  152|  1.76k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  153|  1.76k|
  154|  1.76k|                    self.reclassify(idx);
  155|  24.2k|                }
  156|  25.9k|            }
_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_colons_offCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  181|  19.7k|            fn turn_colons_off(&mut self) {
  182|  19.7k|                if self.are_colons_on {
  183|  1.40k|                    self.are_colons_on = false;
  184|  1.40k|                    debug!("Turning colons off.");
  185|  1.40k|                    // SAFETY: target_feature invariant
  186|  1.40k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  187|  18.3k|                }
  188|  19.7k|            }
_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_commas_offCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  159|  3.51k|            fn turn_commas_off(&mut self) {
  160|  3.51k|                if self.are_commas_on {
  161|  1.95k|                    self.are_commas_on = false;
  162|  1.95k|                    debug!("Turning commas off.");
  163|  1.95k|                    // SAFETY: target_feature invariant
  164|  1.95k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  165|  1.55k|                }
  166|  3.51k|            }
_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E25turn_colons_and_commas_onCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  115|  13.8k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  116|  13.8k|                if !self.are_commas_on && !self.are_colons_on {
  117|  1.48k|                    self.are_commas_on = true;
  118|  1.48k|                    self.are_colons_on = true;
  119|  1.48k|                    debug!("Turning both commas and colons on at {idx}.");
  120|  1.48k|                    // SAFETY: target_feature invariant
  121|  1.48k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  122|  1.48k|
  123|  1.48k|                    self.reclassify(idx);
  124|  12.3k|                } else if !self.are_commas_on {
  125|    496|                    self.turn_commas_on(idx);
  126|  11.8k|                } else if !self.are_colons_on {
  127|  1.77k|                    self.turn_colons_on(idx);
  128|  10.1k|                }
  129|  13.8k|            }
_RNvXs2_NtNtNtCse0ISAJPynz5_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E26turn_colons_and_commas_offCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  132|  7.29k|            fn turn_colons_and_commas_off(&mut self) {
  133|  7.29k|                if self.are_commas_on && self.are_colons_on {
  134|    781|                    self.are_commas_on = false;
  135|    781|                    self.are_colons_on = false;
  136|    781|                    debug!("Turning both commas and colons off.");
  137|    781|                    // SAFETY: target_feature invariant
  138|    781|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  139|  6.51k|                } else if self.are_commas_on {
  140|  1.04k|                    self.turn_commas_off();
  141|  5.46k|                } else if self.are_colons_on {
  142|    350|                    self.turn_colons_off();
  143|  5.11k|                }
  144|  7.29k|            }

_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   16|  22.6k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  22.6k|        Self {
   18|  22.6k|            quote_classified: block,
   19|  22.6k|            structural_mask,
   20|  22.6k|        }
   21|  22.6k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   29|  93.9k|    pub(crate) fn get_idx(&self) -> u32 {
   30|  93.9k|        self.structural_mask.trailing_zeros()
   31|  93.9k|    }
_RNvXs_NtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   38|  91.0k|    fn next(&mut self) -> Option<Structural> {
   39|  91.0k|        let idx = self.get_idx() as usize;
   40|  91.0k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  91.0k|        })
   57|  91.0k|    }
_RNCNvXs_NtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
   40|  91.0k|        (idx < SIZE).then(|| {
   41|  91.0k|            let bit_mask = 1 << idx;
   42|  91.0k|
   43|  91.0k|            self.structural_mask ^= bit_mask;
   44|  91.0k|
   45|  91.0k|            // The last match being a catch-all *is important*.
   46|  91.0k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|  91.0k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|  91.0k|            match self.quote_classified.block[idx] {
   49|  19.0k|                b':' => Structural::Colon(idx),
   50|  12.2k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  17.8k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  19.3k|                b',' => Structural::Comma(idx),
   53|  10.4k|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  12.1k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  91.0k|        })
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   24|   105k|    pub(crate) fn is_empty(&self) -> bool {
   25|   105k|        self.structural_mask == 0
   26|   105k|    }

_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   80|  3.21k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  3.21k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  3.21k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   74|  6.28k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|  6.28k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|  6.28k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   92|  45.3k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|  45.3k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|  45.3k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|  45.3k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|  45.3k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|  45.3k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|  45.3k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|  45.3k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|  45.3k|
  101|  45.3k|        BlockClassification256 { structural }
  102|  45.3k|    }
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   86|  2.40k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|  2.40k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|  2.40k|    }
_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   31|  45.3k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|  45.3k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|  45.3k|}
_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   49|  5.62k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  5.62k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  5.62k|}
_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   43|  8.69k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  8.69k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  8.69k|}
_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   25|  45.3k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|  45.3k|    _mm256_set1_epi8(0x0F)
   27|  45.3k|}
_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   55|  2.40k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|  2.40k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|  2.40k|}
_RNvNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|  4.21k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|  4.21k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|  4.21k|}
_RNvMNtNtNtNtCse0ISAJPynz5_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|  4.21k|    pub(crate) unsafe fn new() -> Self {
   67|  4.21k|        Self {
   68|  4.21k|            upper_nibble_mask: upper_nibble_mask(),
   69|  4.21k|        }
   70|  4.21k|    }

_RNvMNtCse0ISAJPynz5_8rsonpath5depthNtB2_5Depth9increment:
   21|  30.8k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  30.8k|        *self = (*self + 1)?;
   23|  30.8k|        Ok(())
   24|  30.8k|    }
_RNvMNtCse0ISAJPynz5_8rsonpath5depthNtB2_5Depth9decrement:
   28|  22.5k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  22.5k|        *self = (*self - 1)?;
   30|  22.5k|        Ok(())
   31|  22.5k|    }
_RNvXs0_NtCse0ISAJPynz5_8rsonpath5depthNtB5_5DepthNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
   80|  46.9k|    fn deref(&self) -> &Self::Target {
   81|  46.9k|        &self.0
   82|  46.9k|    }
_RNvXsb_NtCse0ISAJPynz5_8rsonpath5depthNtB5_5DepthINtNtNtCshZc3FwCJ069_4core3ops5arith3AddhE3addB7_:
   40|  30.8k|            fn add(self, rhs: u8) -> Self::Output {
   41|  30.8k|                self.0
   42|  30.8k|                    .checked_add(rhs)
   43|  30.8k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  30.8k|                    .map(Depth)
   45|  30.8k|            }
_RNvXse_NtCse0ISAJPynz5_8rsonpath5depthNtB5_5DepthINtNtNtCshZc3FwCJ069_4core3ops5arith3SubhE3subB7_:
   56|  22.5k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  22.5k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  22.5k|            }

_RINvMNtNtCse0ISAJPynz5_8rsonpath6engine13head_skippingINtB3_8HeadSkipNtNtNtB7_5input8borrowed13BorrowedBytesINtNtNtB7_14classification4simd12ResolvedSimdNtNtNtB1N_6quotes7avx2_6411ConstructorNtNtNtB1N_10structural7avx2_6411ConstructorNtNtNtB1N_5depth7avx2_6411ConstructorNtNtNtB1N_6memmem7avx2_6411ConstructorKj1_EKj40_E17run_head_skippingINtNtB5_4main8ExecutorB15_INtNtNtB7_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5W_5MatchEEB1I_EB5R_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  123|    995|    pub(super) fn run_head_skipping<'r, E, R>(&self, engine: &mut E) -> Result<(), EngineError>
  124|    995|    where
  125|    995|        'b: 'r,
  126|    995|        E: CanHeadSkip<'b, 'r, I, R, V>,
  127|    995|        R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  128|    995|    {
  129|    995|        dispatch_simd!(self.simd; self, engine =>
  130|       |        fn<'b, 'r, I, V, E, R>(head_skip: &HeadSkip<'b, I, V, BLOCK_SIZE>, engine: &mut E) -> Result<(), EngineError>
  131|       |        where
  132|       |            'b: 'r,
  133|       |            E: CanHeadSkip<'b, 'r, I, R, V>,
  134|       |            R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  135|       |            I: Input,
  136|       |            V: Simd
  137|       |        {
  138|       |            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  139|       |            let mut idx = 0;
  140|       |            let mut first_block = None;
  141|       |
  142|       |            loop {
  143|       |                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  144|       |                debug!("Starting memmem search from {idx}");
  145|       |
  146|       |                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name.as_ref())? {
  147|       |                    drop(memmem);
  148|       |
  149|       |                    first_block = Some(last_block);
  150|       |                    idx = starting_quote_idx;
  151|       |                    debug!("Needle found at {idx}");
  152|       |                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  153|       |
  154|       |                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  155|       |                    Some((colon_idx, b':')) => {
  156|       |                        let (next_idx, next_c) = head_skip
  157|       |                            .bytes
  158|       |                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  159|       |                            .ok_or(EngineError::MissingItem())?;
  160|       |
  161|       |                            let ResumedQuoteClassifier {
  162|       |                                classifier: quote_classifier,
  163|       |                                first_block: quote_classified_first_block,
  164|       |                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  165|       |
  166|       |                            // Temporarily set the index within the current block to zero.
  167|       |                            // This makes sense for the move below.
  168|       |                            let mut classifier_state = ResumeClassifierState {
  169|       |                                iter: quote_classifier,
  170|       |                                block: quote_classified_first_block
  171|       |                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  172|       |                                are_colons_on: false,
  173|       |                                are_commas_on: head_skip.is_accepting,
  174|       |                            };
  175|       |
  176|       |                            debug!("Actual match with colon at {colon_idx}");
  177|       |                            debug!("Next significant character at {next_idx}");
  178|       |                            debug!("Classifier is at {}", classifier_state.get_idx());
  179|       |                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  180|       |
  181|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  182|       |                            // and correctly points to the place the engine would expect had it found the matching key
  183|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  184|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  185|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  186|       |                            // in the output (if it happens at a block boundary).
  187|       |                            if next_c == b'{' || next_c == b'[' {
  188|       |                                forward_to(&mut classifier_state, next_idx)?;
  189|       |                                if head_skip.is_accepting {
  190|       |                                    engine.recorder().record_match(
  191|       |                                        next_idx,
  192|       |                                        Depth::ZERO,
  193|       |                                        crate::result::MatchedNodeType::Complex,
  194|       |                                    )?;
  195|       |                                }
  196|       |                                forward_to(&mut classifier_state, next_idx + 1)?;
  197|       |                            } else {
  198|       |                                forward_to(&mut classifier_state, next_idx)?;
  199|       |                            };
  200|       |
  201|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  202|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  203|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  204|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  205|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  206|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  207|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  208|       |                            if let Some(block) = classifier_state.block.as_mut() {
  209|       |                                let should_be_quoted = block.block.block[block.idx] == b'"';
  210|       |                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  211|       |                                    debug!("Mask needs flipping!");
  212|       |                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  213|       |                                    classifier_state.iter.flip_quotes_bit();
  214|       |                                }
  215|       |                            }
  216|       |
  217|       |                            classifier_state = match next_c {
  218|       |                                b'{' | b'[' => {
  219|       |                                    debug!("resuming");
  220|       |                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  221|       |                                    engine
  222|       |                                        .run_on_subtree(
  223|       |                                            Structural::Opening(
  224|       |                                                if next_c == b'{' {
  225|       |                                                    BracketType::Curly
  226|       |                                                } else {
  227|       |                                                    BracketType::Square
  228|       |                                                },
  229|       |                                                next_idx,
  230|       |                                            ),
  231|       |                                            head_skip.state,
  232|       |                                            classifier,
  233|       |                                        )?
  234|       |                                        .0
  235|       |                                }
  236|       |                                _ if head_skip.is_accepting => {
  237|       |                                    engine.recorder().record_match(
  238|       |                                        next_idx,
  239|       |                                        Depth::ZERO,
  240|       |                                        crate::result::MatchedNodeType::Atomic,
  241|       |                                    )?;
  242|       |                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  243|       |                                    let next_structural = classifier.next()?;
  244|       |
  245|       |                                    match next_structural {
  246|       |                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  247|       |                                        None => return Err(EngineError::MissingClosingCharacter()),
  248|       |                                    }
  249|       |                                    classifier.stop()
  250|       |                                }
  251|       |                                _ => classifier_state,
  252|       |                            };
  253|       |
  254|       |                            debug!("Quote classified up to {}", classifier_state.get_idx());
  255|       |                            idx = classifier_state.get_idx();
  256|       |
  257|       |                            first_block = classifier_state.block.map(|b| b.block.block);
  258|       |                            input_iter = classifier_state.iter.into_inner();
  259|       |                        }
  260|       |                        _ => idx += 1,
  261|       |                    }
  262|       |                } else {
  263|       |                    debug!("No memmem matches, exiting");
  264|       |                    break;
  265|       |                }
  266|       |            }
  267|       |
  268|       |            return Ok(());
  269|       |
  270|       |            /// Move the state forward to `index`.
  271|       |            ///
  272|       |            /// # Errors
  273|       |            /// If the offset crosses block boundaries, then a new block is read from the underlying
  274|       |            /// [`Input`](crate::input::Input) implementation, which can fail.
  275|       |            ///
  276|       |            /// # Panics
  277|       |            /// If the `index` is not ahead of the current position of the state ([`get_idx`](ResumeClassifierState::get_idx)).
  278|       |            #[inline(always)]
  279|       |            #[allow(clippy::panic_in_result_fn)]
  280|       |            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  281|       |            where
  282|       |                I: InputBlockIterator<'i, N>,
  283|       |                Q: QuoteClassifiedIterator<'i, I, M, N>,
  284|       |            {
  285|       |                let current_block_start = state.iter.get_offset();
  286|       |                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  287|       |                let current_idx = current_block_start + current_block_idx;
  288|       |
  289|       |                debug!(
  290|       |                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  291|       |                );
  292|       |
  293|       |                // We want to move by this much forward, and delta > 0.
  294|       |                assert!(index > current_idx);
  295|       |                let delta = index - current_idx;
  296|       |
  297|       |                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  298|       |                // and adjust the delta to cover that distance. This makes calculations simpler.
  299|       |                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  300|       |                let remaining = delta + current_block_idx;
  301|       |                let blocks_to_skip = remaining / N;
  302|       |                let remainder = remaining % N;
  303|       |
  304|       |                match state.block.as_mut() {
  305|       |                    Some(b) if blocks_to_skip == 0 => {
  306|       |                        b.idx = remaining;
  307|       |                    }
  308|       |                    Some(_) => {
  309|       |                        state.block = state
  310|       |                            .iter
  311|       |                            .offset(blocks_to_skip as isize)?
  312|       |                            .map(|b| ResumeClassifierBlockState {
  313|       |                                block: b,
  314|       |                                idx: remainder,
  315|       |                            });
  316|       |                    }
  317|       |                    None => {
  318|       |                        state.block = state
  319|       |                            .iter
  320|       |                            .offset((blocks_to_skip + 1) as isize)?
  321|       |                            .map(|b| ResumeClassifierBlockState {
  322|       |                                block: b,
  323|       |                                idx: remainder,
  324|       |                            });
  325|       |                    }
  326|       |                }
  327|       |
  328|       |                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  329|       |
  330|       |                Ok(())
  331|       |            }
  332|       |        })
  333|    995|    }
_RINvNvMNtNtCse0ISAJPynz5_8rsonpath6engine13head_skippingINtB5_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2D_6quotes7avx2_6411ConstructorNtNtNtB2D_10structural7avx2_6411ConstructorNtNtNtB2D_5depth7avx2_6411ConstructorNtNtNtB2D_6memmem7avx2_6411ConstructorKj1_EINtNtB7_4main8ExecutorB1V_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB6n_5MatchEEB2y_EB6i_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  137|    995|        {
  138|    995|            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  139|    995|            let mut idx = 0;
  140|    995|            let mut first_block = None;
  141|       |
  142|       |            loop {
  143|  6.22k|                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  144|       |                debug!("Starting memmem search from {idx}");
  145|       |
  146|  6.22k|                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name.as_ref())? {
  147|  5.53k|                    drop(memmem);
  148|  5.53k|
  149|  5.53k|                    first_block = Some(last_block);
  150|  5.53k|                    idx = starting_quote_idx;
  151|  5.53k|                    debug!("Needle found at {idx}");
  152|  5.53k|                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  153|  5.53k|
  154|  5.53k|                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  155|  3.00k|                    Some((colon_idx, b':')) => {
  156|  3.00k|                        let (next_idx, next_c) = head_skip
  157|  3.00k|                            .bytes
  158|  3.00k|                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  159|  3.00k|                            .ok_or(EngineError::MissingItem())?;
  160|       |
  161|       |                            let ResumedQuoteClassifier {
  162|  3.00k|                                classifier: quote_classifier,
  163|  3.00k|                                first_block: quote_classified_first_block,
  164|  3.00k|                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  165|  3.00k|
  166|  3.00k|                            // Temporarily set the index within the current block to zero.
  167|  3.00k|                            // This makes sense for the move below.
  168|  3.00k|                            let mut classifier_state = ResumeClassifierState {
  169|  3.00k|                                iter: quote_classifier,
  170|  3.00k|                                block: quote_classified_first_block
  171|  3.00k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  172|  3.00k|                                are_colons_on: false,
  173|  3.00k|                                are_commas_on: head_skip.is_accepting,
  174|  3.00k|                            };
  175|  3.00k|
  176|  3.00k|                            debug!("Actual match with colon at {colon_idx}");
  177|  3.00k|                            debug!("Next significant character at {next_idx}");
  178|  3.00k|                            debug!("Classifier is at {}", classifier_state.get_idx());
  179|  3.00k|                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  180|  3.00k|
  181|  3.00k|                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  182|  3.00k|                            // and correctly points to the place the engine would expect had it found the matching key
  183|  3.00k|                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  184|  3.00k|                            // the engine wants to start one byte *after* the opening character. However, the match report
  185|  3.00k|                            // has to happen before we advance one more byte, or else the opening character might be lost
  186|  3.00k|                            // in the output (if it happens at a block boundary).
  187|  3.00k|                            if next_c == b'{' || next_c == b'[' {
  188|  1.09k|                                forward_to(&mut classifier_state, next_idx)?;
  189|  1.09k|                                if head_skip.is_accepting {
  190|    894|                                    engine.recorder().record_match(
  191|    894|                                        next_idx,
  192|    894|                                        Depth::ZERO,
  193|    894|                                        crate::result::MatchedNodeType::Complex,
  194|    894|                                    )?;
  195|    198|                                }
  196|  1.09k|                                forward_to(&mut classifier_state, next_idx + 1)?;
  197|       |                            } else {
  198|  1.90k|                                forward_to(&mut classifier_state, next_idx)?;
  199|       |                            };
  200|       |
  201|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  202|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  203|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  204|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  205|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  206|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  207|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  208|  3.00k|                            if let Some(block) = classifier_state.block.as_mut() {
  209|  3.00k|                                let should_be_quoted = block.block.block[block.idx] == b'"';
  210|  3.00k|                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  211|  1.33k|                                    debug!("Mask needs flipping!");
  212|  1.33k|                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  213|  1.33k|                                    classifier_state.iter.flip_quotes_bit();
  214|  1.66k|                                }
  215|      0|                            }
  216|       |
  217|  2.70k|                            classifier_state = match next_c {
  218|       |                                b'{' | b'[' => {
  219|       |                                    debug!("resuming");
  220|  1.09k|                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  221|  1.09k|                                    engine
  222|  1.09k|                                        .run_on_subtree(
  223|  1.09k|                                            Structural::Opening(
  224|  1.09k|                                                if next_c == b'{' {
  225|    867|                                                    BracketType::Curly
  226|       |                                                } else {
  227|    225|                                                    BracketType::Square
  228|       |                                                },
  229|  1.09k|                                                next_idx,
  230|  1.09k|                                            ),
  231|  1.09k|                                            head_skip.state,
  232|  1.09k|                                            classifier,
  233|    294|                                        )?
  234|       |                                        .0
  235|       |                                }
  236|  1.58k|                                _ if head_skip.is_accepting => {
  237|  1.58k|                                    engine.recorder().record_match(
  238|  1.58k|                                        next_idx,
  239|  1.58k|                                        Depth::ZERO,
  240|  1.58k|                                        crate::result::MatchedNodeType::Atomic,
  241|  1.58k|                                    )?;
  242|  1.58k|                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  243|  1.58k|                                    let next_structural = classifier.next()?;
  244|       |
  245|  1.58k|                                    match next_structural {
  246|  1.57k|                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  247|      5|                                        None => return Err(EngineError::MissingClosingCharacter()),
  248|       |                                    }
  249|  1.57k|                                    classifier.stop()
  250|       |                                }
  251|    326|                                _ => classifier_state,
  252|       |                            };
  253|       |
  254|       |                            debug!("Quote classified up to {}", classifier_state.get_idx());
  255|  2.70k|                            idx = classifier_state.get_idx();
  256|  2.70k|
  257|  2.70k|                            first_block = classifier_state.block.map(|b| b.block.block);
  258|  2.70k|                            input_iter = classifier_state.iter.into_inner();
  259|  2.70k|                        }
  260|  2.53k|                        _ => idx += 1,
  261|       |                    }
  262|       |                } else {
  263|       |                    debug!("No memmem matches, exiting");
  264|    696|                    break;
  265|    696|                }
  266|    696|            }
  267|    696|
  268|    696|            return Ok(());
_RINvNvNvMNtNtCse0ISAJPynz5_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2e_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3G_5MatchEEKB1c_EINtNtNtNtBb_14classification6quotes7avx2_6421Avx2QuoteClassifier64B29_EyKB1c_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  280|  4.09k|            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  281|  4.09k|            where
  282|  4.09k|                I: InputBlockIterator<'i, N>,
  283|  4.09k|                Q: QuoteClassifiedIterator<'i, I, M, N>,
  284|  4.09k|            {
  285|  4.09k|                let current_block_start = state.iter.get_offset();
  286|  4.09k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  287|  4.09k|                let current_idx = current_block_start + current_block_idx;
  288|  4.09k|
  289|  4.09k|                debug!(
  290|  4.09k|                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  291|  4.09k|                );
  292|  4.09k|
  293|  4.09k|                // We want to move by this much forward, and delta > 0.
  294|  4.09k|                assert!(index > current_idx);
  295|  4.09k|                let delta = index - current_idx;
  296|  4.09k|
  297|  4.09k|                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  298|  4.09k|                // and adjust the delta to cover that distance. This makes calculations simpler.
  299|  4.09k|                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  300|  4.09k|                let remaining = delta + current_block_idx;
  301|  4.09k|                let blocks_to_skip = remaining / N;
  302|  4.09k|                let remainder = remaining % N;
  303|  4.09k|
  304|  4.09k|                match state.block.as_mut() {
  305|  4.09k|                    Some(b) if blocks_to_skip == 0 => {
  306|  3.85k|                        b.idx = remaining;
  307|  3.85k|                    }
  308|       |                    Some(_) => {
  309|    238|                        state.block = state
  310|    238|                            .iter
  311|    238|                            .offset(blocks_to_skip as isize)?
  312|    238|                            .map(|b| ResumeClassifierBlockState {
  313|       |                                block: b,
  314|       |                                idx: remainder,
  315|    238|                            });
  316|    238|                    }
  317|       |                    None => {
  318|      0|                        state.block = state
  319|      0|                            .iter
  320|      0|                            .offset((blocks_to_skip + 1) as isize)?
  321|      0|                            .map(|b| ResumeClassifierBlockState {
  322|       |                                block: b,
  323|       |                                idx: remainder,
  324|      0|                            });
  325|      0|                    }
  326|       |                }
  327|       |
  328|       |                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  329|       |
  330|  4.09k|                Ok(())
  331|  4.09k|            }
_RNCINvNvMNtNtCse0ISAJPynz5_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_E0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  171|  3.00k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
_RNCINvNvMNtNtCse0ISAJPynz5_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_Es_0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  257|  2.70k|                            first_block = classifier_state.block.map(|b| b.block.block);
_RNCINvNvNvMNtNtCse0ISAJPynz5_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_E0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  286|  4.09k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
_RNCINvNvNvMNtNtCse0ISAJPynz5_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_Es_0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  312|    238|                            .map(|b| ResumeClassifierBlockState {
  313|    238|                                block: b,
  314|    238|                                idx: remainder,
  315|    238|                            });
_RNvMNtNtCse0ISAJPynz5_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1M_6quotes7avx2_6411ConstructorNtNtNtB1M_10structural7avx2_6411ConstructorNtNtNtB1M_5depth7avx2_6411ConstructorNtNtNtB1M_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   98|  2.02k|    pub(super) fn new(bytes: &'b I, automaton: &Automaton, simd: V) -> Option<Self> {
   99|  2.02k|        let initial_state = automaton.initial_state();
  100|  2.02k|        let fallback_state = automaton[initial_state].fallback_state();
  101|  2.02k|        let transitions = automaton[initial_state].member_transitions();
  102|  2.02k|
  103|  2.02k|        if fallback_state == initial_state
  104|  1.35k|            && transitions.len() == 1
  105|    995|            && automaton[initial_state].array_transitions().is_empty()
  106|       |        {
  107|    995|            let (member_name, target_state) = &transitions[0];
  108|    995|            debug!("Automaton starts with a descendant search, using memmem heuristic.");
  109|    995|            return Some(Self {
  110|    995|                bytes,
  111|    995|                state: *target_state,
  112|    995|                is_accepting: automaton.is_accepting(*target_state),
  113|    995|                member_name: member_name.clone(),
  114|    995|                simd,
  115|    995|            });
  116|  1.02k|        }
  117|  1.02k|
  118|  1.02k|        None
  119|  2.02k|    }

_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  765|  22.5k|    fn pop_if_at_or_below(&mut self, depth: u8) -> Option<StackFrame> {
  766|  22.5k|        if let Some(stack_frame) = self.peek() {
  767|  20.6k|            if depth <= stack_frame.depth {
  768|  17.6k|                return self.contents.pop();
  769|  2.94k|            }
  770|  1.90k|        }
  771|  4.84k|        None
  772|  22.5k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6engine4mainNtB5_10SmallStack4peekCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  760|  22.5k|    fn peek(&mut self) -> Option<StackFrame> {
  761|  22.5k|        self.contents.last().copied()
  762|  22.5k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6engine4mainNtB5_10SmallStack4pushCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  775|  24.4k|    fn push(&mut self, value: StackFrame) {
  776|  24.4k|        self.contents.push(value)
  777|  24.4k|    }
_RINvNtNtCse0ISAJPynz5_8rsonpath6engine4main14query_executorNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1D_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB33_6quotes7avx2_6411ConstructorNtNtNtB33_10structural7avx2_6411ConstructorNtNtNtB33_5depth7avx2_6411ConstructorNtNtNtB33_6memmem7avx2_6411ConstructorKj1_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  249|  2.02k|fn query_executor<'i, 'r, I, R, V: Simd>(
  250|  2.02k|    automaton: &'i Automaton,
  251|  2.02k|    input: &'i I,
  252|  2.02k|    recorder: &'r R,
  253|  2.02k|    simd: V,
  254|  2.02k|) -> Executor<'i, 'r, I, R, V>
  255|  2.02k|where
  256|  2.02k|    I: Input,
  257|  2.02k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  258|  2.02k|{
  259|  2.02k|    Executor {
  260|  2.02k|        depth: Depth::ZERO,
  261|  2.02k|        state: automaton.initial_state(),
  262|  2.02k|        stack: SmallStack::new(),
  263|  2.02k|        automaton,
  264|  2.02k|        input,
  265|  2.02k|        recorder,
  266|  2.02k|        simd,
  267|  2.02k|        next_event: None,
  268|  2.02k|        is_list: false,
  269|  2.02k|        array_count: JsonUInt::ZERO,
  270|  2.02k|    }
  271|  2.02k|}
_RINvNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input8borrowed13BorrowedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2p_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3P_6quotes7avx2_6411ConstructorNtNtNtB3P_10structural7avx2_6411ConstructorNtNtNtB3P_5depth7avx2_6411ConstructorNtNtNtB3P_6memmem7avx2_6411ConstructorKj1_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  316|  2.12k|        {
  317|       |            loop {
  318|       |                // Fetch the next element only if the lookahead is empty.
  319|  91.3k|                if eng.next_event.is_none() {
  320|  89.9k|                    eng.next_event = match classifier.next() {
  321|  89.9k|                        Ok(e) => e,
  322|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  323|       |                    };
  324|  1.36k|                }
  325|  91.3k|                if let Some(event) = eng.next_event.take() {
  326|       |                    debug!("====================");
  327|       |                    debug!("Event = {:?}", event);
  328|       |                    debug!("Depth = {:?}", eng.depth);
  329|       |                    debug!("Stack = {:?}", eng.stack);
  330|       |                    debug!("State = {:?}", eng.state);
  331|       |                    debug!("====================");
  332|       |
  333|  90.7k|                    match event {
  334|  19.0k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  335|  18.0k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  336|  31.1k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  337|  22.5k|                        Structural::Closing(_, idx) => {
  338|  22.5k|                            eng.handle_closing(classifier, idx)?;
  339|       |
  340|  22.5k|                            if eng.depth == Depth::ZERO {
  341|  1.56k|                                break;
  342|  20.9k|                            }
  343|       |                        }
  344|       |                    }
  345|       |                } else {
  346|    531|                    break;
  347|       |                }
  348|       |            }
  349|       |
  350|  2.09k|            Ok(())
_RINvXs0_NtNtCse0ISAJPynz5_8rsonpath6engine4mainNtB6_10MainEngineNtB8_6Engine7matchesNtNtNtBa_5input8borrowed13BorrowedBytesINtNtCs8f6x4lOZV33_5alloc3vec3VecNtNtBa_6result5MatchEECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  186|  2.61k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  187|  2.61k|    where
  188|  2.61k|        I: Input,
  189|  2.61k|        S: Sink<Match>,
  190|  2.61k|    {
  191|  2.61k|        if self.automaton.is_select_root_query() {
  192|    591|            return select_root_query::match_(input, sink);
  193|  2.02k|        }
  194|  2.02k|        if self.automaton.is_empty_query() {
  195|      0|            return Ok(());
  196|  2.02k|        }
  197|  2.02k|
  198|  2.02k|        let recorder = NodesRecorder::build_recorder(sink, input.leading_padding_len());
  199|  2.02k|        config_simd!(self.simd => |simd| {
  200|      0|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  201|      0|            executor.run()
  202|    326|        })?;
  203|       |
  204|  1.69k|        Ok(())
  205|  2.61k|    }
_RNCNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  536|     30|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNCNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  712|  22.5k|        .map(|x| x.0);
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  358|  19.0k|    fn handle_colon(
  359|  19.0k|        &mut self,
  360|  19.0k|        #[allow(unused_variables)] classifier: &mut Classifier!(),
  361|  19.0k|        idx: usize,
  362|  19.0k|    ) -> Result<(), EngineError> {
  363|       |        debug!("Colon");
  364|       |
  365|       |        // Lookahead to see if the next character is an opening.
  366|       |        // If yes, the logic will be handled in handle_opening and we bail.
  367|  19.0k|        if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  368|  19.0k|            if c == b'{' || c == b'[' {
  369|  6.69k|                return Ok(());
  370|  12.3k|            }
  371|      0|        }
  372|       |
  373|       |        // Atomic values are only relevant if the automaton accepts.
  374|       |        // Look at accepting transitions and try to match them with the label.
  375|  12.3k|        let mut any_matched = false;
  376|       |
  377|  12.3k|        for (member_name, target) in self.automaton[self.state].member_transitions() {
  378|  10.3k|            if self.automaton.is_accepting(*target) && self.is_match(idx, member_name.as_ref())? {
  379|  4.26k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  380|  4.26k|                any_matched = true;
  381|  4.26k|                break;
  382|  6.11k|            }
  383|       |        }
  384|       |        // Alternatively, match consider the fallback transition if it accepts.
  385|  12.3k|        let fallback_state = self.automaton[self.state].fallback_state();
  386|  12.3k|        if !any_matched && self.automaton.is_accepting(fallback_state) {
  387|    854|            self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  388|  11.5k|        }
  389|       |
  390|       |        // Tail skipping.
  391|       |        // If we are in a unitary state and have matched a transition, we can skip the rest of the subtree,
  392|       |        // since member names are unique.
  393|  12.3k|        if any_matched && self.automaton.is_unitary(self.state) {
  394|       |            // We need to look ahead for some bookkeeping.
  395|       |            // 1. If the next event is closing then there's no reason to spin up the skipping machinery,
  396|       |            //    since it would exit immediately anyway.
  397|       |            // 2. If the next character is a comma then we need to notify the recorder.
  398|       |            // 3. Realistically, a colon should never happen. An opening is not interesting and will be skipped.
  399|     55|            self.next_event = classifier.next()?;
  400|     55|            match self.next_event {
  401|       |                None | Some(Structural::Closing(_, _)) => {
  402|     17|                    return Ok(());
  403|       |                }
  404|     38|                Some(Structural::Comma(idx)) => self.recorder.record_value_terminator(idx, self.depth)?,
  405|      0|                Some(Structural::Colon(_) | Structural::Opening(_, _)) => (),
  406|       |            }
  407|     38|            let bracket_type = self.current_node_bracket_type();
  408|       |            debug!("Skipping unique state from {bracket_type:?}");
  409|     38|            let stop_at = classifier.skip(bracket_type)?;
  410|       |            // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  411|       |            // handle a closing, so we set the lookahead to the correct character.
  412|     38|            self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  413|  12.3k|        }
  414|       |
  415|  12.3k|        Ok(())
  416|  19.0k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  422|  18.0k|    fn handle_comma(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  423|  18.0k|        debug!("Comma");
  424|  18.0k|
  425|  18.0k|        self.recorder.record_value_terminator(idx, self.depth)?;
  426|       |
  427|  18.0k|        if self.is_list {
  428|       |            // If the index increment exceeds the field's limit, give up.
  429|  9.32k|            if self.array_count.try_increment().is_err() {
  430|      0|                return Ok(());
  431|  9.32k|            }
  432|       |
  433|       |            // Lookahead to see if the next character is an opening.
  434|       |            // If yes, the logic will be handled in handle_opening and we bail.
  435|  9.32k|            if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  436|  9.32k|                if c == b'{' || c == b'[' {
  437|  3.24k|                    return Ok(());
  438|  6.07k|                }
  439|      0|            }
  440|       |
  441|       |            // Check the fallback transition first since it's cheap, then check for the specific index.
  442|  6.07k|            let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  443|  6.07k|
  444|  6.07k|            if is_fallback_accepting
  445|  2.25k|                || self
  446|  2.25k|                    .automaton
  447|  2.25k|                    .has_array_index_transition_to_accepting(self.state, &self.array_count)
  448|       |            {
  449|       |                debug!("Accepting list item on comma.");
  450|  4.02k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  451|       |
  452|  4.02k|                if self.automaton.is_unitary(self.state) {
  453|      3|                    self.next_event = classifier.next()?;
  454|      3|                    match self.next_event {
  455|       |                        None | Some(Structural::Closing(_, _)) => {
  456|      2|                            return Ok(());
  457|       |                        }
  458|      1|                        Some(Structural::Comma(idx)) => self.recorder.record_value_terminator(idx, self.depth)?,
  459|      0|                        Some(Structural::Colon(_) | Structural::Opening(_, _)) => (),
  460|       |                    }
  461|       |                    debug!("Skipping unique state from {:?}", BracketType::Square);
  462|      1|                    let stop_at = classifier.skip(BracketType::Square)?;
  463|      1|                    self.next_event = Some(Structural::Closing(BracketType::Square, stop_at));
  464|  4.02k|                }
  465|  2.05k|            }
  466|  8.76k|        }
  467|       |
  468|  14.8k|        Ok(())
  469|  18.0k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  294|  1.02k|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  295|  1.02k|        let iter = self.input.iter_blocks(self.recorder);
  296|  1.02k|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  297|  1.02k|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  298|  1.02k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  299|  1.02k|
  300|  1.02k|        self.run_on_subtree(&mut classifier)?;
  301|       |
  302|  1.00k|        self.verify_subtree_closed()
  303|  1.02k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE13transition_toCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  645|  28.9k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  646|  28.9k|        let target_is_list = opening == BracketType::Square;
  647|  28.9k|
  648|  28.9k|        let fallback = self.automaton[self.state].fallback_state();
  649|  28.9k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  650|  28.9k|        let searching_list = is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state);
  651|       |
  652|       |        // To keep the stack small, we only push if the state only changes in any meaningful way.
  653|  28.9k|        if target != self.state || target_is_list != self.is_list || searching_list {
  654|  24.4k|            debug!(
  655|  24.4k|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  656|  24.4k|                self.state, self.array_count
  657|  24.4k|            );
  658|  24.4k|
  659|  24.4k|            self.stack.push(StackFrame {
  660|  24.4k|                depth: *self.depth,
  661|  24.4k|                state: self.state,
  662|  24.4k|                is_list: self.is_list,
  663|  24.4k|                array_count: self.array_count,
  664|  24.4k|            });
  665|  24.4k|            self.state = target;
  666|  24.4k|        }
  667|  28.9k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  596|  22.5k|    fn handle_closing(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  597|  22.5k|        debug!("Closing, decreasing depth and popping stack.");
  598|  22.5k|
  599|  22.5k|        self.depth
  600|  22.5k|            .decrement()
  601|  22.5k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  602|  22.5k|        self.recorder.record_value_terminator(idx, self.depth)?;
  603|       |
  604|       |        // Restore the state from the stack if the transition was not a loop.
  605|  22.5k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  606|  17.6k|            self.state = stack_frame.state;
  607|  17.6k|            self.is_list = stack_frame.is_list;
  608|  17.6k|            self.array_count = stack_frame.array_count;
  609|  17.6k|
  610|  17.6k|            debug!("Restored array count to {}", self.array_count);
  611|  17.6k|
  612|  17.6k|            // We have taken a transition when entering the just-closed subtree. If the state is unitary
  613|  17.6k|            // we can just skip the rest of the current subtree.
  614|  17.6k|            if self.automaton.is_unitary(self.state) {
  615|    216|                let bracket_type = self.current_node_bracket_type();
  616|       |                debug!("Skipping unique state from {bracket_type:?}");
  617|    216|                let close_idx = classifier.skip(bracket_type)?;
  618|       |                // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  619|       |                // handle a closing, so we set the lookahead to the correct character.
  620|    216|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  621|    216|                return Ok(());
  622|  17.4k|            }
  623|  4.84k|        }
  624|       |
  625|  22.2k|        if self.is_list {
  626|  12.5k|            if self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  627|  8.25k|                || self.automaton.has_any_array_item_transition(self.state)
  628|  10.1k|            {
  629|  10.1k|                classifier.turn_commas_on(idx);
  630|  10.1k|            } else {
  631|  2.46k|                classifier.turn_commas_off();
  632|  2.46k|            }
  633|  9.71k|        } else if self.automaton.has_transition_to_accepting(self.state) {
  634|  5.67k|            classifier.turn_colons_and_commas_on(idx);
  635|  5.67k|        } else {
  636|  4.03k|            classifier.turn_colons_off();
  637|  4.03k|        }
  638|       |
  639|  22.2k|        Ok(())
  640|  22.5k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  473|  31.1k|    fn handle_opening(
  474|  31.1k|        &mut self,
  475|  31.1k|        classifier: &mut Classifier!(),
  476|  31.1k|        bracket_type: BracketType,
  477|  31.1k|        idx: usize,
  478|  31.1k|    ) -> Result<(), EngineError> {
  479|  31.1k|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  480|  31.1k|
  481|  31.1k|        // Check all transitions relevant to the current subtree - array if in list, member if not.
  482|  31.1k|        let mut any_matched = false;
  483|  31.1k|        if self.is_list {
  484|  18.3k|            for trans in self.automaton[self.state].array_transitions() {
  485|  7.21k|                if trans.matches(self.array_count) {
  486|  2.70k|                    let target = trans.target_state();
  487|  2.70k|                    any_matched = true;
  488|  2.70k|                    self.transition_to(target, bracket_type);
  489|  2.70k|                    if self.automaton.is_accepting(target) {
  490|       |                        debug!("Accept {idx}");
  491|  1.20k|                        self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  492|  1.49k|                    }
  493|  2.70k|                    break;
  494|  4.51k|                }
  495|       |            }
  496|       |        } else {
  497|  12.8k|            let colon_idx = self.find_preceding_colon(idx);
  498|       |
  499|  12.8k|            for (member_name, target) in self.automaton[self.state].member_transitions() {
  500|  7.24k|                if let Some(colon_idx) = colon_idx {
  501|  5.86k|                    if self.is_match(colon_idx, member_name.as_ref())? {
  502|  3.05k|                        any_matched = true;
  503|  3.05k|                        self.transition_to(*target, bracket_type);
  504|  3.05k|                        if self.automaton.is_accepting(*target) {
  505|       |                            debug!("Accept {idx}");
  506|  1.57k|                            self.record_match_detected_at(colon_idx + 1, NodeType::Complex(bracket_type))?;
  507|  1.48k|                        }
  508|  3.05k|                        break;
  509|  2.81k|                    }
  510|  1.37k|                }
  511|       |            }
  512|       |        }
  513|       |
  514|       |        // If nothing matched trigger the fallback transition.
  515|  31.1k|        if !any_matched && self.depth != Depth::ZERO {
  516|  23.4k|            let fallback = self.automaton[self.state].fallback_state();
  517|  23.4k|            debug!("Falling back to {fallback}");
  518|  23.4k|
  519|  23.4k|            if self.automaton.is_rejecting(fallback) {
  520|       |                // Tail skipping. Skip the entire subtree. The skipping consumes the closing character.
  521|       |                // We still need to notify the recorder - in case the value being skipped was actually accepted.
  522|    255|                let closing_idx = classifier.skip(bracket_type)?;
  523|    255|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  524|  23.2k|            } else {
  525|  23.2k|                self.transition_to(fallback, bracket_type);
  526|  23.2k|            }
  527|  23.2k|
  528|  23.2k|            if self.automaton.is_accepting(fallback) {
  529|  9.76k|                self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  530|  13.4k|            }
  531|  7.63k|        }
  532|       |
  533|       |        // At this point we will be actually digging into the subtree.
  534|  30.8k|        self.depth
  535|  30.8k|            .increment()
  536|  30.8k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  537|       |
  538|  30.8k|        self.is_list = bracket_type == BracketType::Square;
  539|  30.8k|        let mut needs_commas = false;
  540|  30.8k|
  541|  30.8k|        // If we're starting a list, there's a very hairy problem of accepting the first element in the list,
  542|  30.8k|        // if it is atomic. We process objects and arrays on their opening character, and atomics on their preceding comma.
  543|  30.8k|        // The first element doesn't have a preceding comma, so if it needs to be accepted we need to handle it now.
  544|  30.8k|        //
  545|  30.8k|        // Additionally, whether to enable commas or not depends on whether an item of the list can ever be accepted.
  546|  30.8k|        if self.is_list {
  547|  17.9k|            let fallback = self.automaton[self.state].fallback_state();
  548|  17.9k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  549|  17.9k|
  550|  17.9k|            if is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state) {
  551|  15.3k|                needs_commas = true;
  552|  15.3k|                self.array_count = JsonUInt::ZERO;
  553|       |                debug!("Initialized array count to {}", self.array_count);
  554|       |
  555|  15.3k|                let wants_first_item =
  556|  15.3k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  557|       |
  558|  15.3k|                if wants_first_item {
  559|  10.3k|                    let next = self.input.seek_non_whitespace_forward(idx + 1).e()?;
  560|       |
  561|       |                    // We only handle the match if it exists and is atomic. The possible cases
  562|       |                    // in a well-formed JSON for the next character are:
  563|       |                    // - '[', for an array value
  564|       |                    // - '{' for an object value
  565|       |                    // - ']' if the list was empty and has no values
  566|       |                    // - otherwise it's the first character of an atomic value.
  567|  10.3k|                    match next {
  568|  9.54k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  569|    827|                        Some((value_idx, _)) => {
  570|    827|                            self.record_match_detected_at(value_idx, NodeType::Atomic)?;
  571|       |                        }
  572|      0|                        _ => (),
  573|       |                    }
  574|  4.99k|                }
  575|  2.58k|            }
  576|  12.8k|        }
  577|       |
  578|       |        // Decide which structural characters need to be handled in this subtree.
  579|  30.8k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  580|  8.17k|            // When accepting values in an object we need colons for the member names,
  581|  8.17k|            // and commas to report where atomic values end (for the Recorder).
  582|  8.17k|            // This is the only case that needs colons.
  583|  8.17k|            classifier.turn_colons_and_commas_on(idx);
  584|  22.6k|        } else if needs_commas {
  585|  15.3k|            classifier.turn_colons_off();
  586|  15.3k|            classifier.turn_commas_on(idx);
  587|  15.3k|        } else {
  588|  7.29k|            classifier.turn_colons_and_commas_off();
  589|  7.29k|        }
  590|       |
  591|  30.8k|        Ok(())
  592|  31.1k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  308|  2.12k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  309|  2.12k|        dispatch_simd!(self.simd; self, classifier =>
  310|       |        fn<'i, 'r, I, R, V>(eng: &mut Executor<'i, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  311|       |        where
  312|       |            'i: 'r,
  313|       |            I: Input,
  314|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  315|       |            V: Simd
  316|       |        {
  317|       |            loop {
  318|       |                // Fetch the next element only if the lookahead is empty.
  319|       |                if eng.next_event.is_none() {
  320|       |                    eng.next_event = match classifier.next() {
  321|       |                        Ok(e) => e,
  322|       |                        Err(err) => return Err(EngineError::InputError(err)),
  323|       |                    };
  324|       |                }
  325|       |                if let Some(event) = eng.next_event.take() {
  326|       |                    debug!("====================");
  327|       |                    debug!("Event = {:?}", event);
  328|       |                    debug!("Depth = {:?}", eng.depth);
  329|       |                    debug!("Stack = {:?}", eng.stack);
  330|       |                    debug!("State = {:?}", eng.state);
  331|       |                    debug!("====================");
  332|       |
  333|       |                    match event {
  334|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  335|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  336|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  337|       |                        Structural::Closing(_, idx) => {
  338|       |                            eng.handle_closing(classifier, idx)?;
  339|       |
  340|       |                            if eng.depth == Depth::ZERO {
  341|       |                                break;
  342|       |                            }
  343|       |                        }
  344|       |                    }
  345|       |                } else {
  346|       |                    break;
  347|       |                }
  348|       |            }
  349|       |
  350|       |            Ok(())
  351|       |        })
  352|  2.12k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  670|  12.8k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  671|  12.8k|        if self.depth == Depth::ZERO {
  672|  1.73k|            None
  673|       |        } else {
  674|  11.0k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  675|       |
  676|  11.0k|            (char == b':').then_some(char_idx)
  677|       |        }
  678|  12.8k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  721|  2.09k|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  722|  2.09k|        if self.depth != Depth::ZERO {
  723|    291|            Err(EngineError::MissingClosingCharacter())
  724|       |        } else {
  725|  1.80k|            Ok(())
  726|       |        }
  727|  2.09k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  704|  22.5k|    fn record_match_detected_at(&mut self, start_idx: usize, ty: NodeType) -> Result<(), EngineError> {
  705|       |        debug!("Reporting result somewhere after {start_idx} with node type {ty:?}");
  706|       |
  707|  22.5k|        let index = match ty {
  708|  2.22k|            NodeType::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{']).e()?,
  709|  10.3k|            NodeType::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'[']).e()?,
  710|  9.96k|            NodeType::Atomic => self.input.seek_non_whitespace_forward(start_idx).e()?,
  711|       |        }
  712|  22.5k|        .map(|x| x.0);
  713|  22.5k|
  714|  22.5k|        match index {
  715|  22.5k|            Some(idx) => self.recorder.record_match(idx, self.depth, ty.into()),
  716|      0|            None => Err(EngineError::MissingItem()),
  717|       |        }
  718|  22.5k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE25current_node_bracket_typeCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  730|    254|    fn current_node_bracket_type(&self) -> BracketType {
  731|    254|        if self.is_list {
  732|      0|            BracketType::Square
  733|       |        } else {
  734|    254|            BracketType::Curly
  735|       |        }
  736|    254|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE3runCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  280|  2.02k|    fn run(mut self) -> Result<(), EngineError> {
  281|  2.02k|        // First we check if head-skipping is possible for a given query automaton.
  282|  2.02k|        // If yes, delegate the control to HeadSkip and give it full access to this Executor.
  283|  2.02k|        // Otherwise, we run our normal one-shot engine.
  284|  2.02k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  285|  2.02k|
  286|  2.02k|        match mb_head_skip {
  287|    995|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  288|  1.02k|            None => self.run_and_exit(),
  289|       |        }
  290|  2.02k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE8is_matchCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  682|  15.8k|    fn is_match(&self, idx: usize, member_name: &StringPattern) -> Result<bool, EngineError> {
  683|  15.8k|        let len = member_name.quoted().len();
  684|       |
  685|       |        // The colon can be preceded by whitespace before the actual label.
  686|  15.8k|        let closing_quote_idx = match self.input.seek_backward(idx - 1, b'"') {
  687|  15.8k|            Some(x) => x,
  688|      0|            None => return Err(EngineError::MalformedStringQuotes(idx - 1)),
  689|       |        };
  690|       |
  691|       |        // First check if the length matches.
  692|  15.8k|        if closing_quote_idx + 1 < len {
  693|    379|            return Ok(false);
  694|  15.4k|        }
  695|  15.4k|
  696|  15.4k|        // Do the expensive memcmp.
  697|  15.4k|        let start_idx = closing_quote_idx + 1 - len;
  698|  15.4k|        self.input
  699|  15.4k|            .is_member_match(start_idx, closing_quote_idx + 1, member_name)
  700|  15.4k|            .map_err(|x| x.into().into())
  701|  15.8k|    }
_RNvXs3_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E14run_on_subtreeCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  787|  1.09k|    fn run_on_subtree(
  788|  1.09k|        &mut self,
  789|  1.09k|        next_event: Structural,
  790|  1.09k|        state: State,
  791|  1.09k|        structural_classifier: V::StructuralClassifier<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>>,
  792|  1.09k|    ) -> Result<ResumeState<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>, V, MaskType>, EngineError> {
  793|  1.09k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  794|  1.09k|
  795|  1.09k|        self.state = state;
  796|  1.09k|        self.next_event = Some(next_event);
  797|  1.09k|
  798|  1.09k|        self.run_on_subtree(&mut classifier)?;
  799|  1.08k|        self.verify_subtree_closed()?;
  800|       |
  801|    798|        Ok(ResumeState(classifier.stop()))
  802|  1.09k|    }
_RNvXs3_NtNtCse0ISAJPynz5_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E8recorderCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  804|  5.04k|    fn recorder(&mut self) -> &'r R {
  805|  5.04k|        self.recorder
  806|  5.04k|    }
_RNvXs4_NtNtCse0ISAJPynz5_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCshZc3FwCJ069_4core7convert4FromNtB5_8NodeTypeE4from:
  817|  22.5k|    fn from(value: NodeType) -> Self {
  818|  22.5k|        match value {
  819|  9.96k|            NodeType::Atomic => Self::Atomic,
  820|  12.5k|            NodeType::Complex(_) => Self::Complex,
  821|       |        }
  822|  22.5k|    }
_RNvXs_NtNtCse0ISAJPynz5_8rsonpath6engine4mainNtB4_10MainEngineNtB6_8Compiler13compile_query:
   93|  2.65k|    fn compile_query(query: &JsonPathQuery) -> Result<Self, CompilerError> {
   94|  2.65k|        let automaton = Automaton::new(query)?;
   95|       |        debug!("DFA:\n {}", automaton);
   96|  2.61k|        let simd = simd::configure();
   97|  2.61k|        log::info!("SIMD configuration:\n {simd}");
   98|  2.61k|        Ok(Self { automaton, simd })
   99|  2.65k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6engine4mainNtB5_10SmallStack3new:
  755|  2.02k|    fn new() -> Self {
  756|  2.02k|        Self { contents: smallvec![] }
  757|  2.02k|    }

_RINvNtNtCse0ISAJPynz5_8rsonpath6engine17select_root_query6match_NtNtNtB6_5input8borrowed13BorrowedBytesINtNtCs8f6x4lOZV33_5alloc3vec3VecNtNtB6_6result5MatchEECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   84|    591|pub(super) fn match_<I, S>(input: &I, sink: &mut S) -> Result<(), EngineError>
   85|    591|where
   86|    591|    I: Input,
   87|    591|    S: Sink<Match>,
   88|    591|{
   89|    591|    // For a full match we need to copy the entire input starting from first non-whitespace,
   90|    591|    // and then trim the whitespace from the end. This might be slow if the document is excessively
   91|    591|    // padded with whitespace at start and/or end, but that's a pathological case.
   92|    591|    let mut iter = input.iter_blocks::<_, BLOCK_SIZE>(&EmptyRecorder);
   93|    591|    let mut res: Vec<u8> = vec![];
   94|    591|    let mut first_significant_idx = None;
   95|    591|    let mut offset = 0;
   96|       |
   97|  5.17k|    while let Some(block) = iter.next().e()? {
   98|  4.58k|        if first_significant_idx.is_none() {
   99|       |            // Start of the root not found yet, look for it.
  100|  1.23k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
  101|       |
  102|  1.23k|            if let Some(first_idx) = first_significant_idx {
  103|    591|                // Start of the root found in this block, copy the relevant part.
  104|    591|                res.extend(&block[first_idx..]);
  105|    641|            } else {
  106|    641|                offset += block.len();
  107|    641|            }
  108|  3.35k|        } else {
  109|  3.35k|            // Start of the root was already found, now we are copying everything.
  110|  3.35k|            res.extend(&*block);
  111|  3.35k|        }
  112|       |    }
  113|       |
  114|    591|    if let Some(start) = first_significant_idx {
  115|       |        // Trim whitespace if we have a result.
  116|  64.9k|        while !res.is_empty() && is_json_whitespace(res[res.len() - 1]) {
  117|  64.3k|            res.pop();
  118|  64.3k|        }
  119|       |
  120|    591|        let actual_start = start + offset - input.leading_padding_len();
  121|    591|        sink.add_match(Match::from_start_and_bytes(actual_start, res))
  122|    591|            .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  123|      0|    }
  124|       |
  125|    591|    Ok(())
  126|    591|}
_RNCINvNtNtCse0ISAJPynz5_8rsonpath6engine17select_root_query6match_NtNtNtB8_5input8borrowed13BorrowedBytesINtNtCs8f6x4lOZV33_5alloc3vec3VecNtNtB8_6result5MatchEE0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  100|  59.0k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));

_RINvNvMNtNtCse0ISAJPynz5_8rsonpath6engine13tail_skippingINtB5_8TailSkippINtYpNtNtNtB9_14classification4simd4Simd16QuotesClassifierpEINtYpB1d_20StructuralClassifierpEpKj40_E4skip21avx2_pclmulqdq_popcntINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB3h_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB4J_5MatchEEKB2F_EINtB1f_12ResolvedSimdNtNtNtB1h_6quotes7avx2_6411ConstructorNtNtNtB1h_10structural7avx2_6411ConstructorNtNtNtB1h_5depth7avx2_6411ConstructorNtNtNtB1h_6memmem7avx2_6411ConstructorKj1_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   44|    510|        {
   45|    510|            debug!("Skipping");
   46|    510|            let mut idx = 0;
   47|    510|            let mut err = None;
   48|    510|
   49|    510|            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|    510|            tail_skip.classifier = Some('a: {
   52|    510|                let resume_state = classifier.stop();
   53|    510|                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|    510|                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|    510|                let mut current_vector = match first_vector {
   57|    388|                    Some(v) => Some(v),
   58|    122|                    None => match depth_classifier.next() {
   59|    122|                        Ok(v) => v,
   60|      0|                        Err(e) => {
   61|      0|                            err = Some(e);
   62|      0|                            let resume_state = depth_classifier.stop(None);
   63|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|    510|                let mut current_depth = 1;
   68|       |
   69|  2.42k|                'outer: while let Some(ref mut vector) = current_vector {
   70|  2.42k|                    vector.add_depth(current_depth);
   71|  2.42k|
   72|  2.42k|                    debug!("Fetched vector, current depth is {current_depth}");
   73|  2.42k|                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|  2.42k|
   75|  2.42k|                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|  1.83k|                        while vector.advance_to_next_depth_decrease() {
   77|  1.63k|                            if vector.get_depth() == 0 {
   78|       |                                debug!("Encountered depth 0, breaking.");
   79|    510|                                break 'outer;
   80|  1.12k|                            }
   81|       |                        }
   82|  1.70k|                    }
   83|       |
   84|  1.91k|                    current_depth = vector.depth_at_end();
   85|  1.91k|                    current_vector = match depth_classifier.next() {
   86|  1.91k|                        Ok(v) => v,
   87|      0|                        Err(e) => {
   88|      0|                            err = Some(e);
   89|      0|                            let resume_state = depth_classifier.stop(None);
   90|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|       |                debug!("Skipping complete, resuming structural classification.");
   96|    510|                let resume_state = depth_classifier.stop(current_vector);
   97|    510|                debug!("Finished at {}", resume_state.get_idx());
   98|    510|                idx = resume_state.get_idx() - 1;
   99|    510|                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|    510|            if let Some(err) = err {
  103|      0|                Err(err.into())
  104|       |            } else {
  105|    510|                Ok(idx)
_RNvMNtNtCse0ISAJPynz5_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   28|  2.12k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  2.12k|        Self {
   30|  2.12k|            classifier: Some(classifier),
   31|  2.12k|            simd,
   32|  2.12k|            _phantom: (PhantomData, PhantomData),
   33|  2.12k|        }
   34|  2.12k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4skipCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   36|    510|    pub(crate) fn skip(&mut self, opening: BracketType) -> Result<usize, EngineError> {
   37|    510|        dispatch_simd!(self.simd; self, opening =>
   38|       |        fn <'i, I, V>(
   39|       |            tail_skip: &mut TailSkip<'i, I, V::QuotesClassifier<'i, I>, V::StructuralClassifier<'i, I>, V, BLOCK_SIZE>,
   40|       |            opening: BracketType) -> Result<usize, EngineError>
   41|       |        where
   42|       |            I: InputBlockIterator<'i, BLOCK_SIZE>,
   43|       |            V: Simd
   44|       |        {
   45|       |            debug!("Skipping");
   46|       |            let mut idx = 0;
   47|       |            let mut err = None;
   48|       |
   49|       |            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|       |            tail_skip.classifier = Some('a: {
   52|       |                let resume_state = classifier.stop();
   53|       |                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|       |                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|       |                let mut current_vector = match first_vector {
   57|       |                    Some(v) => Some(v),
   58|       |                    None => match depth_classifier.next() {
   59|       |                        Ok(v) => v,
   60|       |                        Err(e) => {
   61|       |                            err = Some(e);
   62|       |                            let resume_state = depth_classifier.stop(None);
   63|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|       |                let mut current_depth = 1;
   68|       |
   69|       |                'outer: while let Some(ref mut vector) = current_vector {
   70|       |                    vector.add_depth(current_depth);
   71|       |
   72|       |                    debug!("Fetched vector, current depth is {current_depth}");
   73|       |                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|       |                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|       |                        while vector.advance_to_next_depth_decrease() {
   77|       |                            if vector.get_depth() == 0 {
   78|       |                                debug!("Encountered depth 0, breaking.");
   79|       |                                break 'outer;
   80|       |                            }
   81|       |                        }
   82|       |                    }
   83|       |
   84|       |                    current_depth = vector.depth_at_end();
   85|       |                    current_vector = match depth_classifier.next() {
   86|       |                        Ok(v) => v,
   87|       |                        Err(e) => {
   88|       |                            err = Some(e);
   89|       |                            let resume_state = depth_classifier.stop(None);
   90|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|       |                debug!("Skipping complete, resuming structural classification.");
   96|       |                let resume_state = depth_classifier.stop(current_vector);
   97|       |                debug!("Finished at {}", resume_state.get_idx());
   98|       |                idx = resume_state.get_idx() - 1;
   99|       |                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|       |            if let Some(err) = err {
  103|       |                Err(err.into())
  104|       |            } else {
  105|       |                Ok(idx)
  106|       |            }
  107|       |        })
  108|    510|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4stopCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  110|    798|    pub(crate) fn stop(self) -> ResumeClassifierState<'i, I, V::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE> {
  111|    798|        self.classifier.expect("tail skip must always hold a classifier").stop()
  112|    798|    }
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1c_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2E_5MatchEEKj40_EINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB4c_10structural7avx2_6416Avx2Classifier64B17_B45_EINtNtB4c_4simd12ResolvedSimdNtB48_11ConstructorNtB5h_11ConstructorNtNtNtB4c_5depth7avx2_6411ConstructorNtNtNtB4c_6memmem7avx2_6411ConstructorKj1_EKB40_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  138|   158k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|   158k|        self.classifier
  140|   158k|            .as_mut()
  141|   158k|            .expect("tail skip must always hold a classifier")
  142|   158k|    }

_RNvXNtCse0ISAJPynz5_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  206|  53.1k|    fn halves(&self) -> (&[u8], &[u8]) {
  207|  53.1k|        assert_eq!(N % 2, 0);
  208|  53.1k|        (&self[..N / 2], &self[N / 2..])
  209|  53.1k|    }
_RINvNtCse0ISAJPynz5_8rsonpath5input8align_toKj80_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  225|  2.65k|fn align_to<const N: usize>(bytes: &[u8]) -> (&[u8], &[u8], &[u8]) {
  226|  2.65k|    let ptr = bytes.as_ptr();
  227|  2.65k|    let offset = ptr.align_offset(N);
  228|  2.65k|    if offset > bytes.len() {
  229|  1.01k|        (bytes, &[], &[])
  230|       |    } else {
  231|  1.64k|        let (left, rest) = bytes.split_at(offset);
  232|  1.64k|        let middle_len = (rest.len() / N) * N;
  233|  1.64k|        let (middle, right) = rest.split_at(middle_len);
  234|  1.64k|
  235|  1.64k|        (left, middle, right)
  236|       |    }
  237|  2.65k|}

_RINvNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB8_13BorrowedBytesNtBa_5Input12seek_forward11handle_lastKj1_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  165|      5|        fn handle_last<const N: usize>(
  166|      5|            last_block: &PaddedBlock,
  167|      5|            offset: usize,
  168|      5|            needles: [u8; N],
  169|      5|        ) -> Option<(usize, u8)> {
  170|      5|            last_block
  171|      5|                .bytes()
  172|      5|                .seek_forward(0, needles)
  173|      5|                .map(|(x, y)| (x + offset, y))
  174|      5|        }
_RINvNvXs3_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2N_5MatchEEKj40_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  266|  8.52k|        fn cold_path<'a, 'r, R, const N: usize>(
  267|  8.52k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  268|  8.52k|        ) -> Option<&'a [u8]>
  269|  8.52k|        where
  270|  8.52k|            R: InputRecorder<&'a [u8]>,
  271|  8.52k|        {
  272|  8.52k|            let block = iter.input.try_slice(iter.idx, N);
  273|       |
  274|  8.52k|            if let Some(b) = block {
  275|  7.29k|                iter.recorder.record_block_start(b);
  276|  7.29k|                iter.idx += N;
  277|  7.29k|            }
  278|       |
  279|  8.52k|            block
  280|  8.52k|        }
_RINvNvXs3_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathNtNtNtBc_6result5empty13EmptyRecorderKj40_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  266|  2.95k|        fn cold_path<'a, 'r, R, const N: usize>(
  267|  2.95k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  268|  2.95k|        ) -> Option<&'a [u8]>
  269|  2.95k|        where
  270|  2.95k|            R: InputRecorder<&'a [u8]>,
  271|  2.95k|        {
  272|  2.95k|            let block = iter.input.try_slice(iter.idx, N);
  273|       |
  274|  2.95k|            if let Some(b) = block {
  275|  2.36k|                iter.recorder.record_block_start(b);
  276|  2.36k|                iter.idx += N;
  277|  2.36k|            }
  278|       |
  279|  2.95k|            block
  280|  2.95k|        }
_RINvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input12seek_forwardKj1_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  151|  12.5k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, Infallible> {
  152|  12.5k|        return Ok(
  153|  12.5k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  154|  9.48k|                match self.middle_bytes.seek_forward(from - MAX_BLOCK_SIZE, needles) {
  155|  9.47k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  156|      5|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len(), needles),
  157|       |                }
  158|       |            } else {
  159|  3.05k|                self.as_padded_input().seek_forward(from, needles)
  160|       |            },
  161|       |        );
  162|       |
  163|       |        #[cold]
  164|       |        #[inline(never)]
  165|       |        fn handle_last<const N: usize>(
  166|       |            last_block: &PaddedBlock,
  167|       |            offset: usize,
  168|       |            needles: [u8; N],
  169|       |        ) -> Option<(usize, u8)> {
  170|       |            last_block
  171|       |                .bytes()
  172|       |                .seek_forward(0, needles)
  173|       |                .map(|(x, y)| (x + offset, y))
  174|       |        }
  175|  12.5k|    }
_RNCINvNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtBa_13BorrowedBytesNtBc_5Input12seek_forward11handle_lastKj1_E0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  173|      5|                .map(|(x, y)| (x + offset, y))
_RNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input13seek_backwardCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  133|  15.8k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  134|  15.8k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  135|  9.56k|            match self.middle_bytes.seek_backward(from - MAX_BLOCK_SIZE, needle) {
  136|  7.78k|                Some(x) => Some(x + MAX_BLOCK_SIZE),
  137|  1.78k|                None => handle_first(&self.first_block, needle),
  138|       |            }
  139|       |        } else {
  140|  6.25k|            self.as_padded_input().seek_backward(from, needle)
  141|       |        };
  142|       |
  143|       |        #[cold]
  144|       |        #[inline(never)]
  145|       |        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  146|       |            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  147|       |        }
  148|  15.8k|    }
_RNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input27seek_non_whitespace_forwardCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  178|  57.2k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, Infallible> {
  179|  57.2k|        return Ok(
  180|  57.2k|            // The hot path is when we start and end within the middle section.
  181|  57.2k|            // We use the regular slice path for that scenario, and fall back to the very expensive
  182|  57.2k|            // TwoSidesPaddedInput with all bells and whistles only when that doesn't work.
  183|  57.2k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  184|  39.7k|                match self.middle_bytes.seek_non_whitespace_forward(from - MAX_BLOCK_SIZE) {
  185|  39.7k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  186|     17|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len()),
  187|       |                }
  188|       |            } else {
  189|  17.5k|                self.as_padded_input().seek_non_whitespace_forward(from)
  190|       |            },
  191|       |        );
  192|       |
  193|       |        #[cold]
  194|       |        #[inline(never)]
  195|       |        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  196|       |            last_block
  197|       |                .bytes()
  198|       |                .seek_non_whitespace_forward(0)
  199|       |                .map(|(x, y)| (x + offset, y))
  200|       |        }
  201|  57.2k|    }
_RNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input28seek_non_whitespace_backwardCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  204|  11.0k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  205|  11.0k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  206|  8.69k|            match self.middle_bytes.seek_non_whitespace_backward(from - MAX_BLOCK_SIZE) {
  207|  8.69k|                Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  208|      7|                None => handle_first(&self.first_block),
  209|       |            }
  210|       |        } else {
  211|  2.38k|            self.as_padded_input().seek_non_whitespace_backward(from)
  212|       |        };
  213|       |
  214|       |        #[cold]
  215|       |        #[inline(never)]
  216|       |        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  217|       |            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  218|       |        }
  219|  11.0k|    }
_RNvXs3_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E10get_offsetCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  291|   106k|    fn get_offset(&self) -> usize {
  292|   106k|        debug!("getting input iter {}", self.idx);
  293|   106k|        self.idx
  294|   106k|    }
_RNvXs3_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E4nextCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  250|  26.3k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  251|  26.3k|        debug!("next!");
  252|  26.3k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  253|  17.8k|            let start = self.idx - MAX_BLOCK_SIZE;
  254|  17.8k|            // SAFETY: Bounds check above.
  255|  17.8k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  256|  17.8k|            // By construction, middle has length divisible by N.
  257|  17.8k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  258|  17.8k|            self.recorder.record_block_start(block);
  259|  17.8k|            self.idx += N;
  260|  17.8k|            Ok(Some(block))
  261|       |        } else {
  262|  8.52k|            Ok(cold_path(self))
  263|       |        };
  264|       |
  265|       |        #[cold]
  266|       |        fn cold_path<'a, 'r, R, const N: usize>(
  267|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  268|       |        ) -> Option<&'a [u8]>
  269|       |        where
  270|       |            R: InputRecorder<&'a [u8]>,
  271|       |        {
  272|       |            let block = iter.input.try_slice(iter.idx, N);
  273|       |
  274|       |            if let Some(b) = block {
  275|       |                iter.recorder.record_block_start(b);
  276|       |                iter.idx += N;
  277|       |            }
  278|       |
  279|       |            block
  280|       |        }
  281|  26.3k|    }
_RINvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1z_5MatchEEKj40_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  119|  2.02k|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  120|  2.02k|    where
  121|  2.02k|        R: InputRecorder<&'b [u8]>,
  122|  2.02k|    {
  123|  2.02k|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  124|  2.02k|
  125|  2.02k|        Self::BlockIterator {
  126|  2.02k|            idx: 0,
  127|  2.02k|            input: padded_input,
  128|  2.02k|            recorder,
  129|  2.02k|        }
  130|  2.02k|    }
_RNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input15is_member_match:
  222|  37.0k|    fn is_member_match(&self, from: usize, to: usize, member: &StringPattern) -> Result<bool, Self::Error> {
  223|  37.0k|        debug_assert!(from < to);
  224|       |        // The hot path is when we're checking fully within the middle section.
  225|       |        // This has to be as fast as possible, so the "cold" path referring to the TwoSidesPaddedInput
  226|       |        // impl is explicitly marked with #[cold].
  227|  37.0k|        if from > MAX_BLOCK_SIZE && to < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  228|       |            // This is the hot path -- do the bounds check and memcmp.
  229|  23.4k|            let bytes = self.middle_bytes;
  230|  23.4k|            let from = from - MAX_BLOCK_SIZE;
  231|  23.4k|            let to = to - MAX_BLOCK_SIZE;
  232|  23.4k|            let slice = &bytes[from..to];
  233|  23.4k|            Ok(member.quoted() == slice && (from == 0 || bytes[from - 1] != b'\\'))
  234|       |        } else {
  235|       |            // This is a very expensive, cold path.
  236|  13.5k|            Ok(self.as_padded_input().is_member_match(from, to, member))
  237|       |        }
  238|  37.0k|    }
_RNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input19leading_padding_len:
  104|  2.61k|    fn leading_padding_len(&self) -> usize {
  105|  2.61k|        self.first_block.padding_len()
  106|  2.61k|    }
_RINvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksNtNtNtBa_6result5empty13EmptyRecorderKj40_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  119|    591|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  120|    591|    where
  121|    591|        R: InputRecorder<&'b [u8]>,
  122|    591|    {
  123|    591|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  124|    591|
  125|    591|        Self::BlockIterator {
  126|    591|            idx: 0,
  127|    591|            input: padded_input,
  128|    591|            recorder,
  129|    591|        }
  130|    591|    }
_RNvXs3_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputNtNtNtB9_6result5empty13EmptyRecorderKj40_EINtB7_18InputBlockIteratorKB2v_E4nextCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  250|  5.17k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  251|  5.17k|        debug!("next!");
  252|  5.17k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  253|  2.21k|            let start = self.idx - MAX_BLOCK_SIZE;
  254|  2.21k|            // SAFETY: Bounds check above.
  255|  2.21k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  256|  2.21k|            // By construction, middle has length divisible by N.
  257|  2.21k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  258|  2.21k|            self.recorder.record_block_start(block);
  259|  2.21k|            self.idx += N;
  260|  2.21k|            Ok(Some(block))
  261|       |        } else {
  262|  2.95k|            Ok(cold_path(self))
  263|       |        };
  264|       |
  265|       |        #[cold]
  266|       |        fn cold_path<'a, 'r, R, const N: usize>(
  267|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  268|       |        ) -> Option<&'a [u8]>
  269|       |        where
  270|       |            R: InputRecorder<&'a [u8]>,
  271|       |        {
  272|       |            let block = iter.input.try_slice(iter.idx, N);
  273|       |
  274|       |            if let Some(b) = block {
  275|       |                iter.recorder.record_block_start(b);
  276|       |                iter.idx += N;
  277|       |            }
  278|       |
  279|       |            block
  280|       |        }
  281|  5.17k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB2_13BorrowedBytes3new:
   44|  2.65k|    pub fn new(bytes: &'a [u8]) -> Self {
   45|  2.65k|        let (first, middle, last) = align_to::<MAX_BLOCK_SIZE>(bytes);
   46|  2.65k|        let first_block = PaddedBlock::pad_first_block(first);
   47|  2.65k|        let last_block = PaddedBlock::pad_last_block(last);
   48|  2.65k|
   49|  2.65k|        Self {
   50|  2.65k|            middle_bytes: middle,
   51|  2.65k|            first_block,
   52|  2.65k|            last_block,
   53|  2.65k|        }
   54|  2.65k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB2_13BorrowedBytes15as_padded_input:
   56|  42.7k|    pub(super) fn as_padded_input(&self) -> TwoSidesPaddedInput<'_> {
   57|  42.7k|        TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block)
   58|  42.7k|    }
_RNvNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input13seek_backward12handle_first:
  145|  1.78k|        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  146|  1.78k|            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  147|  1.78k|        }
_RNvNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input27seek_non_whitespace_forward11handle_last:
  195|     17|        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  196|     17|            last_block
  197|     17|                .bytes()
  198|     17|                .seek_non_whitespace_forward(0)
  199|     17|                .map(|(x, y)| (x + offset, y))
  200|     17|        }
_RNvNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input28seek_non_whitespace_backward12handle_first:
  216|      7|        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  217|      7|            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  218|      7|        }
_RNCNvNvXs2_NtNtCse0ISAJPynz5_8rsonpath5input8borrowedNtB9_13BorrowedBytesNtBb_5Input27seek_non_whitespace_forward11handle_last0Bd_:
  199|     17|                .map(|(x, y)| (x + offset, y))

_RNvXNtNtCse0ISAJPynz5_8rsonpath5input5errorINtNtCshZc3FwCJ069_4core6result6ResultINtNtBK_6option6OptionRShENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   50|  31.5k|    fn e(self) -> Result<T, InputError> {
   51|  31.5k|        self.map_err(std::convert::Into::into)
   52|  31.5k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath5input5errorINtNtCshZc3FwCJ069_4core6result6ResultINtNtBK_6option6OptionTjhEENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   50|  69.7k|    fn e(self) -> Result<T, InputError> {
   51|  69.7k|        self.map_err(std::convert::Into::into)
   52|  69.7k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath5input5errorINtNtCshZc3FwCJ069_4core6result6ResultbNtB2_10InfallibleEINtB2_21InputErrorConvertiblebE1eCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   50|  21.5k|    fn e(self) -> Result<T, InputError> {
   51|  21.5k|        self.map_err(std::convert::Into::into)
   52|  21.5k|    }

_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6middle:
  314|  46.3k|    pub(super) fn middle(&self) -> &'a [u8] {
  315|  46.3k|        self.middle
  316|  46.3k|    }
_RINvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput22seek_forward_from_lastKj1_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  373|    287|    fn seek_forward_from_last<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  374|    287|        assert!(N > 0);
  375|    287|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  376|    287|        let bytes = &self.last_block.bytes;
  377|    287|
  378|    287|        seek_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needles)
  379|    287|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  380|    287|    }
_RINvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput23seek_forward_from_firstKj1_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  349|  2.77k|    fn seek_forward_from_first<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  350|  2.77k|        assert!(N > 0);
  351|  2.77k|        debug_assert!(from < MAX_BLOCK_SIZE);
  352|  2.77k|        let bytes = &self.first_block.bytes;
  353|  2.77k|
  354|  2.77k|        seek_forward_impl(bytes, from, needles).or_else(|| {
  355|       |            if self.middle.is_empty() {
  356|       |                self.seek_forward_from_last(bytes.len(), needles)
  357|       |            } else {
  358|       |                self.seek_forward_from_middle(bytes.len(), needles)
  359|       |            }
  360|  2.77k|        })
  361|  2.77k|    }
_RINvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput24seek_forward_from_middleKj1_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  363|      6|    fn seek_forward_from_middle<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  364|      6|        assert!(N > 0);
  365|      6|        debug_assert!(from >= MAX_BLOCK_SIZE);
  366|      6|        let bytes = self.middle;
  367|      6|
  368|      6|        seek_forward_impl(bytes, from - MAX_BLOCK_SIZE, needles)
  369|      6|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  370|      6|            .or_else(|| self.seek_forward_from_last(bytes.len() + MAX_BLOCK_SIZE, needles))
  371|      6|    }
_RINvNtNtCse0ISAJPynz5_8rsonpath5input7padding17seek_forward_implKj1_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  538|  3.07k|fn seek_forward_impl<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  539|  3.07k|    let mut idx = from;
  540|  3.07k|    if idx >= bytes.len() {
  541|      0|        return None;
  542|  3.07k|    }
  543|       |
  544|       |    loop {
  545|  4.42k|        let b = bytes[idx];
  546|  4.42k|        if needles.contains(&b) {
  547|  3.05k|            return Some((idx, b));
  548|  1.36k|        }
  549|  1.36k|        idx += 1;
  550|  1.36k|        if idx == bytes.len() {
  551|     15|            return None;
  552|  1.35k|        }
  553|       |    }
  554|  3.07k|}
_RINvXs0_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInputNtB8_13SliceSeekable12seek_forwardKj1_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  126|  3.05k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  127|  3.05k|        if from < MAX_BLOCK_SIZE {
  128|  2.77k|            self.seek_forward_from_first(from, needles)
  129|    278|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  130|      0|            self.seek_forward_from_middle(from, needles)
  131|       |        } else {
  132|    278|            self.seek_forward_from_last(from, needles)
  133|       |        }
  134|  3.05k|    }
_RNCINvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput22seek_forward_from_lastKj1_E0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  379|    287|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNCINvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput23seek_forward_from_firstKj1_E0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  354|     15|        seek_forward_impl(bytes, from, needles).or_else(|| {
  355|     15|            if self.middle.is_empty() {
  356|      9|                self.seek_forward_from_last(bytes.len(), needles)
  357|       |            } else {
  358|      6|                self.seek_forward_from_middle(bytes.len(), needles)
  359|       |            }
  360|     15|        })
_RNCINvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput24seek_forward_from_middleKj1_E0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  369|      6|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNvMNtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB2_11PaddedBlock3len:
   22|  28.9k|    pub(super) const fn len(&self) -> usize {
   23|  28.9k|        MAX_BLOCK_SIZE
   24|  28.9k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB2_11PaddedBlock11padding_len:
   26|  2.61k|    pub(super) fn padding_len(&self) -> usize {
   27|  2.61k|        self.padding_len
   28|  2.61k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB2_11PaddedBlock5bytes:
   30|  1.81k|    pub(super) fn bytes(&self) -> &[u8] {
   31|  1.81k|        &self.bytes
   32|  1.81k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB2_11PaddedBlock15pad_first_block:
   34|  2.65k|    pub(super) fn pad_first_block(bytes: &[u8]) -> Self {
   35|  2.65k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   36|  2.65k|        let mut block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   37|  2.65k|        let block_start = MAX_BLOCK_SIZE - bytes.len();
   38|  2.65k|
   39|  2.65k|        block_buf[block_start..].copy_from_slice(bytes);
   40|  2.65k|
   41|  2.65k|        Self {
   42|  2.65k|            bytes: block_buf,
   43|  2.65k|            padding_len: block_start,
   44|  2.65k|        }
   45|  2.65k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB2_11PaddedBlock14pad_last_block:
   47|  2.65k|    pub(super) fn pad_last_block(bytes: &[u8]) -> Self {
   48|  2.65k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   49|  2.65k|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   50|  2.65k|        let block_end = bytes.len();
   51|  2.65k|
   52|  2.65k|        last_block_buf[..block_end].copy_from_slice(bytes);
   53|  2.65k|
   54|  2.65k|        Self {
   55|  2.65k|            bytes: last_block_buf,
   56|  2.65k|            padding_len: MAX_BLOCK_SIZE - block_end,
   57|  2.65k|        }
   58|  2.65k|    }
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable13seek_backward:
  114|  6.25k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  115|  6.25k|        if from < MAX_BLOCK_SIZE {
  116|  3.47k|            self.seek_backward_from_first(from, needle)
  117|  2.78k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  118|      0|            self.seek_backward_from_middle(from, needle)
  119|       |        } else {
  120|  2.78k|            self.seek_backward_from_last(from, needle)
  121|       |        }
  122|  6.25k|    }
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable27seek_non_whitespace_forward:
  138|  17.5k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
  139|  17.5k|        if from < MAX_BLOCK_SIZE {
  140|  11.0k|            self.seek_non_whitespace_forward_from_first(from)
  141|  6.50k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  142|      0|            self.seek_non_whitespace_forward_from_middle(from)
  143|       |        } else {
  144|  6.50k|            self.seek_non_whitespace_forward_from_last(from)
  145|       |        }
  146|  17.5k|    }
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable28seek_non_whitespace_backward:
  150|  2.38k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  151|  2.38k|        if from < MAX_BLOCK_SIZE {
  152|  1.94k|            self.seek_non_whitespace_backward_from_first(from)
  153|    435|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  154|      0|            self.seek_non_whitespace_backward_from_middle(from)
  155|       |        } else {
  156|    435|            self.seek_non_whitespace_backward_from_last(from)
  157|       |        }
  158|  2.38k|    }
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable15is_member_match:
  162|  13.5k|    fn is_member_match(&self, from: usize, to: usize, member: &StringPattern) -> bool {
  163|  13.5k|        debug_assert!(from < to);
  164|  13.5k|        let other = member.quoted();
  165|  13.5k|        self.cold_member_match(other, from, to)
  166|  13.5k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput3new:
  305|  45.4k|    pub(super) fn new(first: &'a PaddedBlock, middle: &'a [u8], last: &'a PaddedBlock) -> Self {
  306|  45.4k|        Self {
  307|  45.4k|            first_block: first,
  308|  45.4k|            middle,
  309|  45.4k|            last_block: last,
  310|  45.4k|        }
  311|  45.4k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput24seek_backward_from_first:
  318|  5.21k|    fn seek_backward_from_first(&self, from: usize, needle: u8) -> Option<usize> {
  319|  5.21k|        debug_assert!(from < MAX_BLOCK_SIZE);
  320|  5.21k|        let bytes = &self.first_block.bytes;
  321|  5.21k|
  322|  5.21k|        seek_backward_impl(bytes, from, needle)
  323|  5.21k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput25seek_backward_from_middle:
  325|    652|    fn seek_backward_from_middle(&self, from: usize, needle: u8) -> Option<usize> {
  326|    652|        debug_assert!(from >= MAX_BLOCK_SIZE);
  327|    652|        let bytes = self.middle;
  328|    652|
  329|    652|        seek_backward_impl(bytes, from - MAX_BLOCK_SIZE, needle)
  330|    652|            .map(|x| x + MAX_BLOCK_SIZE)
  331|    652|            .or_else(|| self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle))
  332|    652|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput23seek_backward_from_last:
  334|  2.78k|    fn seek_backward_from_last(&self, from: usize, needle: u8) -> Option<usize> {
  335|  2.78k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  336|  2.78k|        let bytes = &self.last_block.bytes;
  337|  2.78k|
  338|  2.78k|        seek_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needle)
  339|  2.78k|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
  340|  2.78k|            .or_else(|| {
  341|       |                if self.middle.is_empty() {
  342|       |                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  343|       |                } else {
  344|       |                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  345|       |                }
  346|  2.78k|            })
  347|  2.78k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first:
  382|  11.0k|    fn seek_non_whitespace_forward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  383|  11.0k|        debug_assert!(from < MAX_BLOCK_SIZE);
  384|  11.0k|        let bytes = &self.first_block.bytes;
  385|  11.0k|
  386|  11.0k|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  387|       |            if self.middle.is_empty() {
  388|       |                self.seek_non_whitespace_forward_from_last(bytes.len())
  389|       |            } else {
  390|       |                self.seek_non_whitespace_forward_from_middle(bytes.len())
  391|       |            }
  392|  11.0k|        })
  393|  11.0k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle:
  395|     11|    fn seek_non_whitespace_forward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  396|     11|        debug_assert!(from >= MAX_BLOCK_SIZE);
  397|     11|        let bytes = self.middle;
  398|     11|
  399|     11|        seek_non_whitespace_forward_impl(bytes, from - MAX_BLOCK_SIZE)
  400|     11|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  401|     11|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
  402|     11|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last:
  404|  6.53k|    fn seek_non_whitespace_forward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  405|  6.53k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  406|  6.53k|        let bytes = &self.last_block.bytes;
  407|  6.53k|
  408|  6.53k|        seek_non_whitespace_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  409|  6.53k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  410|  6.53k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_backward_from_first:
  412|  1.96k|    fn seek_non_whitespace_backward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  413|  1.96k|        debug_assert!(from < MAX_BLOCK_SIZE);
  414|  1.96k|        let bytes = &self.first_block.bytes;
  415|  1.96k|
  416|  1.96k|        seek_non_whitespace_backward_impl(bytes, from)
  417|  1.96k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle:
  419|      9|    fn seek_non_whitespace_backward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  420|      9|        debug_assert!(from >= MAX_BLOCK_SIZE);
  421|      9|        let bytes = self.middle;
  422|      9|
  423|      9|        seek_non_whitespace_backward_impl(bytes, from - MAX_BLOCK_SIZE)
  424|      9|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  425|      9|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
  426|      9|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last:
  428|    435|    fn seek_non_whitespace_backward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  429|    435|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  430|    435|        let bytes = &self.last_block.bytes;
  431|    435|
  432|    435|        seek_non_whitespace_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  433|    435|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  434|    435|            .or_else(|| {
  435|       |                if self.middle.is_empty() {
  436|       |                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  437|       |                } else {
  438|       |                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  439|       |                }
  440|    435|            })
  441|    435|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput9try_slice:
  443|  11.4k|    pub(super) fn try_slice(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  444|  11.4k|        debug_assert!(len < MAX_BLOCK_SIZE);
  445|       |
  446|  11.4k|        if start < MAX_BLOCK_SIZE {
  447|  5.23k|            Some(self.slice_first(start, len))
  448|  6.25k|        } else if start < self.middle.len() + MAX_BLOCK_SIZE {
  449|      0|            Some(self.slice_middle(start, len))
  450|       |        } else {
  451|  6.25k|            self.slice_last(start, len)
  452|       |        }
  453|  11.4k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_first:
  455|  5.23k|    fn slice_first(&self, start: usize, len: usize) -> &'a [u8] {
  456|  5.23k|        &self.first_block.bytes[start..start + len]
  457|  5.23k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput10slice_last:
  464|  6.25k|    fn slice_last(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  465|  6.25k|        let start = start - self.middle.len() - MAX_BLOCK_SIZE;
  466|  6.25k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
  467|  6.25k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_parts:
  472|  13.5k|    fn slice_parts(&self, from: usize, to: usize) -> (&[u8], &[u8], &[u8]) {
  473|       |        use std::cmp::min;
  474|       |
  475|  13.5k|        let first_from = min(from, MAX_BLOCK_SIZE);
  476|  13.5k|        let first_to = min(to, MAX_BLOCK_SIZE);
  477|  13.5k|
  478|  13.5k|        let from = from.saturating_sub(MAX_BLOCK_SIZE);
  479|  13.5k|        let to = to.saturating_sub(MAX_BLOCK_SIZE);
  480|  13.5k|        let middle_from = min(from, self.middle.len());
  481|  13.5k|        let middle_to = min(to, self.middle.len());
  482|  13.5k|
  483|  13.5k|        let from = from.saturating_sub(self.middle.len());
  484|  13.5k|        let to = to.saturating_sub(self.middle.len());
  485|  13.5k|        let last_from = min(from, self.last_block.len());
  486|  13.5k|        let last_to = min(to, self.last_block.len());
  487|  13.5k|
  488|  13.5k|        (
  489|  13.5k|            &self.first_block.bytes[first_from..first_to],
  490|  13.5k|            &self.middle[middle_from..middle_to],
  491|  13.5k|            &self.last_block.bytes[last_from..last_to],
  492|  13.5k|        )
  493|  13.5k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6get_at:
  495|  13.5k|    fn get_at(&self, idx: usize) -> Option<u8> {
  496|  13.5k|        if idx < MAX_BLOCK_SIZE {
  497|  10.0k|            Some(self.first_block.bytes[idx])
  498|  3.55k|        } else if idx < self.middle.len() + MAX_BLOCK_SIZE {
  499|    106|            Some(self.middle[idx - MAX_BLOCK_SIZE])
  500|  3.44k|        } else if idx < self.middle.len() + 2 * MAX_BLOCK_SIZE {
  501|  3.42k|            Some(self.last_block.bytes[idx - MAX_BLOCK_SIZE - self.middle.len()])
  502|       |        } else {
  503|     23|            None
  504|       |        }
  505|  13.5k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput17cold_member_match:
  507|  13.5k|    fn cold_member_match(&self, other: &[u8], from: usize, to: usize) -> bool {
  508|  13.5k|        let (first_self, middle_self, last_self) = self.slice_parts(from, to);
  509|  13.5k|        let first_other = &other[..first_self.len()];
  510|  13.5k|        let middle_other = &other[first_self.len()..first_self.len() + middle_self.len()];
  511|  13.5k|        let last_other = &other[first_self.len() + middle_self.len()..];
  512|  13.5k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));
  513|  13.5k|
  514|  13.5k|        first_self == first_other
  515|  8.60k|            && middle_self == middle_other
  516|  8.52k|            && last_self == last_other
  517|  5.79k|            && preceding_char != Some(b'\\')
  518|  13.5k|    }
_RNvNtNtCse0ISAJPynz5_8rsonpath5input7padding18seek_backward_impl:
  522|  8.65k|fn seek_backward_impl(bytes: &[u8], from: usize, needle: u8) -> Option<usize> {
  523|  8.65k|    let mut idx = from;
  524|  8.65k|    assert!(idx < bytes.len());
  525|       |
  526|       |    loop {
  527|   301k|        if bytes[idx] == needle {
  528|  6.25k|            return Some(idx);
  529|   295k|        }
  530|   295k|        if idx == 0 {
  531|  2.39k|            return None;
  532|   293k|        }
  533|   293k|        idx -= 1;
  534|       |    }
  535|  8.65k|}
_RNvNtNtCse0ISAJPynz5_8rsonpath5input7padding32seek_non_whitespace_forward_impl:
  557|  17.5k|fn seek_non_whitespace_forward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  558|  17.5k|    let mut idx = from;
  559|  17.5k|    if idx >= bytes.len() {
  560|      0|        return None;
  561|  17.5k|    }
  562|       |
  563|       |    loop {
  564|  22.4k|        let b = bytes[idx];
  565|  22.4k|        if !b.is_ascii_whitespace() {
  566|  17.5k|            return Some((idx, b));
  567|  4.97k|        }
  568|  4.97k|        idx += 1;
  569|  4.97k|        if idx == bytes.len() {
  570|     42|            return None;
  571|  4.93k|        }
  572|       |    }
  573|  17.5k|}
_RNvNtNtCse0ISAJPynz5_8rsonpath5input7padding33seek_non_whitespace_backward_impl:
  576|  2.40k|fn seek_non_whitespace_backward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  577|  2.40k|    let mut idx = from;
  578|  2.40k|    if idx >= bytes.len() {
  579|      0|        return None;
  580|  2.40k|    }
  581|       |
  582|       |    loop {
  583|  4.75k|        let b = bytes[idx];
  584|  4.75k|        if !b.is_ascii_whitespace() {
  585|  2.38k|            return Some((idx, b));
  586|  2.37k|        }
  587|  2.37k|        if idx == 0 {
  588|     26|            return None;
  589|  2.34k|        }
  590|  2.34k|        idx -= 1;
  591|       |    }
  592|  2.40k|}
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput25seek_backward_from_middle0Bb_:
  330|    326|            .map(|x| x + MAX_BLOCK_SIZE)
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput25seek_backward_from_middles_0Bb_:
  331|    326|            .or_else(|| self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle))
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_last0Bb_:
  339|    716|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_lasts_0Bb_:
  340|  2.07k|            .or_else(|| {
  341|  2.07k|                if self.middle.is_empty() {
  342|  1.41k|                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  343|       |                } else {
  344|    652|                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  345|       |                }
  346|  2.07k|            })
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first0Bb_:
  386|     40|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  387|     40|            if self.middle.is_empty() {
  388|     29|                self.seek_non_whitespace_forward_from_last(bytes.len())
  389|       |            } else {
  390|     11|                self.seek_non_whitespace_forward_from_middle(bytes.len())
  391|       |            }
  392|     40|        })
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle0Bb_:
  400|     11|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last0Bb_:
  409|  6.52k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle0Bb_:
  424|      4|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middles_0Bb_:
  425|      5|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last0Bb_:
  433|    414|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_lasts_0Bb_:
  434|     21|            .or_else(|| {
  435|     21|                if self.middle.is_empty() {
  436|     12|                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  437|       |                } else {
  438|      9|                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  439|       |                }
  440|     21|            })
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput10slice_last0Bb_:
  466|  4.43k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
_RNCNvMs2_NtNtCse0ISAJPynz5_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_match0Bb_:
  512|  13.5k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));

_RINvXNtNtCse0ISAJPynz5_8rsonpath5input5sliceRShNtB5_13SliceSeekable12seek_forwardKj1_ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   33|  9.48k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
   34|  9.48k|        let bytes = self.as_ref();
   35|  9.48k|
   36|  9.48k|        assert!(N > 0);
   37|  9.48k|        let mut idx = from;
   38|  9.48k|
   39|  9.48k|        if idx >= bytes.len() {
   40|      0|            return None;
   41|  9.48k|        }
   42|       |
   43|       |        loop {
   44|  10.2k|            let b = bytes[idx];
   45|  10.2k|            if needles.contains(&b) {
   46|  9.48k|                return Some((idx, b));
   47|    782|            }
   48|    782|            idx += 1;
   49|    782|            if idx == bytes.len() {
   50|      5|                return None;
   51|    777|            }
   52|       |        }
   53|  9.48k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath5input5sliceRShNtB4_13SliceSeekable13seek_backwardB6_:
   15|  11.3k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
   16|  11.3k|        let bytes = self.as_ref();
   17|  11.3k|
   18|  11.3k|        let mut idx = from;
   19|  11.3k|        assert!(idx < bytes.len());
   20|       |
   21|       |        loop {
   22|   219k|            if bytes[idx] == needle {
   23|  9.56k|                return Some(idx);
   24|   210k|            }
   25|   210k|            if idx == 0 {
   26|  1.78k|                return None;
   27|   208k|            }
   28|   208k|            idx -= 1;
   29|       |        }
   30|  11.3k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardB6_:
   56|  39.7k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|  39.7k|        let bytes = self.as_ref();
   58|  39.7k|        let mut idx = from;
   59|  39.7k|
   60|  39.7k|        if idx >= bytes.len() {
   61|      0|            return None;
   62|  39.7k|        }
   63|       |
   64|       |        loop {
   65|  41.9k|            let b = bytes[idx];
   66|  41.9k|            if !b.is_ascii_whitespace() {
   67|  39.7k|                return Some((idx, b));
   68|  2.19k|            }
   69|  2.19k|            idx += 1;
   70|  2.19k|            if idx == bytes.len() {
   71|     17|                return None;
   72|  2.18k|            }
   73|       |        }
   74|  39.7k|    }
_RNvXNtNtCse0ISAJPynz5_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardB6_:
   77|  8.70k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|  8.70k|        let bytes = self.as_ref();
   79|  8.70k|        let mut idx = from;
   80|  8.70k|
   81|  8.70k|        if idx >= bytes.len() {
   82|      0|            return None;
   83|  8.70k|        }
   84|       |
   85|       |        loop {
   86|  9.35k|            let b = bytes[idx];
   87|  9.35k|            if !b.is_ascii_whitespace() {
   88|  8.69k|                return Some((idx, b));
   89|    653|            }
   90|    653|            if idx == 0 {
   91|      7|                return None;
   92|    646|            }
   93|    646|            idx -= 1;
   94|       |        }
   95|  8.70k|    }

_RNvCse0ISAJPynz5_8rsonpath18is_json_whitespace:
  303|   133k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  304|   133k|    JSON_WHITESPACE_BYTES.contains(&x)
  305|   133k|}

_RNvXs2_NtCse0ISAJPynz5_8rsonpath6resultINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  142|  16.4k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  143|  16.4k|        self.push(data);
  144|  16.4k|        Ok(())
  145|  16.4k|    }
_RNvMs_NtCse0ISAJPynz5_8rsonpath6resultNtB4_5Match20from_start_and_bytes:
   79|    591|    pub(crate) fn from_start_and_bytes(span_start: usize, bytes: Vec<u8>) -> Self {
   80|    591|        Self { bytes, span_start }
   81|    591|    }

_RNvXNtNtCse0ISAJPynz5_8rsonpath6result5emptyNtB2_13EmptyRecorderINtB4_13InputRecorderRShE18record_block_startCsgMNWDGKKfbu_19fuzz_arbitrary_json:
    9|  4.58k|    fn record_block_start(&self, _new_block: B) {
   10|  4.58k|        // Intentionally left empty.
   11|  4.58k|    }

_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_blockCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  156|  25.1k|    fn record_block(&mut self, block: B) {
  157|  25.1k|        match self {
  158|  20.4k|            Self::Simple(r) => r.record_block(block),
  159|  4.62k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  25.1k|    }
_RNvXs_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   41|  25.1k|    fn record_block_start(&self, new_block: B) {
   42|  25.1k|        self.internal.borrow_mut().record_block(new_block)
   43|  25.1k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB4_5MatchEE14build_recorderCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   28|  2.02k|    pub(crate) fn build_recorder(sink: &'s mut S, leading_padding_len: usize) -> Self {
   29|  2.02k|        Self {
   30|  2.02k|            internal: RefCell::new(InternalRecorder::new(sink, leading_padding_len)),
   31|  2.02k|        }
   32|  2.02k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_matchCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  165|  24.9k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  24.9k|        match self {
  167|  4.57k|            Self::Simple(simple) => {
  168|  4.57k|                if !simple.try_record_match(idx, depth, ty) {
  169|    622|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    622|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    622|                    let mut stack = simple.transform_to_stack();
  174|    622|                    stack.record_match(idx, depth, ty);
  175|    622|                    *self = Self::Stack(stack);
  176|  3.95k|                }
  177|       |            }
  178|  20.4k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  24.9k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  185|  42.4k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  42.4k|        match self {
  187|  24.0k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  18.4k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  42.4k|    }
_RNvMs1_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  151|  2.02k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  152|  2.02k|        Self::Simple(SimpleRecorder::new(sink, leading_padding_len))
  153|  2.02k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_blockCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  224|  20.4k|    fn record_block(&mut self, block: B) {
  225|  20.4k|        if let Some(finished) = self.current_block.as_ref() {
  226|  18.4k|            if let Some(node) = self.node.as_mut() {
  227|       |                debug!("Continuing node, idx is {}", self.idx);
  228|  1.65k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  229|  16.8k|            }
  230|       |
  231|  18.4k|            self.idx += finished.len();
  232|  2.02k|        }
  233|       |
  234|  20.4k|        self.current_block = Some(block);
  235|  20.4k|        debug!("New block, idx = {}", self.idx);
  236|  20.4k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  268|  4.57k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  269|  4.57k|        if self.node.is_some() {
  270|       |            debug!("nested match detected, switching to stack");
  271|    622|            return false;
  272|  3.95k|        }
  273|  3.95k|
  274|  3.95k|        let node = SimplePartialNode {
  275|  3.95k|            start_idx: idx,
  276|  3.95k|            start_depth: depth,
  277|  3.95k|            buf: vec![],
  278|  3.95k|            ty,
  279|  3.95k|        };
  280|  3.95k|        self.node = Some(node);
  281|  3.95k|
  282|  3.95k|        true
  283|  4.57k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  285|    622|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  286|    622|        match self.node {
  287|    622|            Some(node) => StackRecorder {
  288|    622|                idx: self.idx,
  289|    622|                match_count: 1,
  290|    622|                current_block: self.current_block,
  291|    622|                stack: vec![PartialNode {
  292|    622|                    id: 0,
  293|    622|                    start_idx: node.start_idx,
  294|    622|                    start_depth: node.start_depth,
  295|    622|                    buf: node.buf,
  296|    622|                    ty: node.ty,
  297|    622|                }],
  298|    622|                output_queue: OutputQueue::new(),
  299|    622|                sink: self.sink,
  300|    622|                leading_padding_len: self.leading_padding_len,
  301|    622|            },
  302|      0|            None => StackRecorder {
  303|      0|                idx: self.idx,
  304|      0|                match_count: 0,
  305|      0|                current_block: self.current_block,
  306|      0|                stack: vec![],
  307|      0|                output_queue: OutputQueue::new(),
  308|      0|                sink: self.sink,
  309|      0|                leading_padding_len: self.leading_padding_len,
  310|      0|            },
  311|       |        }
  312|    622|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  238|  24.0k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  239|       |        debug!("Value terminator at {idx}, depth {depth}");
  240|  24.0k|        if let Some(node) = self.node.as_ref() {
  241|  4.14k|            if node.start_depth >= depth {
  242|  3.28k|                let mut node = self.node.take().expect("node is Some");
  243|  3.28k|                debug!("Mark node as ended at {}", idx + 1);
  244|  3.28k|                append_final_block(
  245|  3.28k|                    &mut node.buf,
  246|  3.28k|                    self.current_block
  247|  3.28k|                        .as_ref()
  248|  3.28k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  249|  3.28k|                    self.idx,
  250|  3.28k|                    node.start_idx,
  251|  3.28k|                    idx + 1,
  252|  3.28k|                );
  253|  3.28k|                finalize_node(&mut node.buf, node.ty);
  254|  3.28k|
  255|  3.28k|                debug!("Committing and outputting node");
  256|  3.28k|                self.sink
  257|  3.28k|                    .add_match(Match {
  258|  3.28k|                        span_start: node.start_idx - self.leading_padding_len,
  259|  3.28k|                        bytes: node.buf,
  260|  3.28k|                    })
  261|  3.28k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  262|    858|            }
  263|  19.8k|        }
  264|       |
  265|  24.0k|        Ok(())
  266|  24.0k|    }
_RNvMs2_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  214|  2.02k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  215|  2.02k|        Self {
  216|  2.02k|            idx: 0,
  217|  2.02k|            current_block: None,
  218|  2.02k|            node: None,
  219|  2.02k|            sink,
  220|  2.02k|            leading_padding_len,
  221|  2.02k|        }
  222|  2.02k|    }
_RNvMs3_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_blockCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  338|  4.62k|    fn record_block(&mut self, block: B) {
  339|  4.62k|        if let Some(finished) = self.current_block.as_ref() {
  340|  56.1k|            for node in &mut self.stack {
  341|       |                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  342|  51.5k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  343|       |            }
  344|       |
  345|  4.62k|            self.idx += finished.len();
  346|      0|        }
  347|       |
  348|  4.62k|        self.current_block = Some(block);
  349|  4.62k|        debug!("New block, idx = {}", self.idx);
  350|  4.62k|    }
_RNvMs3_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_matchCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  352|  21.0k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  353|  21.0k|        let node = PartialNode {
  354|  21.0k|            id: self.match_count,
  355|  21.0k|            start_idx: idx,
  356|  21.0k|            start_depth: depth,
  357|  21.0k|            buf: vec![],
  358|  21.0k|            ty,
  359|  21.0k|        };
  360|  21.0k|
  361|  21.0k|        debug!("New node {node:?}");
  362|  21.0k|        self.match_count += 1;
  363|  21.0k|        self.stack.push(node);
  364|  21.0k|    }
_RNvMs3_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  367|  18.4k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  368|       |        debug!("Value terminator at {idx}, depth {depth}");
  369|  31.4k|        while let Some(node) = self.stack.last() {
  370|  29.6k|            if node.start_depth >= depth {
  371|       |                debug!("Mark node {node:?} as ended at {}", idx + 1);
  372|  12.9k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  373|  12.9k|                append_final_block(
  374|  12.9k|                    &mut node.buf,
  375|  12.9k|                    self.current_block
  376|  12.9k|                        .as_ref()
  377|  12.9k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  378|  12.9k|                    self.idx,
  379|  12.9k|                    node.start_idx,
  380|  12.9k|                    idx + 1,
  381|  12.9k|                );
  382|  12.9k|                finalize_node(&mut node.buf, node.ty);
  383|  12.9k|
  384|  12.9k|                debug!("Committing node: {node:?}");
  385|  12.9k|                self.output_queue.insert(
  386|  12.9k|                    node.id,
  387|  12.9k|                    Match {
  388|  12.9k|                        span_start: node.start_idx - self.leading_padding_len,
  389|  12.9k|                        bytes: node.buf,
  390|  12.9k|                    },
  391|  12.9k|                );
  392|       |            } else {
  393|  16.6k|                break;
  394|       |            }
  395|       |        }
  396|       |
  397|  18.4k|        if self.stack.is_empty() {
  398|       |            debug!("Outputting batch of nodes.");
  399|  1.75k|            self.output_queue
  400|  1.75k|                .output_to(self.sink)
  401|  1.75k|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  402|  16.6k|        }
  403|       |
  404|  18.4k|        Ok(())
  405|  18.4k|    }
_RNvNtNtCse0ISAJPynz5_8rsonpath6result5nodes12append_block:
  409|  53.2k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  410|  53.2k|    if read_start >= src_start + src.len() {
  411|    193|        return;
  412|  53.0k|    }
  413|       |
  414|  53.0k|    let to_extend = if read_start > src_start {
  415|  14.3k|        let in_block_start = read_start - src_start;
  416|  14.3k|        &src[in_block_start..]
  417|       |    } else {
  418|  38.6k|        src
  419|       |    };
  420|       |
  421|  53.0k|    dest.extend(to_extend);
  422|  53.2k|}
_RNvNtNtCse0ISAJPynz5_8rsonpath6result5nodes13finalize_node:
  435|  16.2k|fn finalize_node(buf: &mut Vec<u8>, ty: MatchedNodeType) {
  436|  16.2k|    debug!("Finalizing node");
  437|  16.2k|
  438|  16.2k|    if ty == MatchedNodeType::Atomic {
  439|       |        // Atomic nodes are finished when the next structural character is matched.
  440|       |        // The buffer includes that character and all preceding whitespace.
  441|       |        // We need to remove it before saving the result.
  442|  8.81k|        if buf.len() <= 1 {
  443|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  444|    178|            buf.truncate(0)
  445|       |        } else {
  446|  8.63k|            let mut i = buf.len() - 2;
  447|  9.55k|            while is_json_whitespace(buf[i]) {
  448|    912|                i -= 1;
  449|    912|            }
  450|       |
  451|  8.63k|            buf.truncate(i + 1);
  452|       |        }
  453|  7.43k|    }
  454|  16.2k|}
_RNvNtNtCse0ISAJPynz5_8rsonpath6result5nodes18append_final_block:
  425|  16.2k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  426|  16.2k|    debug!("src_start: {src_start}, read_start: {read_start}, read_end: {read_end}");
  427|  16.2k|    debug_assert!(read_end >= src_start);
  428|  16.2k|    let in_block_start = read_start.saturating_sub(src_start);
  429|  16.2k|    let in_block_end = read_end - src_start;
  430|  16.2k|
  431|  16.2k|    dest.extend(&src[in_block_start..in_block_end]);
  432|  16.2k|}
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   52|  24.9k|    fn record_match(&self, idx: usize, depth: Depth, ty: MatchedNodeType) -> Result<(), EngineError> {
   53|  24.9k|        debug!("Recording match at {idx}");
   54|  24.9k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  24.9k|        Ok(())
   56|  24.9k|    }
_RNvXs0_NtNtCse0ISAJPynz5_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   59|  42.4k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  42.4k|        self.internal
   61|  42.4k|            .borrow_mut()
   62|  42.4k|            .record_value_terminator(idx, depth)
   63|  42.4k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  42.4k|    }

_RINvMNtNtCse0ISAJPynz5_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCs8f6x4lOZV33_5alloc3vec3VecB18_EECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   52|  1.75k|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|  1.75k|    where
   54|  1.75k|        S: Sink<D>,
   55|  1.75k|    {
   56|  1.75k|        self.offset += self.nodes.len();
   57|       |
   58|  12.5k|        for node in self.nodes.drain(..) {
   59|  12.5k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|  1.75k|        Ok(())
   63|  1.75k|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   18|    622|    pub(super) fn new() -> Self {
   19|    622|        Self {
   20|    622|            offset: 0,
   21|    622|            nodes: vec![],
   22|    622|        }
   23|    622|    }
_RNvMNtNtCse0ISAJPynz5_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   29|  12.9k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  12.9k|        let actual_idx = id - self.offset;
   31|       |
   32|  29.3k|        while self.nodes.len() <= actual_idx {
   33|  16.4k|            self.nodes.push(None);
   34|  16.4k|        }
   35|       |
   36|  12.9k|        self.nodes[actual_idx] = Some(node);
   37|  12.9k|    }

_RNvMs3_NtCse0ISAJPynz5_8rsonpath14string_patternNtB5_13StringPattern6quotedCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   44|  53.3k|    pub fn quoted(&self) -> &[u8] {
   45|  53.3k|        self.0.quoted().as_bytes()
   46|  53.3k|    }
_RNvMs3_NtCse0ISAJPynz5_8rsonpath14string_patternNtB5_13StringPattern8unquotedCsgMNWDGKKfbu_19fuzz_arbitrary_json:
   51|  4.61k|    pub fn unquoted(&self) -> &[u8] {
   52|  4.61k|        self.0.unquoted().as_bytes()
   53|  4.61k|    }
_RNvXs1_NtCse0ISAJPynz5_8rsonpath14string_patternNtB5_13StringPatternNtNtCshZc3FwCJ069_4core3cmp9PartialEq2eqB7_:
   33|  19.8k|    fn eq(&self, other: &Self) -> bool {
   34|  19.8k|        self.0 == other.0
   35|  19.8k|    }
_RNvMs3_NtCse0ISAJPynz5_8rsonpath14string_patternNtB5_13StringPattern6quotedB7_:
   44|  13.5k|    pub fn quoted(&self) -> &[u8] {
   45|  13.5k|        self.0.quoted().as_bytes()
   46|  13.5k|    }
_RNvMs3_NtCse0ISAJPynz5_8rsonpath14string_patternNtB5_13StringPattern3newB7_:
   58|  4.20k|    pub fn new(string: &JsonString) -> Self {
   59|  4.20k|        Self(string.clone())
   60|  4.20k|    }

_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_15descendant_nameNtNtB5_3str10JsonStringE0ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  110|  2.08k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  2.08k|    where
  112|  2.08k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  2.08k|    {
  114|  2.08k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  2.08k|        selectors_builder(&mut builder);
  116|  2.08k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  2.08k|        self
  118|  2.08k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_16descendant_indexNtNtB5_3num8JsonUIntE0ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  110|  3.94k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  3.94k|    where
  112|  3.94k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  3.94k|    {
  114|  3.94k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  3.94k|        selectors_builder(&mut builder);
  116|  3.94k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  3.94k|        self
  118|  3.94k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCNvB2_19descendant_wildcard0ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  110|  1.32k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  1.32k|    where
  112|  1.32k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  1.32k|    {
  114|  1.32k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  1.32k|        selectors_builder(&mut builder);
  116|  1.32k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  1.32k|        self
  118|  1.32k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_10child_nameNtNtB5_3str10JsonStringE0ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   79|  6.04k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  6.04k|    where
   81|  6.04k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  6.04k|    {
   83|  6.04k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  6.04k|        selectors_builder(&mut builder);
   85|  6.04k|        self.segments.push(Segment::Child(builder.build()));
   86|  6.04k|        self
   87|  6.04k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_11child_indexNtNtB5_3num8JsonUIntE0ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   79|  1.46k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  1.46k|    where
   81|  1.46k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  1.46k|    {
   83|  1.46k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  1.46k|        selectors_builder(&mut builder);
   85|  1.46k|        self.segments.push(Segment::Child(builder.build()));
   86|  1.46k|        self
   87|  1.46k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCNvB2_14child_wildcard0ECsgMNWDGKKfbu_19fuzz_arbitrary_json:
   79|  2.63k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  2.63k|    where
   81|  2.63k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  2.63k|    {
   83|  2.63k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  2.63k|        selectors_builder(&mut builder);
   85|  2.63k|        self.segments.push(Segment::Child(builder.build()));
   86|  2.63k|        self
   87|  2.63k|    }
_RINvMs_NtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder4nameNtNtB7_3str10JsonStringECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  263|  8.12k|    pub fn name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  264|  8.12k|        self.selectors.push(Selector::Name(name.into()));
  265|  8.12k|        self
  266|  8.12k|    }
_RINvMs_NtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder5indexNtNtB7_3num8JsonUIntECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  289|  5.41k|    pub fn index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  290|  5.41k|        let json_int: JsonInt = idx.into();
  291|  5.41k|        self.selectors.push(Selector::Index(Index::from(json_int)));
  292|  5.41k|        self
  293|  5.41k|    }
_RNCINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder10child_nameNtNtB7_3str10JsonStringE0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  125|  6.04k|        self.child(|x| x.name(name))
_RNCINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder11child_indexNtNtB7_3num8JsonUIntE0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  141|  1.46k|        self.child(|x| x.index(idx))
_RNCINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder15descendant_nameNtNtB7_3str10JsonStringE0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  171|  2.08k|        self.descendant(|x| x.name(name))
_RNCINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder16descendant_indexNtNtB7_3num8JsonUIntE0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  187|  3.94k|        self.descendant(|x| x.index(idx))
_RNCNvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder14child_wildcard0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  133|  2.63k|        self.child(|x| x.wildcard())
_RNCNvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder19descendant_wildcard0CsgMNWDGKKfbu_19fuzz_arbitrary_json:
  179|  1.32k|        self.descendant(|x| x.wildcard())
_RNvMs_NtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder8wildcard:
  371|  3.95k|    pub fn wildcard(&mut self) -> &mut Self {
  372|  3.95k|        self.selectors.push(Selector::Wildcard);
  373|  3.95k|        self
  374|  3.95k|    }
_RNvXs1_NtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB7_13JsonPathQueryINtNtCshZc3FwCJ069_4core7convert4FromNtB5_20JsonPathQueryBuilderE4from:
  399|  2.65k|    fn from(value: JsonPathQueryBuilder) -> Self {
  400|  2.65k|        Self {
  401|  2.65k|            segments: value.segments,
  402|  2.65k|        }
  403|  2.65k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10child_nameNtNtB5_3str10JsonStringECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  124|  6.04k|    pub fn child_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  125|  6.04k|        self.child(|x| x.name(name))
  126|  6.04k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder11child_indexNtNtB5_3num8JsonUIntECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  140|  1.46k|    pub fn child_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  141|  1.46k|        self.child(|x| x.index(idx))
  142|  1.46k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder15descendant_nameNtNtB5_3str10JsonStringECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  170|  2.08k|    pub fn descendant_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  171|  2.08k|        self.descendant(|x| x.name(name))
  172|  2.08k|    }
_RINvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder16descendant_indexNtNtB5_3num8JsonUIntECsgMNWDGKKfbu_19fuzz_arbitrary_json:
  186|  3.94k|    pub fn descendant_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  187|  3.94k|        self.descendant(|x| x.index(idx))
  188|  3.94k|    }
_RNvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder14child_wildcard:
  132|  2.63k|    pub fn child_wildcard(&mut self) -> &mut Self {
  133|  2.63k|        self.child(|x| x.wildcard())
  134|  2.63k|    }
_RNvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder19descendant_wildcard:
  178|  1.32k|    pub fn descendant_wildcard(&mut self) -> &mut Self {
  179|  1.32k|        self.descendant(|x| x.wildcard())
  180|  1.32k|    }
_RNvMNtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder3new:
   54|  2.65k|    pub fn new() -> Self {
   55|  2.65k|        Self { segments: vec![] }
   56|  2.65k|    }
_RNvMs_NtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder3new:
  238|  17.4k|    fn new() -> Self {
  239|  17.4k|        Self { selectors: vec![] }
  240|  17.4k|    }
_RNvMs_NtCs6zVzifqCO6f_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder5build:
  242|  17.4k|    fn build(self) -> Selectors {
  243|  17.4k|        Selectors::many(self.selectors)
  244|  17.4k|    }

_RNvMss_Cs6zVzifqCO6f_15rsonpath_syntaxNtB5_7Segment8is_child:
  859|  17.4k|    pub fn is_child(&self) -> bool {
  860|  17.4k|        matches!(self, Self::Child(_))
  861|  17.4k|    }
_RNvMss_Cs6zVzifqCO6f_15rsonpath_syntaxNtB5_7Segment9selectors:
  843|  17.4k|    pub fn selectors(&self) -> &Selectors {
  844|  17.4k|        match self {
  845|  17.4k|            Self::Child(s) | Self::Descendant(s) => s,
  846|  17.4k|        }
  847|  17.4k|    }
_RNvXsx_Cs6zVzifqCO6f_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
 1077|  17.4k|    fn deref(&self) -> &Self::Target {
 1078|  17.4k|        &self.inner
 1079|  17.4k|    }
_RNvMsr_Cs6zVzifqCO6f_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  834|  2.65k|    pub fn segments(&self) -> &[Segment] {
  835|  2.65k|        &self.segments
  836|  2.65k|    }
_RNvMst_Cs6zVzifqCO6f_15rsonpath_syntaxNtB5_9Selectors5firstCse0ISAJPynz5_8rsonpath:
  924|  17.4k|    pub fn first(&self) -> &Selector {
  925|  17.4k|        &self.inner[0]
  926|  17.4k|    }
_RNvMst_Cs6zVzifqCO6f_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  916|  17.4k|    pub fn many(vec: Vec<Selector>) -> Self {
  917|  17.4k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  918|  17.4k|        Self { inner: vec }
  919|  17.4k|    }
_RNvXs9_Cs6zVzifqCO6f_15rsonpath_syntaxNtB5_5IndexINtNtCshZc3FwCJ069_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  427|  5.41k|    fn from(value: N) -> Self {
  428|  5.41k|        let value = value.into();
  429|  5.41k|        if value.as_i64() >= 0 {
  430|  5.41k|            Self::FromStart(value.abs())
  431|       |        } else {
  432|      0|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  433|       |        }
  434|  5.41k|    }

_RNvXsh_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_7JsonIntINtNtCshZc3FwCJ069_4core7convert4FromNtB5_8JsonUIntE4from:
  657|  5.41k|    fn from(value: JsonUInt) -> Self {
  658|  5.41k|        // This is always safe due to the type invariant bounds.
  659|  5.41k|        Self::new(value.0 as i64)
  660|  5.41k|    }
_RNvMs8_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_8JsonUInt13try_incrementCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  425|  9.32k|    pub fn try_increment(&mut self) -> Result<(), JsonIntOverflowError> {
  426|  9.32k|        let new_index = self.0 + 1;
  427|  9.32k|        if new_index <= JSON_UINT_UPPER_LIMIT {
  428|  9.32k|            self.0 = new_index;
  429|  9.32k|            Ok(())
  430|       |        } else {
  431|      0|            Err(JsonIntOverflowError::uint_pos_overflow(new_index))
  432|       |        }
  433|  9.32k|    }
_RNvXsN_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_8JsonUIntNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitraryCsgMNWDGKKfbu_19fuzz_arbitrary_json:
 1078|  5.41k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1079|  5.41k|        let val = u.int_in_range(0..=JSON_UINT_UPPER_LIMIT)?;
 1080|       |
 1081|  5.41k|        Ok(Self::new(val))
 1082|  5.41k|    }
_RNvMs8_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_8JsonUInt6as_u64:
  460|   112k|    pub const fn as_u64(&self) -> u64 {
  461|   112k|        self.0
  462|   112k|    }
_RNvXso_NtCs6zVzifqCO6f_15rsonpath_syntax3numxINtNtCshZc3FwCJ069_4core7convert4FromNtB5_8JsonUIntE4from:
  731|  73.9k|    fn from(value: JsonUInt) -> Self {
  732|  73.9k|        // Safe cast since JsonUInt::MAX is lower than i64::MAX.
  733|  73.9k|        value.0 as Self
  734|  73.9k|    }
_RNvXsj_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCshZc3FwCJ069_4core7convert7TryFromyE8try_fromCse0ISAJPynz5_8rsonpath:
  679|  72.3k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  680|  72.3k|        if value > JSON_UINT_UPPER_LIMIT {
  681|  14.6k|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  682|       |        } else {
  683|  57.7k|            Ok(Self::new(value))
  684|       |        }
  685|  72.3k|    }
_RNvXsk_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCshZc3FwCJ069_4core7convert7TryFromxE8try_fromCse0ISAJPynz5_8rsonpath:
  692|  18.4k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  693|  18.4k|        if value < 0 {
  694|      0|            Err(JsonIntOverflowError::negative_uint(value))
  695|       |        } else {
  696|  18.4k|            Self::try_from(value as u64)
  697|       |        }
  698|  18.4k|    }
_RNvMs7_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_7JsonInt3new:
  291|  5.41k|    const fn new(index: i64) -> Self {
  292|  5.41k|        Self(index)
  293|  5.41k|    }
_RNvMs8_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_8JsonUInt3new:
  405|  63.1k|    const fn new(index: u64) -> Self {
  406|  63.1k|        Self(index)
  407|  63.1k|    }
_RNvMs7_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_7JsonInt6as_i64:
  335|  5.41k|    pub const fn as_i64(&self) -> i64 {
  336|  5.41k|        self.0
  337|  5.41k|    }
_RNvMs7_NtCs6zVzifqCO6f_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  367|  5.41k|    pub const fn abs(&self) -> JsonUInt {
  368|  5.41k|        JsonUInt(self.0.unsigned_abs())
  369|  5.41k|    }

_RNvMNtNtCs6zVzifqCO6f_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError17uint_pos_overflow:
   57|  14.6k|    pub(crate) fn uint_pos_overflow(src: u64) -> Self {
   58|  14.6k|        Self {
   59|  14.6k|            kind: JsonIntOverflowKind::UIntPos(src),
   60|  14.6k|        }
   61|  14.6k|    }

_RNvMs2_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB5_10JsonString6quoted:
  204|  66.9k|    pub fn quoted(&self) -> &str {
  205|  66.9k|        &self.quoted
  206|  66.9k|    }
_RNvMs2_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  188|  64.2k|    pub fn unquoted(&self) -> &str {
  189|  64.2k|        let len = self.quoted.len();
  190|  64.2k|        debug_assert!(len >= 2);
  191|  64.2k|        &self.quoted[1..len - 1]
  192|  64.2k|    }
_RNvXs6_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB5_10JsonStringNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitraryCsgMNWDGKKfbu_19fuzz_arbitrary_json:
  229|  8.12k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  230|  8.12k|        let chars = u.arbitrary_iter()?;
  231|  8.12k|        let mut builder = JsonStringBuilder::new();
  232|       |
  233|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  234|       |        // except for characters that must be escaped: quotation mark,
  235|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  236|  26.4k|        for c in chars {
  237|  18.3k|            let c = c?;
  238|  18.3k|            match c {
  239|  18.3k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  240|    771|                    builder.push('\\');
  241|    771|                    builder.push(c);
  242|    771|                }
  243|  17.5k|                _ => {
  244|  17.5k|                    builder.push(c);
  245|  17.5k|                }
  246|       |            }
  247|       |        }
  248|       |
  249|  8.12k|        Ok(builder.into())
  250|  8.12k|    }
_RNvXs3_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB5_10JsonStringNtNtCshZc3FwCJ069_4core3cmp9PartialEq2eq:
  211|  23.9k|    fn eq(&self, other: &Self) -> bool {
  212|  23.9k|        self.unquoted() == other.unquoted()
  213|  23.9k|    }
_RINvXs5_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB6_10JsonStringNtNtCshZc3FwCJ069_4core4hash4Hash4hashNtNtNtCsjixu6NuYCfn_3std4hash6random13DefaultHasherECse0ISAJPynz5_8rsonpath:
  220|  11.6k|    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
  221|  11.6k|        self.unquoted().hash(state);
  222|  11.6k|    }
_RNvMs_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   40|  8.12k|    pub(crate) fn new() -> Self {
   41|  8.12k|        Self {
   42|  8.12k|            quoted: String::from('"'),
   43|  8.12k|        }
   44|  8.12k|    }
_RNvMs_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   46|  19.2k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   47|  19.2k|        self.quoted.push(char);
   48|  19.2k|        self
   49|  19.2k|    }
_RNvMs_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   51|  8.12k|    pub(crate) fn finish(mut self) -> JsonString {
   52|  8.12k|        self.quoted.push('"');
   53|  8.12k|        JsonString { quoted: self.quoted }
   54|  8.12k|    }
_RNvXs0_NtCs6zVzifqCO6f_15rsonpath_syntax3strNtB5_10JsonStringINtNtCshZc3FwCJ069_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   59|  8.12k|    fn from(value: JsonStringBuilder) -> Self {
   60|  8.12k|        value.finish()
   61|  8.12k|    }

_RNCNvXNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtBa_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitraryNtNtCs4mj07ouNzCz_10serde_json5value5ValueINtNtCshZc3FwCJ069_4core7convert4FromNtB4_8RawValueE4from0Ba_:
  103|  42.3k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
_RNCNvXNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtBa_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitraryNtNtCs4mj07ouNzCz_10serde_json5value5ValueINtNtCshZc3FwCJ069_4core7convert4FromNtB4_8RawValueE4froms_0Ba_:
  105|  53.1k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCsf4HWeWhA5iz_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   15|  2.65k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCsf4HWeWhA5iz_9arbitrary9Arbitrary13try_size_hint0B6_:
   15|  2.65k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary0B6_:
   42|  1.92k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrarys_0B6_:
   42|  17.4k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   42|  1.92k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCsf4HWeWhA5iz_9arbitrary9Arbitrary13try_size_hint0B6_:
   42|  2.65k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary0B6_:
   48|  1.95k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrarys_0B6_:
   48|  17.4k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   48|  1.95k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsgMNWDGKKfbu_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCsf4HWeWhA5iz_9arbitrary9Arbitrary13try_size_hint0B6_:
   48|  5.31k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtBc_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrary0Bc_:
   84|    973|        #[derive(Arbitrary)]
_RNCNvXNvNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtBc_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys_0Bc_:
   84|   108k|        #[derive(Arbitrary)]
_RNCNvXNvNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtBc_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys0_0Bc_:
   84|    973|        #[derive(Arbitrary)]
_RNvXNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB8_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitraryNtNtCs4mj07ouNzCz_10serde_json5value5ValueINtNtCshZc3FwCJ069_4core7convert4FromNtB2_8RawValueE4from:
   96|  98.1k|            fn from(value: RawValue) -> Self {
   97|  98.1k|                match value {
   98|  18.9k|                    RawValue::Null => serde_json::Value::Null,
   99|  11.5k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  5.11k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  6.68k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  6.73k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  25.9k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  23.1k|                    RawValue::Object(obj) => {
  105|  23.1k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|       |                    }
  107|       |                }
  108|  98.1k|            }
_RNvXCsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB2_4JsonNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
   56|  2.65k|    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   57|  2.65k|        write!(f, "{}", self.0)
   58|  2.65k|    }
_RNvXs_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB4_14SupportedQueryNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary:
   62|  2.65k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   63|  2.65k|        let segment_count = u.arbitrary_len::<SupportedSegment>()?;
   64|  2.65k|        let mut query = JsonPathQueryBuilder::new();
   65|  2.65k|
   66|  2.65k|        for _ in 0..segment_count {
   67|  17.4k|            let segment = u.arbitrary::<SupportedSegment>()?;
   68|  10.1k|            match segment {
   69|  6.04k|                SupportedSegment::Child(SupportedSelector::Name(name)) => query.child_name(name),
   70|  2.63k|                SupportedSegment::Child(SupportedSelector::Wildcard) => query.child_wildcard(),
   71|  1.46k|                SupportedSegment::Child(SupportedSelector::Index(idx)) => query.child_index(idx),
   72|  2.08k|                SupportedSegment::Descendant(SupportedSelector::Name(name)) => query.descendant_name(name),
   73|  1.32k|                SupportedSegment::Descendant(SupportedSelector::Wildcard) => query.descendant_wildcard(),
   74|  3.94k|                SupportedSegment::Descendant(SupportedSelector::Index(idx)) => query.descendant_index(idx),
   75|       |            };
   76|       |        }
   77|       |
   78|  2.65k|        Ok(SupportedQuery(query.into()))
   79|  2.65k|    }
_RNvXs0_CsgMNWDGKKfbu_19fuzz_arbitrary_jsonNtB5_4JsonNtCsf4HWeWhA5iz_9arbitrary9Arbitrary9arbitrary:
   83|  2.65k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   84|       |        #[derive(Arbitrary)]
   85|       |        enum RawValue {
   86|       |            Null,
   87|       |            Bool(bool),
   88|       |            Integer(i64),
   89|       |            Float(f64),
   90|       |            String(String),
   91|       |            Array(Vec<RawValue>),
   92|       |            Object(HashMap<String, RawValue>),
   93|       |        }
   94|       |
   95|       |        impl From<RawValue> for serde_json::Value {
   96|       |            fn from(value: RawValue) -> Self {
   97|       |                match value {
   98|       |                    RawValue::Null => serde_json::Value::Null,
   99|       |                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|       |                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|       |                    RawValue::Float(f) => serde_json::Value::from(f),
  102|       |                    RawValue::String(s) => serde_json::Value::String(s),
  103|       |                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|       |                    RawValue::Object(obj) => {
  105|       |                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|       |                    }
  107|       |                }
  108|       |            }
  109|       |        }
  110|       |
  111|  2.65k|        Ok(Json(u.arbitrary::<RawValue>()?.into()))
  112|  2.65k|    }

