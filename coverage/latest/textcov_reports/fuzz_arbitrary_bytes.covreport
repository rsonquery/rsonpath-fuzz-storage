_RNvXNtNtNtCs3HmALEVcYcb_9arbitrary7foreign4core5sliceRShNtB8_9Arbitrary9size_hintCse4uPzH624PE_20fuzz_arbitrary_bytes:
   14|  1.01k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
   15|  1.01k|        (0, None)
   16|  1.01k|    }
_RNvXNtNtNtCs3HmALEVcYcb_9arbitrary7foreign4core5sliceRShNtB8_9Arbitrary19arbitrary_take_rest:
    9|  1.01k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
   10|  1.01k|        Ok(u.take_rest())
   11|  1.01k|    }

_RNvYRShNtCs3HmALEVcYcb_9arbitrary9Arbitrary13try_size_hintCse4uPzH624PE_20fuzz_arbitrary_bytes:
  423|  1.01k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  1.01k|        Ok(Self::size_hint(depth))
  425|  1.01k|    }

_RNvNtCs3HmALEVcYcb_9arbitrary9size_hint7and_allCse4uPzH624PE_20fuzz_arbitrary_bytes:
   62|  1.01k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   63|  1.01k|    hints.iter().copied().fold((0, Some(0)), and)
   64|  1.01k|}
_RINvNtCs3HmALEVcYcb_9arbitrary9size_hint19try_recursion_guardNCNvXNvCse4uPzH624PE_20fuzz_arbitrary_bytess_1__NtB14_16DisplayableBytesNtB4_9Arbitrary13try_size_hint0EB14_:
   38|  1.01k|pub fn try_recursion_guard(
   39|  1.01k|    depth: usize,
   40|  1.01k|    f: impl FnOnce(usize) -> Result<(usize, Option<usize>), crate::MaxRecursionReached>,
   41|  1.01k|) -> Result<(usize, Option<usize>), crate::MaxRecursionReached> {
   42|  1.01k|    if depth > MAX_DEPTH {
   43|      0|        Err(crate::MaxRecursionReached {})
   44|       |    } else {
   45|  1.01k|        f(depth + 1)
   46|       |    }
   47|  1.01k|}
_RNvNtCs3HmALEVcYcb_9arbitrary9size_hint3andCs2Ab18eK5UZw_15rsonpath_syntax:
   51|  1.01k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   52|  1.01k|    let lower = lhs.0 + rhs.0;
   53|  1.01k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   54|  1.01k|    (lower, upper)
   55|  1.01k|}
_RNCNvNtCs3HmALEVcYcb_9arbitrary9size_hint3and0B5_:
   53|  1.01k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs3HmALEVcYcb_9arbitrary12unstructuredNtB2_12Unstructured3lenCse4uPzH624PE_20fuzz_arbitrary_bytes:
  109|  1.01k|    pub fn len(&self) -> usize {
  110|  1.01k|        self.data.len()
  111|  1.01k|    }
_RNvMNtCs3HmALEVcYcb_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCse4uPzH624PE_20fuzz_arbitrary_bytes:
  133|  1.01k|    pub fn is_empty(&self) -> bool {
  134|  1.01k|        self.len() == 0
  135|  1.01k|    }
_RNvMNtCs3HmALEVcYcb_9arbitrary12unstructuredNtB2_12Unstructured3new:
   86|  1.01k|    pub fn new(data: &'a [u8]) -> Self {
   87|  1.01k|        Unstructured { data }
   88|  1.01k|    }
_RNvMNtCs3HmALEVcYcb_9arbitrary12unstructuredNtB2_12Unstructured9take_rest:
  635|  1.01k|    pub fn take_rest(mut self) -> &'a [u8] {
  636|  1.01k|        mem::take(&mut self.data)
  637|  1.01k|    }

LLVMFuzzerInitialize:
  312|      2|            pub extern "C" fn LLVMFuzzerInitialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
  313|      2|                $crate::initialize(_argc, _argv);
  314|      2|
  315|      2|                // Supplied init code
  316|      2|                $init;
  317|      2|                0
  318|      2|            }
rust_fuzzer_test_input:
  321|  1.01k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  322|       |                use $crate::arbitrary::{Arbitrary, Unstructured};
  323|       |
  324|       |                // Early exit if we don't have enough bytes for the `Arbitrary`
  325|       |                // implementation. This helps the fuzzer avoid exploring all the
  326|       |                // different not-enough-input-bytes paths inside the `Arbitrary`
  327|       |                // implementation. Additionally, it exits faster, letting the fuzzer
  328|       |                // get to longer inputs that actually lead to interesting executions
  329|       |                // quicker.
  330|  1.01k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  331|      0|                    return -1;
  332|  1.01k|                }
  333|  1.01k|
  334|  1.01k|                let mut u = Unstructured::new(bytes);
  335|  1.01k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  336|       |
  337|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  338|       |                // formatting of the input to that file. This is only intended for
  339|       |                // `cargo fuzz`'s use!
  340|       |
  341|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  342|  1.01k|                if let Some(path) = $crate::rust_libfuzzer_debug_path() {
  343|       |                    use std::io::Write;
  344|      0|                    let mut file = std::fs::File::create(path)
  345|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  346|      0|                    (match data {
  347|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  348|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  349|       |                    })
  350|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  351|      0|                    return -1;
  352|  1.01k|                }
  353|  1.01k|
  354|  1.01k|                let data = match data {
  355|  1.01k|                    Ok(d) => d,
  356|      0|                    Err(_) => return -1,
  357|       |                };
  358|       |
  359|  1.01k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  360|  1.01k|                result.to_libfuzzer_code()
  361|       |            }
_RNvNvCse4uPzH624PE_20fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  364|  1.01k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  365|  1.01k|                $body
  366|  1.01k|            }
_RNvXCskkpDSEEzbp3_13libfuzzer_sysNtB2_6CorpusINtNtCshZc3FwCJ069_4core7convert4FromuE4from:
   30|  1.01k|    fn from(_: ()) -> Self {
   31|  1.01k|        Self::Keep
   32|  1.01k|    }
_RNvMs_CskkpDSEEzbp3_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  1.01k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  1.01k|        match self {
   42|  1.01k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  1.01k|    }
LLVMFuzzerTestOneInput:
   59|  1.01k|pub unsafe fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   60|  1.01k|    let test_input = ::std::panic::catch_unwind(|| {
   61|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   62|       |        rust_fuzzer_test_input(data_slice)
   63|  1.01k|    });
   64|  1.01k|
   65|  1.01k|    match test_input {
   66|  1.01k|        Ok(i) => i,
   67|       |        Err(_) => {
   68|       |            // hopefully the custom panic hook will be called before and abort the
   69|       |            // process before the stack frames are unwinded.
   70|      0|            ::std::process::abort();
   71|       |        }
   72|       |    }
   73|  1.01k|}
_RNCNvCskkpDSEEzbp3_13libfuzzer_sys15test_input_wrap0B3_:
   60|  1.01k|    let test_input = ::std::panic::catch_unwind(|| {
   61|  1.01k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   62|  1.01k|        rust_fuzzer_test_input(data_slice)
   63|  1.01k|    });
_RNvCskkpDSEEzbp3_13libfuzzer_sys25rust_libfuzzer_debug_path:
   76|  1.01k|pub fn rust_libfuzzer_debug_path() -> &'static Option<String> {
   77|       |    static RUST_LIBFUZZER_DEBUG_PATH: OnceLock<Option<String>> = OnceLock::new();
   78|  1.01k|    RUST_LIBFUZZER_DEBUG_PATH.get_or_init(|| std::env::var("RUST_LIBFUZZER_DEBUG_PATH").ok())
   79|  1.01k|}
_RNCNvCskkpDSEEzbp3_13libfuzzer_sys25rust_libfuzzer_debug_path0B3_:
   78|      1|    RUST_LIBFUZZER_DEBUG_PATH.get_or_init(|| std::env::var("RUST_LIBFUZZER_DEBUG_PATH").ok())
_RNvCskkpDSEEzbp3_13libfuzzer_sys10initialize:
   82|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   83|      2|    // Registers a panic hook that aborts the process before unwinding.
   84|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   85|      2|    // able to analyse the process stack frames to tell different bugs appart.
   86|      2|    //
   87|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   88|      2|    // impossible to build code using compiler plugins with this flag.
   89|      2|    // We will be able to remove this code when
   90|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   91|      2|    let default_hook = std::panic::take_hook();
   92|      2|    std::panic::set_hook(Box::new(move |panic_info| {
   93|       |        default_hook(panic_info);
   94|       |        std::process::abort();
   95|      2|    }));
   96|      2|    0
   97|      2|}

_RNvCs8BzpF5XtBc6_3log9max_level:
 1321|  1.01k|pub fn max_level() -> LevelFilter {
 1322|  1.01k|    // Since `LevelFilter` is `repr(usize)`,
 1323|  1.01k|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1324|  1.01k|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1325|  1.01k|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1326|  1.01k|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1327|  1.01k|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1328|  1.01k|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1329|  1.01k|}
_RNvXs_Cs8BzpF5XtBc6_3logNtB4_5LevelINtNtCshZc3FwCJ069_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCse4uPzH624PE_20fuzz_arbitrary_bytes:
  521|  2.02k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  522|  2.02k|        Some((*self as usize).cmp(&(*other as usize)))
  523|  2.02k|    }

_RINvXs3_NtCselIyhuOc7xF_3nom6branchINtB6_6ChoiceTNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18descendant_segment0INtNtB8_8internal3MapNvBP_17wildcard_selectorNvMst_BR_NtBR_9Selectors3oneENvBP_21member_name_shorthandNCINvBP_14failed_segmentB2G_E0EEINtB1R_6ParserReE7processINtB1R_7OutputMNtB1R_4EmitB4C_NtB1R_9StreamingEEBR_:
  127|  1.01k|      fn process<OM: crate::OutputMode>(
  128|  1.01k|        &mut self,
  129|  1.01k|        input: Input,
  130|  1.01k|      ) -> crate::PResult<OM, Input, Self::Output, Self::Error> {
  131|  1.01k|        match self.parser.0.process::<OM>(input.clone()) {
  132|      0|          Ok(res) => Ok(res),
  133|      0|          Err(Err::Failure(e))=> Err(Err::Failure(e)),
  134|      0|          Err(Err::Incomplete(i))=> Err(Err::Incomplete(i)),
  135|  1.01k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  136|       |        }
  137|  1.01k|      }
_RINvNtCselIyhuOc7xF_3nom6branch3altTNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18descendant_segment0INtNtB4_8internal3MapNvBC_17wildcard_selectorNvMst_BE_NtBE_9Selectors3oneENvBC_21member_name_shorthandNCINvBC_14failed_segmentB2t_E0EEBE_:
   41|  1.01k|pub fn alt<List>(l: List) -> Choice<List> {
   42|  1.01k|  Choice { parser: l }
   43|  1.01k|}
_RINvNtCselIyhuOc7xF_3nom6branch3altTNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser7segment0NCBA_s_0NCINvBC_14failed_segmentNtBE_7SegmentE0EEBE_:
   41|  1.01k|pub fn alt<List>(l: List) -> Choice<List> {
   42|  1.01k|  Choice { parser: l }
   43|  1.01k|}
_RINvXs2_NtCselIyhuOc7xF_3nom6branchINtB6_6ChoiceTNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser7segment0NCBN_s_0NCINvBP_14failed_segmentNtBR_7SegmentE0EEINtNtB8_8internal6ParserReE7processINtB2s_7OutputMNtB2s_4EmitB3d_NtB2s_9StreamingEEBR_:
  127|  1.01k|      fn process<OM: crate::OutputMode>(
  128|  1.01k|        &mut self,
  129|  1.01k|        input: Input,
  130|  1.01k|      ) -> crate::PResult<OM, Input, Self::Output, Self::Error> {
  131|  1.01k|        match self.parser.0.process::<OM>(input.clone()) {
  132|  1.01k|          Ok(res) => Ok(res),
  133|      0|          Err(Err::Failure(e))=> Err(Err::Failure(e)),
  134|      0|          Err(Err::Incomplete(i))=> Err(Err::Incomplete(i)),
  135|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  136|       |        }
  137|  1.01k|      }

_RINvNtNtCselIyhuOc7xF_3nom5bytes8complete3tagReBH_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|  2.02k|pub fn tag<T, I, Error: ParseError<I>>(tag: T) -> impl Fn(I) -> IResult<I, I, Error>
   33|  2.02k|where
   34|  2.02k|  I: Input + Compare<T>,
   35|  2.02k|  T: Input + Clone,
   36|  2.02k|{
   37|       |  move |i: I| {
   38|       |    let mut parser = super::Tag {
   39|       |      tag: tag.clone(),
   40|       |      e: PhantomData,
   41|       |    };
   42|       |
   43|       |    parser.process::<OutputM<Emit, Emit, Complete>>(i)
   44|       |  }
   45|  2.02k|}
_RNCINvNtNtCselIyhuOc7xF_3nom5bytes8complete3tagReBJ_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   37|  2.02k|  move |i: I| {
   38|  2.02k|    let mut parser = super::Tag {
   39|  2.02k|      tag: tag.clone(),
   40|  2.02k|      e: PhantomData,
   41|  2.02k|    };
   42|  2.02k|
   43|  2.02k|    parser.process::<OutputM<Emit, Emit, Complete>>(i)
   44|  2.02k|  }

_RINvXNtCselIyhuOc7xF_3nom5bytesINtB3_3TagReNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEINtNtB5_8internal6ParserBD_E7processINtB1I_7OutputMNtB1I_4EmitB2u_NtB1I_8CompleteEEBJ_:
   71|  2.02k|  fn process<OM: OutputMode>(&mut self, i: I) -> crate::PResult<OM, I, Self::Output, Self::Error> {
   72|  2.02k|    let tag_len = self.tag.input_len();
   73|  2.02k|    let t = self.tag.clone();
   74|  2.02k|
   75|  2.02k|    match i.compare(t) {
   76|  2.02k|      CompareResult::Ok => Ok((i.take_from(tag_len), OM::Output::bind(|| i.take(tag_len)))),
   77|       |      CompareResult::Incomplete => {
   78|      0|        if OM::Incomplete::is_streaming() {
   79|      0|          Err(Err::Incomplete(Needed::new(tag_len - i.input_len())))
   80|       |        } else {
   81|      0|          Err(Err::Error(OM::Error::bind(|| {
   82|       |            let e: ErrorKind = ErrorKind::Tag;
   83|       |            Error::from_error_kind(i, e)
   84|      0|          })))
   85|       |        }
   86|       |      }
   87|      0|      CompareResult::Error => Err(Err::Error(OM::Error::bind(|| {
   88|       |        let e: ErrorKind = ErrorKind::Tag;
   89|       |        Error::from_error_kind(i, e)
   90|      0|      }))),
   91|       |    }
   92|  2.02k|  }
_RNCINvXNtCselIyhuOc7xF_3nom5bytesINtB5_3TagReNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEINtNtB7_8internal6ParserBF_E7processINtB1K_7OutputMNtB1K_4EmitB2w_NtB1K_8CompleteEE0BL_:
   76|  2.02k|      CompareResult::Ok => Ok((i.take_from(tag_len), OM::Output::bind(|| i.take(tag_len)))),

_RINvNtNtCselIyhuOc7xF_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECs2Ab18eK5UZw_15rsonpath_syntax:
   33|  1.01k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl FnMut(I) -> IResult<I, char, Error>
   34|  1.01k|where
   35|  1.01k|  I: Input,
   36|  1.01k|  <I as Input>::Item: AsChar,
   37|  1.01k|{
   38|  1.01k|  let mut parser = super::char(c);
   39|       |  move |i: I| parser.process::<OutputM<Emit, Emit, Complete>>(i)
   40|  1.01k|}
_RINvNtNtCselIyhuOc7xF_3nom9character8complete4charReNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEBS_:
   33|  1.01k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl FnMut(I) -> IResult<I, char, Error>
   34|  1.01k|where
   35|  1.01k|  I: Input,
   36|  1.01k|  <I as Input>::Item: AsChar,
   37|  1.01k|{
   38|  1.01k|  let mut parser = super::char(c);
   39|       |  move |i: I| parser.process::<OutputM<Emit, Emit, Complete>>(i)
   40|  1.01k|}
_RNCINvNtNtCselIyhuOc7xF_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0Cs2Ab18eK5UZw_15rsonpath_syntax:
   39|  1.01k|  move |i: I| parser.process::<OutputM<Emit, Emit, Complete>>(i)
_RNCINvNtNtCselIyhuOc7xF_3nom9character8complete4charReNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   39|  1.01k|  move |i: I| parser.process::<OutputM<Emit, Emit, Complete>>(i)

_RINvXNtCselIyhuOc7xF_3nom9characterINtB3_4CharINtNtB5_5error5ErrorReEEINtNtB5_8internal6ParserB12_E7processINtB19_7OutputMNtB19_4EmitB1W_NtB19_8CompleteEECs2Ab18eK5UZw_15rsonpath_syntax:
  120|  1.01k|  fn process<OM: crate::OutputMode>(
  121|  1.01k|    &mut self,
  122|  1.01k|    i: I,
  123|  1.01k|  ) -> crate::PResult<OM, I, Self::Output, Self::Error> {
  124|  1.01k|    match (i).iter_elements().next().map(|t| {
  125|       |      let b = t.as_char() == self.c;
  126|       |      (&self.c, b)
  127|  1.01k|    }) {
  128|       |      None => {
  129|      0|        if OM::Incomplete::is_streaming() {
  130|      0|          Err(Err::Incomplete(Needed::new(self.c.len() - i.input_len())))
  131|       |        } else {
  132|      0|          Err(Err::Error(OM::Error::bind(|| Error::from_char(i, self.c))))
  133|       |        }
  134|       |      }
  135|      0|      Some((_, false)) => Err(Err::Error(OM::Error::bind(|| Error::from_char(i, self.c)))),
  136|  1.01k|      Some((c, true)) => Ok((i.take_from(c.len()), OM::Output::bind(|| c.as_char()))),
  137|       |    }
  138|  1.01k|  }
_RINvXNtCselIyhuOc7xF_3nom9characterINtB3_4CharNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEINtNtB5_8internal6ParserReE7processINtB1L_7OutputMNtB1L_4EmitB2w_NtB1L_8CompleteEEBM_:
  120|  1.01k|  fn process<OM: crate::OutputMode>(
  121|  1.01k|    &mut self,
  122|  1.01k|    i: I,
  123|  1.01k|  ) -> crate::PResult<OM, I, Self::Output, Self::Error> {
  124|  1.01k|    match (i).iter_elements().next().map(|t| {
  125|       |      let b = t.as_char() == self.c;
  126|       |      (&self.c, b)
  127|  1.01k|    }) {
  128|       |      None => {
  129|      0|        if OM::Incomplete::is_streaming() {
  130|      0|          Err(Err::Incomplete(Needed::new(self.c.len() - i.input_len())))
  131|       |        } else {
  132|      0|          Err(Err::Error(OM::Error::bind(|| Error::from_char(i, self.c))))
  133|       |        }
  134|       |      }
  135|  1.01k|      Some((_, false)) => Err(Err::Error(OM::Error::bind(|| Error::from_char(i, self.c)))),
  136|      0|      Some((c, true)) => Ok((i.take_from(c.len()), OM::Output::bind(|| c.as_char()))),
  137|       |    }
  138|  1.01k|  }
_RINvNtCselIyhuOc7xF_3nom9character4charReINtNtB4_5error5ErrorBB_EECs2Ab18eK5UZw_15rsonpath_syntax:
   98|  1.01k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Parser<I, Output = char, Error = Error>
   99|  1.01k|where
  100|  1.01k|  I: Input,
  101|  1.01k|  <I as Input>::Item: AsChar,
  102|  1.01k|{
  103|  1.01k|  Char { c, e: PhantomData }
  104|  1.01k|}
_RINvNtCselIyhuOc7xF_3nom9character4charReNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEBH_:
   98|  1.01k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Parser<I, Output = char, Error = Error>
   99|  1.01k|where
  100|  1.01k|  I: Input,
  101|  1.01k|  <I as Input>::Item: AsChar,
  102|  1.01k|{
  103|  1.01k|  Char { c, e: PhantomData }
  104|  1.01k|}
_RNCINvXNtCselIyhuOc7xF_3nom9characterINtB5_4CharINtNtB7_5error5ErrorReEEINtNtB7_8internal6ParserB14_E7processINtB1b_7OutputMNtB1b_4EmitB1Y_NtB1b_8CompleteEE0Cs2Ab18eK5UZw_15rsonpath_syntax:
  124|  1.01k|    match (i).iter_elements().next().map(|t| {
  125|  1.01k|      let b = t.as_char() == self.c;
  126|  1.01k|      (&self.c, b)
  127|  1.01k|    }) {
_RNCINvXNtCselIyhuOc7xF_3nom9characterINtB5_4CharINtNtB7_5error5ErrorReEEINtNtB7_8internal6ParserB14_E7processINtB1b_7OutputMNtB1b_4EmitB1Y_NtB1b_8CompleteEEs1_0Cs2Ab18eK5UZw_15rsonpath_syntax:
  136|  1.01k|      Some((c, true)) => Ok((i.take_from(c.len()), OM::Output::bind(|| c.as_char()))),
_RNCINvXNtCselIyhuOc7xF_3nom9characterINtB5_4CharNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEINtNtB7_8internal6ParserReE7processINtB1N_7OutputMNtB1N_4EmitB2y_NtB1N_8CompleteEE0BO_:
  124|  1.01k|    match (i).iter_elements().next().map(|t| {
  125|  1.01k|      let b = t.as_char() == self.c;
  126|  1.01k|      (&self.c, b)
  127|  1.01k|    }) {
_RNCINvXNtCselIyhuOc7xF_3nom9characterINtB5_4CharNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEINtNtB7_8internal6ParserReE7processINtB1N_7OutputMNtB1N_4EmitB2y_NtB1N_8CompleteEEs0_0BO_:
  135|  1.01k|      Some((_, false)) => Err(Err::Error(OM::Error::bind(|| Error::from_char(i, self.c)))),

_RINvXs7_NtCselIyhuOc7xF_3nom10combinatorINtB6_3CutINtNtB8_6branch6ChoiceTNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18descendant_segment0INtNtB8_8internal3MapNvB1d_17wildcard_selectorNvMst_B1f_NtB1f_9Selectors3oneENvB1d_21member_name_shorthandNCINvB1d_14failed_segmentB36_E0EEEINtB2f_6ParserReE7processINtB2f_7OutputMNtB2f_4EmitB56_NtB2f_9StreamingEEB1f_:
  824|  1.01k|  fn process<OM: OutputMode>(&mut self, input: I) -> PResult<OM, I, Self::Output, Self::Error> {
  825|  1.01k|    match self
  826|  1.01k|      .parser
  827|  1.01k|      .process::<OutputM<OM::Output, Emit, OM::Incomplete>>(input)
  828|       |    {
  829|      0|      Err(Err::Error(e)) => Err(Err::Failure(e)),
  830|      0|      Err(Err::Failure(e)) => Err(Err::Failure(e)),
  831|      0|      Err(Err::Incomplete(i)) => Err(Err::Incomplete(i)),
  832|  1.01k|      Ok((i, o)) => Ok((i, o)),
  833|       |    }
  834|  1.01k|  }
_RINvNtCselIyhuOc7xF_3nom10combinator3cutReNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorINtNtB4_6branch6ChoiceTNCNvNtBI_6parser18descendant_segment0INtNtB4_8internal3MapNvB24_17wildcard_selectorNvMst_BI_NtBI_9Selectors3oneENvB24_21member_name_shorthandNCINvB24_14failed_segmentB3u_E0EEEBI_:
  801|  1.01k|pub fn cut<I, E: ParseError<I>, F>(
  802|  1.01k|  parser: F,
  803|  1.01k|) -> impl Parser<I, Output = <F as Parser<I>>::Output, Error = E>
  804|  1.01k|where
  805|  1.01k|  F: Parser<I, Error = E>,
  806|  1.01k|{
  807|  1.01k|  Cut { parser }
  808|  1.01k|}
_RINvNtCselIyhuOc7xF_3nom10combinator3mapReNtCs2Ab18eK5UZw_15rsonpath_syntax7SegmentNtNtBG_5error18InternalParseErrorINtNtB4_8sequence8PrecededNCINvNtNtB4_5bytes8complete3tagBC_BC_B1j_E0INtB2_3CutINtNtB4_6branch6ChoiceTNCNvNtBG_6parser18descendant_segment0INtNtB4_8internal3MapNvB3y_17wildcard_selectorNvMst_BG_NtBG_9Selectors3oneENvB3y_21member_name_shorthandNCINvB3y_14failed_segmentB4Y_E0EEEENcNtBE_10Descendant0EBG_:
   74|  1.01k|pub fn map<I, O, E: ParseError<I>, F, G>(parser: F, f: G) -> impl Parser<I, Output = O, Error = E>
   75|  1.01k|where
   76|  1.01k|  F: Parser<I, Error = E>,
   77|  1.01k|  G: FnMut(<F as Parser<I>>::Output) -> O,
   78|  1.01k|{
   79|  1.01k|  parser.map(f)
   80|  1.01k|}
_RINvNtCselIyhuOc7xF_3nom10combinator3mapReNtCs2Ab18eK5UZw_15rsonpath_syntax8SelectorNtNtBG_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1k_E0NCNvNtBG_6parser17wildcard_selector0EBG_:
   74|  1.01k|pub fn map<I, O, E: ParseError<I>, F, G>(parser: F, f: G) -> impl Parser<I, Output = O, Error = E>
   75|  1.01k|where
   76|  1.01k|  F: Parser<I, Error = E>,
   77|  1.01k|  G: FnMut(<F as Parser<I>>::Output) -> O,
   78|  1.01k|{
   79|  1.01k|  parser.map(f)
   80|  1.01k|}
_RINvNtCselIyhuOc7xF_3nom10combinator3mapReNtCs2Ab18eK5UZw_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMst_BG_BE_3oneEBG_:
   74|  1.01k|pub fn map<I, O, E: ParseError<I>, F, G>(parser: F, f: G) -> impl Parser<I, Output = O, Error = E>
   75|  1.01k|where
   76|  1.01k|  F: Parser<I, Error = E>,
   77|  1.01k|  G: FnMut(<F as Parser<I>>::Output) -> O,
   78|  1.01k|{
   79|  1.01k|  parser.map(f)
   80|  1.01k|}

_RNvYNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorINtNtCselIyhuOc7xF_3nom5error10ParseErrorReE9from_charB6_:
   32|  1.01k|  fn from_char(input: I, _: char) -> Self {
   33|  1.01k|    Self::from_error_kind(input, ErrorKind::Char)
   34|  1.01k|  }
_RNvXs_NtCselIyhuOc7xF_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCs2Ab18eK5UZw_15rsonpath_syntax:
   79|  1.01k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   80|  1.01k|    Error { input, code: kind }
   81|  1.01k|  }

_RNvXNtCselIyhuOc7xF_3nom8internalINtNtCshZc3FwCJ069_4core6result6ResultTReNtCs2Ab18eK5UZw_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   37|  1.01k|  fn finish(self) -> Result<(I, O), E> {
   38|      0|    match self {
   39|  1.01k|      Ok(res) => Ok(res),
   40|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   41|       |      Err(Err::Incomplete(_)) => {
   42|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply the parser instead")
   43|       |      }
   44|       |    }
   45|  1.01k|  }
_RNvXNtCselIyhuOc7xF_3nom8internalINtNtCshZc3FwCJ069_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCs2Ab18eK5UZw_15rsonpath_syntax:
   37|  1.01k|  fn finish(self) -> Result<(I, O), E> {
   38|      0|    match self {
   39|  1.01k|      Ok(res) => Ok(res),
   40|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   41|       |      Err(Err::Incomplete(_)) => {
   42|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply the parser instead")
   43|       |      }
   44|       |    }
   45|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode4bindNtCs2Ab18eK5UZw_15rsonpath_syntax7SegmentNCINvXsf_B6_NCNvNtB10_6parser7segment0INtB6_6ParserReE7processINtB6_7OutputMBz_Bz_NtB6_9StreamingEEs_0EB10_:
  272|  1.01k|  fn bind<T, F: FnOnce() -> T>(f: F) -> Self::Output<T> {
  273|  1.01k|    f()
  274|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode4bindNtCs2Ab18eK5UZw_15rsonpath_syntax8SelectorNCINvXsf_B6_NvNtB10_6parser17wildcard_selectorINtB6_6ParserReE7processINtB6_7OutputMBz_Bz_NtB6_9StreamingEEs_0EB10_:
  272|  1.01k|  fn bind<T, F: FnOnce() -> T>(f: F) -> Self::Output<T> {
  273|  1.01k|    f()
  274|  1.01k|  }
_RINvXsf_NtCselIyhuOc7xF_3nom8internalNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18descendant_segment0INtB6_6ParserReE7processINtB6_7OutputMNtB6_4EmitB2e_NtB6_9StreamingEEBF_:
  516|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
  517|  1.01k|    let (i, o) = self(i).map_err(|e| match e {
  518|       |      Err::Incomplete(i) => Err::Incomplete(i),
  519|       |      Err::Error(e) => Err::Error(OM::Error::bind(|| e)),
  520|       |      Err::Failure(e) => Err::Failure(e),
  521|  1.01k|    })?;
  522|      0|    Ok((i, OM::Output::bind(|| o)))
  523|  1.01k|  }
_RINvXsf_NtCselIyhuOc7xF_3nom8internalNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser7segment0INtB6_6ParserReE7processINtB6_7OutputMNtB6_4EmitB22_NtB6_9StreamingEEBF_:
  516|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
  517|  1.01k|    let (i, o) = self(i).map_err(|e| match e {
  518|       |      Err::Incomplete(i) => Err::Incomplete(i),
  519|       |      Err::Error(e) => Err::Error(OM::Error::bind(|| e)),
  520|       |      Err::Failure(e) => Err::Failure(e),
  521|  1.01k|    })?;
  522|  1.01k|    Ok((i, OM::Output::bind(|| o)))
  523|  1.01k|  }
_RINvXsf_NtCselIyhuOc7xF_3nom8internalNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser17wildcard_selectorINtB6_6ParserReE7processINtB6_7OutputMNtB6_4EmitB2a_NtB6_9StreamingEEBD_:
  516|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
  517|  1.01k|    let (i, o) = self(i).map_err(|e| match e {
  518|       |      Err::Incomplete(i) => Err::Incomplete(i),
  519|       |      Err::Error(e) => Err::Error(OM::Error::bind(|| e)),
  520|       |      Err::Failure(e) => Err::Failure(e),
  521|  1.01k|    })?;
  522|  1.01k|    Ok((i, OM::Output::bind(|| o)))
  523|  1.01k|  }
_RINvYNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser17wildcard_selectorINtNtCselIyhuOc7xF_3nom8internal6ParserReE3mapNvMst_B7_NtB7_9Selectors3oneB1V_EB7_:
  431|  1.01k|  fn map<G, O2>(self, g: G) -> Map<Self, G>
  432|  1.01k|  where
  433|  1.01k|    G: FnMut(Self::Output) -> O2,
  434|  1.01k|    Self: core::marker::Sized,
  435|  1.01k|  {
  436|  1.01k|    Map { f: self, g }
  437|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode4bindReNCINvXsf_B6_NCINvNtNtB8_5bytes8complete3tagBY_BY_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtB6_6ParserBY_E7processINtB6_7OutputMBz_Bz_NtB6_9StreamingEEs_0EB1R_:
  272|  1.01k|  fn bind<T, F: FnOnce() -> T>(f: F) -> Self::Output<T> {
  273|  1.01k|    f()
  274|  1.01k|  }
_RINvXsb_NtCselIyhuOc7xF_3nom8internalNtB6_5CheckNtB6_4Mode4bindReNCINvXsf_B6_NCINvNtNtB8_5bytes8complete3tagBZ_BZ_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtB6_6ParserBZ_E7processINtB6_7OutputMBz_NtB6_4EmitNtB6_9StreamingEEs_0EB1S_:
  302|  1.01k|  fn bind<T, F: FnOnce() -> T>(_: F) -> Self::Output<T> {}
_RINvXsf_NtCselIyhuOc7xF_3nom8internalNCINvNtNtB8_5bytes8complete3tagReB14_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtB6_6ParserB14_E7processINtB6_7OutputMNtB6_4EmitB2P_NtB6_9StreamingEEB1e_:
  516|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
  517|  1.01k|    let (i, o) = self(i).map_err(|e| match e {
  518|       |      Err::Incomplete(i) => Err::Incomplete(i),
  519|       |      Err::Error(e) => Err::Error(OM::Error::bind(|| e)),
  520|       |      Err::Failure(e) => Err::Failure(e),
  521|  1.01k|    })?;
  522|  1.01k|    Ok((i, OM::Output::bind(|| o)))
  523|  1.01k|  }
_RINvXsf_NtCselIyhuOc7xF_3nom8internalNCINvNtNtB8_5bytes8complete3tagReB14_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtB6_6ParserB14_E7processINtB6_7OutputMNtB6_5CheckNtB6_4EmitNtB6_9StreamingEEB1e_:
  516|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
  517|  1.01k|    let (i, o) = self(i).map_err(|e| match e {
  518|       |      Err::Incomplete(i) => Err::Incomplete(i),
  519|       |      Err::Error(e) => Err::Error(OM::Error::bind(|| e)),
  520|       |      Err::Failure(e) => Err::Failure(e),
  521|  1.01k|    })?;
  522|  1.01k|    Ok((i, OM::Output::bind(|| o)))
  523|  1.01k|  }
_RINvYNCINvNtNtCselIyhuOc7xF_3nom5bytes8complete3tagReBN_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtNtBc_8internal6ParserBN_E3mapNCNvNtBW_6parser17wildcard_selector0NtBW_8SelectorEBW_:
  431|  1.01k|  fn map<G, O2>(self, g: G) -> Map<Self, G>
  432|  1.01k|  where
  433|  1.01k|    G: FnMut(Self::Output) -> O2,
  434|  1.01k|    Self: core::marker::Sized,
  435|  1.01k|  {
  436|  1.01k|    Map { f: self, g }
  437|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode3mapNtCs2Ab18eK5UZw_15rsonpath_syntax8SelectorNtBZ_9SelectorsNCINvXsg_B6_INtB6_3MapNvNtBZ_6parser17wildcard_selectorNvMst_BZ_B1D_3oneEINtB6_6ParserReE7processINtB6_7OutputMBz_Bz_NtB6_9StreamingEE0EBZ_:
  277|  1.01k|  fn map<T, U, F: FnOnce(T) -> U>(x: Self::Output<T>, f: F) -> Self::Output<U> {
  278|  1.01k|    f(x)
  279|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode3mapNtCs2Ab18eK5UZw_15rsonpath_syntax9SelectorsNtBZ_7SegmentNCINvXsg_B6_INtB6_3MapINtNtB8_8sequence8PrecededNCINvNtNtB8_5bytes8complete3tagReB38_NtNtBZ_5error18InternalParseErrorE0INtNtB8_10combinator3CutINtNtB8_6branch6ChoiceTNCNvNtBZ_6parser18descendant_segment0IB24_NvB4C_17wildcard_selectorNvMst_BZ_BX_3oneENvB4C_21member_name_shorthandNCINvB4C_14failed_segmentBX_E0EEEENcNtB1E_10Descendant0EINtB6_6ParserB38_E7processINtB6_7OutputMBz_Bz_NtB6_9StreamingEE0EBZ_:
  277|  1.01k|  fn map<T, U, F: FnOnce(T) -> U>(x: Self::Output<T>, f: F) -> Self::Output<U> {
  278|  1.01k|    f(x)
  279|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode3mapReNtCs2Ab18eK5UZw_15rsonpath_syntax8SelectorNCINvXsg_B6_INtB6_3MapNCINvNtNtB8_5bytes8complete3tagBX_BX_NtNtB11_5error18InternalParseErrorE0NCNvNtB11_6parser17wildcard_selector0EINtB6_6ParserBX_E7processINtB6_7OutputMBz_Bz_NtB6_9StreamingEE0EB11_:
  277|  1.01k|  fn map<T, U, F: FnOnce(T) -> U>(x: Self::Output<T>, f: F) -> Self::Output<U> {
  278|  1.01k|    f(x)
  279|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode4bindNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorNCNCINvXsf_B6_NCNvNtB12_6parser18descendant_segment0INtB6_6ParserReE7processINtB6_7OutputMBz_Bz_NtB6_9StreamingEE00EB12_:
  272|  1.01k|  fn bind<T, F: FnOnce() -> T>(f: F) -> Self::Output<T> {
  273|  1.01k|    f()
  274|  1.01k|  }
_RINvXsg_NtCselIyhuOc7xF_3nom8internalINtB6_3MapINtNtB8_8sequence8PrecededNCINvNtNtB8_5bytes8complete3tagReB1E_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtNtB8_10combinator3CutINtNtB8_6branch6ChoiceTNCNvNtB1O_6parser18descendant_segment0IBA_NvB3A_17wildcard_selectorNvMst_B1O_NtB1O_9Selectors3oneENvB3A_21member_name_shorthandNCINvB3A_14failed_segmentB4L_E0EEEENcNtNtB1O_7Segment10Descendant0EINtB6_6ParserB1E_E7processINtB6_7OutputMNtB6_4EmitB7i_NtB6_9StreamingEEB1O_:
  592|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
  593|  1.01k|    match self.f.process::<OM>(i) {
  594|      0|      Err(e) => Err(e),
  595|  1.01k|      Ok((i, o)) => Ok((i, OM::Output::map(o, |o| (self.g)(o)))),
  596|       |    }
  597|  1.01k|  }
_RINvXsg_NtCselIyhuOc7xF_3nom8internalINtB6_3MapNCINvNtNtB8_5bytes8complete3tagReB1e_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0NCNvNtB1o_6parser17wildcard_selector0EINtB6_6ParserB1e_E7processINtB6_7OutputMNtB6_4EmitB3B_NtB6_9StreamingEEB1o_:
  592|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
  593|  1.01k|    match self.f.process::<OM>(i) {
  594|      0|      Err(e) => Err(e),
  595|  1.01k|      Ok((i, o)) => Ok((i, OM::Output::map(o, |o| (self.g)(o)))),
  596|       |    }
  597|  1.01k|  }
_RINvXsg_NtCselIyhuOc7xF_3nom8internalINtB6_3MapNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser17wildcard_selectorNvMst_BN_NtBN_9Selectors3oneEINtB6_6ParserReE7processINtB6_7OutputMNtB6_4EmitB2N_NtB6_9StreamingEEBN_:
  592|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
  593|  1.01k|    match self.f.process::<OM>(i) {
  594|      0|      Err(e) => Err(e),
  595|  1.01k|      Ok((i, o)) => Ok((i, OM::Output::map(o, |o| (self.g)(o)))),
  596|       |    }
  597|  1.01k|  }
_RNCINvXsf_NtCselIyhuOc7xF_3nom8internalNCINvNtNtBa_5bytes8complete3tagReB16_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtB8_6ParserB16_E7processINtB8_7OutputMNtB8_4EmitB2R_NtB8_9StreamingEEs_0B1g_:
  522|  1.01k|    Ok((i, OM::Output::bind(|| o)))
_RNCINvXsf_NtCselIyhuOc7xF_3nom8internalNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18descendant_segment0INtB8_6ParserReE7processINtB8_7OutputMNtB8_4EmitB2g_NtB8_9StreamingEE0BH_:
  517|  1.01k|    let (i, o) = self(i).map_err(|e| match e {
  518|      0|      Err::Incomplete(i) => Err::Incomplete(i),
  519|  1.01k|      Err::Error(e) => Err::Error(OM::Error::bind(|| e)),
  520|      0|      Err::Failure(e) => Err::Failure(e),
  521|  1.01k|    })?;
_RNCINvXsf_NtCselIyhuOc7xF_3nom8internalNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser7segment0INtB8_6ParserReE7processINtB8_7OutputMNtB8_4EmitB24_NtB8_9StreamingEEs_0BH_:
  522|  1.01k|    Ok((i, OM::Output::bind(|| o)))
_RNCINvXsf_NtCselIyhuOc7xF_3nom8internalNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser17wildcard_selectorINtB8_6ParserReE7processINtB8_7OutputMNtB8_4EmitB2c_NtB8_9StreamingEEs_0BF_:
  522|  1.01k|    Ok((i, OM::Output::bind(|| o)))
_RNCINvXsg_NtCselIyhuOc7xF_3nom8internalINtB8_3MapINtNtBa_8sequence8PrecededNCINvNtNtBa_5bytes8complete3tagReB1G_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtNtBa_10combinator3CutINtNtBa_6branch6ChoiceTNCNvNtB1Q_6parser18descendant_segment0IBC_NvB3C_17wildcard_selectorNvMst_B1Q_NtB1Q_9Selectors3oneENvB3C_21member_name_shorthandNCINvB3C_14failed_segmentB4N_E0EEEENcNtNtB1Q_7Segment10Descendant0EINtB8_6ParserB1G_E7processINtB8_7OutputMNtB8_4EmitB7k_NtB8_9StreamingEE0B1Q_:
  595|  1.01k|      Ok((i, o)) => Ok((i, OM::Output::map(o, |o| (self.g)(o)))),
_RNCINvXsg_NtCselIyhuOc7xF_3nom8internalINtB8_3MapNCINvNtNtBa_5bytes8complete3tagReB1g_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0NCNvNtB1q_6parser17wildcard_selector0EINtB8_6ParserB1g_E7processINtB8_7OutputMNtB8_4EmitB3D_NtB8_9StreamingEE0B1q_:
  595|  1.01k|      Ok((i, o)) => Ok((i, OM::Output::map(o, |o| (self.g)(o)))),
_RNCINvXsg_NtCselIyhuOc7xF_3nom8internalINtB8_3MapNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser17wildcard_selectorNvMst_BP_NtBP_9Selectors3oneEINtB8_6ParserReE7processINtB8_7OutputMNtB8_4EmitB2P_NtB8_9StreamingEE0BP_:
  595|  1.01k|      Ok((i, o)) => Ok((i, OM::Output::map(o, |o| (self.g)(o)))),
_RNCNCINvXsf_NtCselIyhuOc7xF_3nom8internalNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18descendant_segment0INtBa_6ParserReE7processINtBa_7OutputMNtBa_4EmitB2i_NtBa_9StreamingEE00BJ_:
  519|  1.01k|      Err::Error(e) => Err::Error(OM::Error::bind(|| e)),
_RNvYINtNtCselIyhuOc7xF_3nom8internal3MapINtNtB7_8sequence8PrecededNCINvNtNtB7_5bytes8complete3tagReB1x_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtNtB7_10combinator3CutINtNtB7_6branch6ChoiceTNCNvNtB1H_6parser18descendant_segment0IB3_NvB3t_17wildcard_selectorNvMst_B1H_NtB1H_9Selectors3oneENvB3t_21member_name_shorthandNCINvB3t_14failed_segmentB4E_E0EEEENcNtNtB1H_7Segment10Descendant0EINtB5_6ParserB1x_E5parseB1H_:
  412|  1.01k|  fn parse(&mut self, input: Input) -> IResult<Input, Self::Output, Self::Error> {
  413|  1.01k|    self.process::<OutputM<Emit, Emit, Streaming>>(input)
  414|  1.01k|  }
_RNvYINtNtCselIyhuOc7xF_3nom8internal3MapNCINvNtNtB7_5bytes8complete3tagReB17_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0NCNvNtB1h_6parser17wildcard_selector0EINtB5_6ParserB17_E5parseB1h_:
  412|  1.01k|  fn parse(&mut self, input: Input) -> IResult<Input, Self::Output, Self::Error> {
  413|  1.01k|    self.process::<OutputM<Emit, Emit, Streaming>>(input)
  414|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode4bindNtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorNCINvXNtB8_9characterINtB23_4CharBY_EINtB6_6ParserReE7processINtB6_7OutputMBz_Bz_NtB6_8CompleteEEs0_0EB12_:
  272|  1.01k|  fn bind<T, F: FnOnce() -> T>(f: F) -> Self::Output<T> {
  273|  1.01k|    f()
  274|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode4bindcNCINvXNtB8_9characterINtB15_4CharINtNtB8_5error5ErrorReEEINtB6_6ParserB1Q_E7processINtB6_7OutputMBz_Bz_NtB6_8CompleteEEs1_0ECs2Ab18eK5UZw_15rsonpath_syntax:
  272|  1.01k|  fn bind<T, F: FnOnce() -> T>(f: F) -> Self::Output<T> {
  273|  1.01k|    f()
  274|  1.01k|  }
_RNvYINtNtCselIyhuOc7xF_3nom6branch6ChoiceTNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser7segment0NCBG_s_0NCINvBI_14failed_segmentNtBK_7SegmentE0EEINtNtB7_8internal6ParserReE5parseBK_:
  412|  1.01k|  fn parse(&mut self, input: Input) -> IResult<Input, Self::Output, Self::Error> {
  413|  1.01k|    self.process::<OutputM<Emit, Emit, Streaming>>(input)
  414|  1.01k|  }
_RINvXsa_NtCselIyhuOc7xF_3nom8internalNtB6_4EmitNtB6_4Mode4bindReNCINvXNtB8_5bytesINtB16_3TagBY_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorEINtB6_6ParserBY_E7processINtB6_7OutputMBz_Bz_NtB6_8CompleteEE0EB1z_:
  272|  2.02k|  fn bind<T, F: FnOnce() -> T>(f: F) -> Self::Output<T> {
  273|  2.02k|    f()
  274|  2.02k|  }
_RINvYINtNtCselIyhuOc7xF_3nom8sequence8PrecededNCINvNtNtB8_5bytes8complete3tagReB1d_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtNtB8_10combinator3CutINtNtB8_6branch6ChoiceTNCNvNtB1n_6parser18descendant_segment0INtNtB8_8internal3MapNvB39_17wildcard_selectorNvMst_B1n_NtB1n_9Selectors3oneENvB39_21member_name_shorthandNCINvB39_14failed_segmentB4B_E0EEEEINtB3K_6ParserB1d_E3mapNcNtNtB1n_7Segment10Descendant0B6p_EB1n_:
  431|  1.01k|  fn map<G, O2>(self, g: G) -> Map<Self, G>
  432|  1.01k|  where
  433|  1.01k|    G: FnMut(Self::Output) -> O2,
  434|  1.01k|    Self: core::marker::Sized,
  435|  1.01k|  {
  436|  1.01k|    Map { f: self, g }
  437|  1.01k|  }

_RINvXNtCselIyhuOc7xF_3nom8sequenceINtB3_8PrecededNCINvNtNtB5_5bytes8complete3tagReB1g_NtNtCs2Ab18eK5UZw_15rsonpath_syntax5error18InternalParseErrorE0INtNtB5_10combinator3CutINtNtB5_6branch6ChoiceTNCNvNtB1q_6parser18descendant_segment0INtNtB5_8internal3MapNvB3c_17wildcard_selectorNvMst_B1q_NtB1q_9Selectors3oneENvB3c_21member_name_shorthandNCINvB3c_14failed_segmentB4E_E0EEEEINtB3N_6ParserB1g_E7processINtB3N_7OutputMNtB3N_4EmitB6H_NtB3N_9StreamingEEB1q_:
   88|  1.01k|  fn process<OM: OutputMode>(&mut self, i: I) -> PResult<OM, I, Self::Output, Self::Error> {
   89|  1.01k|    let (i, _) = self
   90|  1.01k|      .f
   91|  1.01k|      .process::<OutputM<Check, OM::Error, OM::Incomplete>>(i)?;
   92|  1.01k|    let (i, o2) = self.g.process::<OM>(i)?;
   93|       |
   94|  1.01k|    Ok((i, o2))
   95|  1.01k|  }
_RINvNtCselIyhuOc7xF_3nom8sequence8precededReNtCs2Ab18eK5UZw_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1n_E0INtNtB4_10combinator3CutINtNtB4_6branch6ChoiceTNCNvNtBI_6parser18descendant_segment0INtNtB4_8internal3MapNvB3q_17wildcard_selectorNvMst_BI_BG_3oneENvB3q_21member_name_shorthandNCINvB3q_14failed_segmentBG_E0EEEEBI_:
   61|  1.01k|pub fn preceded<I, O, E: ParseError<I>, F, G>(
   62|  1.01k|  first: F,
   63|  1.01k|  second: G,
   64|  1.01k|) -> impl Parser<I, Output = O, Error = E>
   65|  1.01k|where
   66|  1.01k|  F: Parser<I, Error = E>,
   67|  1.01k|  G: Parser<I, Output = O, Error = E>,
   68|  1.01k|{
   69|  1.01k|  Preceded {
   70|  1.01k|    f: first,
   71|  1.01k|    g: second,
   72|  1.01k|  }
   73|  1.01k|}

_RNvXs4_NtCselIyhuOc7xF_3nom6traitsReNtB5_7AsBytes8as_bytes:
  620|  2.02k|  fn as_bytes(&self) -> &[u8] {
  621|  2.02k|    (*self).as_bytes()
  622|  2.02k|  }
_RNvXse_NtCselIyhuOc7xF_3nom6traitsRShINtB5_7CompareBw_E7compare:
  893|  2.02k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  894|  2.02k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  895|  2.02k|
  896|  2.02k|    match pos {
  897|      0|      Some(_) => CompareResult::Error,
  898|       |      None => {
  899|  2.02k|        if self.len() >= t.len() {
  900|  2.02k|          CompareResult::Ok
  901|       |        } else {
  902|      0|          CompareResult::Incomplete
  903|       |        }
  904|       |      }
  905|       |    }
  906|  2.02k|  }
_RNvXsg_NtCselIyhuOc7xF_3nom6traitsReINtB5_7CompareBw_E7compare:
  937|  2.02k|  fn compare(&self, t: &'b str) -> CompareResult {
  938|  2.02k|    self.as_bytes().compare(t.as_bytes())
  939|  2.02k|  }
_RNCNvXse_NtCselIyhuOc7xF_3nom6traitsRShINtB7_7CompareBy_E7compare0Cs2Ab18eK5UZw_15rsonpath_syntax:
  894|  3.03k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXs_NtCselIyhuOc7xF_3nom6traitsReNtB4_5Input13iter_elementsCs2Ab18eK5UZw_15rsonpath_syntax:
  392|  2.02k|  fn iter_elements(&self) -> Self::Iter {
  393|  2.02k|    self.chars()
  394|  2.02k|  }
_RNvXs_NtCselIyhuOc7xF_3nom6traitsReNtB4_5Input4takeCs2Ab18eK5UZw_15rsonpath_syntax:
  368|  2.02k|  fn take(&self, index: usize) -> Self {
  369|  2.02k|    &self[..index]
  370|  2.02k|  }
_RNvXs_NtCselIyhuOc7xF_3nom6traitsReNtB4_5Input9take_fromCs2Ab18eK5UZw_15rsonpath_syntax:
  373|  3.03k|  fn take_from(&self, index: usize) -> Self {
  374|  3.03k|    &self[index..]
  375|  3.03k|  }
_RNvXsc_NtCselIyhuOc7xF_3nom6traitscNtB5_6AsChar7as_charCs2Ab18eK5UZw_15rsonpath_syntax:
  776|  2.02k|  fn as_char(self) -> char {
  777|  2.02k|    self
  778|  2.02k|  }
_RNvXsd_NtCselIyhuOc7xF_3nom6traitsRcNtB5_6AsChar3lenCs2Ab18eK5UZw_15rsonpath_syntax:
  846|  1.01k|  fn len(self) -> usize {
  847|  1.01k|    self.len_utf8()
  848|  1.01k|  }
_RNvXsd_NtCselIyhuOc7xF_3nom6traitsRcNtB5_6AsChar7as_charCs2Ab18eK5UZw_15rsonpath_syntax:
  818|  1.01k|  fn as_char(self) -> char {
  819|  1.01k|    *self
  820|  1.01k|  }
_RNvXs_NtCselIyhuOc7xF_3nom6traitsReNtB4_5Input9input_len:
  363|  2.02k|  fn input_len(&self) -> usize {
  364|  2.02k|    self.len()
  365|  2.02k|  }

_RINvCsatVIoWEpIxB_8smallvec12layout_arrayNtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFrameECse4uPzH624PE_20fuzz_arbitrary_bytes:
  330|     25|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  331|     25|    let size = mem::size_of::<T>()
  332|     25|        .checked_mul(n)
  333|     25|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  334|     25|    let align = mem::align_of::<T>();
  335|     25|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  336|     25|}
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E4heapCse4uPzH624PE_20fuzz_arbitrary_bytes:
  657|    476|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  658|    476|        (ConstNonNull(self.heap.0), self.heap.1)
  659|    476|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E6inlineCse4uPzH624PE_20fuzz_arbitrary_bytes:
  639|  2.56k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  640|  2.56k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  641|  2.56k|    }
_RNvMsR_CsatVIoWEpIxB_8smallvecINtB5_12ConstNonNullNtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFrameE3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
 2484|  2.56k|    fn new(ptr: *const T) -> Option<Self> {
 2485|  2.56k|        NonNull::new(ptr as *mut T).map(Self)
 2486|  2.56k|    }
_RNvMsR_CsatVIoWEpIxB_8smallvecINtB5_12ConstNonNullNtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFrameE6as_ptrCse4uPzH624PE_20fuzz_arbitrary_bytes:
 2488|  3.01k|    fn as_ptr(self) -> *const T {
 2489|  3.01k|        self.0.as_ptr()
 2490|  3.01k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCse4uPzH624PE_20fuzz_arbitrary_bytes:
 1227|     25|    fn reserve_one_unchecked(&mut self) {
 1228|     25|        debug_assert_eq!(self.len(), self.capacity());
 1229|     25|        let new_cap = self.len()
 1230|     25|            .checked_add(1)
 1231|     25|            .and_then(usize::checked_next_power_of_two)
 1232|     25|            .expect("capacity overflow");
 1233|     25|        infallible(self.try_grow(new_cap))
 1234|     25|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E3lenCse4uPzH624PE_20fuzz_arbitrary_bytes:
  954|     25|    pub fn len(&self) -> usize {
  955|     25|        self.triple().1
  956|     25|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E3popCse4uPzH624PE_20fuzz_arbitrary_bytes:
 1132|  2.99k|    pub fn pop(&mut self) -> Option<A::Item> {
 1133|  2.99k|        unsafe {
 1134|  2.99k|            let (ptr, len_ptr, _) = self.triple_mut();
 1135|  2.99k|            let ptr: *const _ = ptr.as_ptr();
 1136|  2.99k|            if *len_ptr == 0 {
 1137|      0|                return None;
 1138|  2.99k|            }
 1139|  2.99k|            let last_index = *len_ptr - 1;
 1140|  2.99k|            *len_ptr = last_index;
 1141|  2.99k|            Some(ptr::read(ptr.add(last_index)))
 1142|       |        }
 1143|  2.99k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E4pushCse4uPzH624PE_20fuzz_arbitrary_bytes:
 1116|  10.4k|    pub fn push(&mut self, value: A::Item) {
 1117|  10.4k|        unsafe {
 1118|  10.4k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1119|  10.4k|            if *len == cap {
 1120|     25|                self.reserve_one_unchecked();
 1121|     25|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1122|     25|                ptr = heap_ptr;
 1123|     25|                len = heap_len;
 1124|  10.4k|            }
 1125|  10.4k|            ptr::write(ptr.as_ptr().add(*len), value);
 1126|  10.4k|            *len += 1;
 1127|  10.4k|        }
 1128|  10.4k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E6tripleCse4uPzH624PE_20fuzz_arbitrary_bytes:
  973|  3.04k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  974|  3.04k|        unsafe {
  975|  3.04k|            if self.spilled() {
  976|    476|                let (ptr, len) = self.data.heap();
  977|    476|                (ptr, len, self.capacity)
  978|       |            } else {
  979|  2.56k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  980|       |            }
  981|       |        }
  982|  3.04k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E8try_growCse4uPzH624PE_20fuzz_arbitrary_bytes:
 1175|     25|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1176|     25|        unsafe {
 1177|     25|            let unspilled = !self.spilled();
 1178|     25|            let (ptr, &mut len, cap) = self.triple_mut();
 1179|     25|            assert!(new_cap >= len);
 1180|     25|            if new_cap <= Self::inline_capacity() {
 1181|      0|                if unspilled {
 1182|      0|                    return Ok(());
 1183|      0|                }
 1184|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1185|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1186|      0|                self.capacity = len;
 1187|      0|                deallocate(ptr, cap);
 1188|     25|            } else if new_cap != cap {
 1189|     25|                let layout = layout_array::<A::Item>(new_cap)?;
 1190|     25|                debug_assert!(layout.size() > 0);
 1191|       |                let new_alloc;
 1192|     25|                if unspilled {
 1193|     25|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1194|     25|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1195|     25|                        .cast();
 1196|     25|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1197|       |                } else {
 1198|       |                    // This should never fail since the same succeeded
 1199|       |                    // when previously allocating `ptr`.
 1200|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1201|       |
 1202|      0|                    let new_ptr =
 1203|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1204|      0|                    new_alloc = NonNull::new(new_ptr)
 1205|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1206|      0|                        .cast();
 1207|       |                }
 1208|     25|                self.data = SmallVecData::from_heap(new_alloc, len);
 1209|     25|                self.capacity = new_cap;
 1210|      0|            }
 1211|     25|            Ok(())
 1212|       |        }
 1213|     25|    }
_RNvXsf_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_ENtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5derefCse4uPzH624PE_20fuzz_arbitrary_bytes:
 1848|  3.01k|    fn deref(&self) -> &[A::Item] {
 1849|  3.01k|        unsafe {
 1850|  3.01k|            let (ptr, len, _) = self.triple();
 1851|  3.01k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1852|  3.01k|        }
 1853|  3.01k|    }
_RINvCsatVIoWEpIxB_8smallvec10infallibleuECs6RNShWQ8XAz_8rsonpath:
  320|  4.07k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  321|      0|    match result {
  322|  4.07k|        Ok(x) => x,
  323|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  324|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  325|       |    }
  326|  4.07k|}
_RINvXsr_CsatVIoWEpIxB_8smallvecINtB6_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorBJ_E9from_iterINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4l_9Minimizer18process_superstate0EEBN_:
 2081|  2.02k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2082|  2.02k|        let mut v = SmallVec::new();
 2083|  2.02k|        v.extend(iterable);
 2084|  2.02k|        v
 2085|  2.02k|    }
_RINvXsr_CsatVIoWEpIxB_8smallvecINtB6_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1m_9automaton5state5StateEj2_EINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorBJ_E9from_iterINtNtNtB2X_8adapters3map3MapINtCsedMgWpJety3_10vector_map8IntoIterBK_NtNtB2j_9small_set11SmallSet256ENCNvMNtB2j_9minimizerNtB5M_9Minimizer18process_superstates_0EEB1m_:
 2081|  2.02k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2082|  2.02k|        let mut v = SmallVec::new();
 2083|  2.02k|        v.extend(iterable);
 2084|  2.02k|        v
 2085|  2.02k|    }
_RINvXss_CsatVIoWEpIxB_8smallvecINtB6_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendBJ_E6extendINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4b_9Minimizer18process_superstate0EEBN_:
 2089|  2.02k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2090|  2.02k|        let mut iter = iterable.into_iter();
 2091|  2.02k|        let (lower_size_bound, _) = iter.size_hint();
 2092|  2.02k|        self.reserve(lower_size_bound);
 2093|  2.02k|
 2094|  2.02k|        unsafe {
 2095|  2.02k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2096|  2.02k|            let ptr = ptr.as_ptr();
 2097|  2.02k|            let mut len = SetLenOnDrop::new(len_ptr);
 2098|  2.02k|            while len.get() < cap {
 2099|  2.02k|                if let Some(out) = iter.next() {
 2100|      0|                    ptr::write(ptr.add(len.get()), out);
 2101|      0|                    len.increment_len(1);
 2102|      0|                } else {
 2103|  2.02k|                    return;
 2104|       |                }
 2105|       |            }
 2106|       |        }
 2107|       |
 2108|      0|        for elem in iter {
 2109|      0|            self.push(elem);
 2110|      0|        }
 2111|  2.02k|    }
_RINvXss_CsatVIoWEpIxB_8smallvecINtB6_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1m_9automaton5state5StateEj2_EINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendBJ_E6extendINtNtNtB2X_8adapters3map3MapINtCsedMgWpJety3_10vector_map8IntoIterBK_NtNtB2j_9small_set11SmallSet256ENCNvMNtB2j_9minimizerNtB5C_9Minimizer18process_superstates_0EEB1m_:
 2089|  2.02k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2090|  2.02k|        let mut iter = iterable.into_iter();
 2091|  2.02k|        let (lower_size_bound, _) = iter.size_hint();
 2092|  2.02k|        self.reserve(lower_size_bound);
 2093|  2.02k|
 2094|  2.02k|        unsafe {
 2095|  2.02k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2096|  2.02k|            let ptr = ptr.as_ptr();
 2097|  2.02k|            let mut len = SetLenOnDrop::new(len_ptr);
 2098|  2.02k|            while len.get() < cap {
 2099|  2.02k|                if let Some(out) = iter.next() {
 2100|      0|                    ptr::write(ptr.add(len.get()), out);
 2101|      0|                    len.increment_len(1);
 2102|      0|                } else {
 2103|  2.02k|                    return;
 2104|       |                }
 2105|       |            }
 2106|       |        }
 2107|       |
 2108|      0|        for elem in iter {
 2109|      0|            self.push(elem);
 2110|      0|        }
 2111|  2.02k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutBR_:
  643|  9.11k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  644|  9.11k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  645|  9.11k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E11from_inlineBR_:
  647|  5.06k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  648|  5.06k|        SmallVecData {
  649|  5.06k|            inline: core::mem::ManuallyDrop::new(inline),
  650|  5.06k|        }
  651|  5.06k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E6inlineBR_:
  639|  6.45k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  640|  6.45k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  641|  6.45k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E10inline_mutBT_:
  643|  12.7k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  644|  12.7k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  645|  12.7k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  647|  1.01k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  648|  1.01k|        SmallVecData {
  649|  1.01k|            inline: core::mem::ManuallyDrop::new(inline),
  650|  1.01k|        }
  651|  1.01k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E8heap_mutBT_:
  661|  1.80k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  662|  1.80k|        let h = &mut self.heap;
  663|  1.80k|        (h.0, &mut h.1)
  664|  1.80k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E9from_heapBT_:
  666|     25|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  667|     25|        SmallVecData { heap: (ptr, len) }
  668|     25|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E10inline_mutBT_:
  643|  6.07k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  644|  6.07k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  645|  6.07k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E11from_inlineBT_:
  647|  1.01k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  648|  1.01k|        SmallVecData {
  649|  1.01k|            inline: core::mem::ManuallyDrop::new(inline),
  650|  1.01k|        }
  651|  1.01k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E10inline_mutB1q_:
  643|  9.11k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  644|  9.11k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  645|  9.11k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E11from_inlineB1q_:
  647|  5.06k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  648|  5.06k|        SmallVecData {
  649|  5.06k|            inline: core::mem::ManuallyDrop::new(inline),
  650|  5.06k|        }
  651|  5.06k|    }
_RNvMs9_CsatVIoWEpIxB_8smallvecINtB5_12SmallVecDataATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1q_9automaton5state5StateEj2_E6inlineB1q_:
  639|  13.8k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  640|  13.8k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  641|  13.8k|    }
_RNvMsR_CsatVIoWEpIxB_8smallvecINtB5_12ConstNonNullNtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionE3newBQ_:
 2484|  6.45k|    fn new(ptr: *const T) -> Option<Self> {
 2485|  6.45k|        NonNull::new(ptr as *mut T).map(Self)
 2486|  6.45k|    }
_RNvMsR_CsatVIoWEpIxB_8smallvecINtB5_12ConstNonNullNtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionE6as_ptrBQ_:
 2488|  6.45k|    fn as_ptr(self) -> *const T {
 2489|  6.45k|        self.0.as_ptr()
 2490|  6.45k|    }
_RNvMsR_CsatVIoWEpIxB_8smallvecINtB5_12ConstNonNullTINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1p_9automaton5state5StateEE3newB1p_:
 2484|  13.8k|    fn new(ptr: *const T) -> Option<Self> {
 2485|  13.8k|        NonNull::new(ptr as *mut T).map(Self)
 2486|  13.8k|    }
_RNvMsR_CsatVIoWEpIxB_8smallvecINtB5_12ConstNonNullTINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1p_9automaton5state5StateEE6as_ptrB1p_:
 2488|  13.8k|    fn as_ptr(self) -> *const T {
 2489|  13.8k|        self.0.as_ptr()
 2490|  13.8k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutBM_:
  986|  9.11k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  987|  9.11k|        unsafe {
  988|  9.11k|            if self.spilled() {
  989|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  990|      0|                (ptr, len_ptr, self.capacity)
  991|       |            } else {
  992|  9.11k|                (
  993|  9.11k|                    self.data.inline_mut(),
  994|  9.11k|                    &mut self.capacity,
  995|  9.11k|                    Self::inline_capacity(),
  996|  9.11k|                )
  997|       |            }
  998|       |        }
  999|  9.11k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E11inline_sizeBM_:
  948|  1.01k|    pub fn inline_size(&self) -> usize {
  949|  1.01k|        Self::inline_capacity()
  950|  1.01k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E11try_reserveBM_:
 1239|  2.02k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1240|  2.02k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1241|  2.02k|        // calls to it from callers.
 1242|  2.02k|        let (_, &mut len, cap) = self.triple_mut();
 1243|  2.02k|        if cap - len >= additional {
 1244|  2.02k|            return Ok(());
 1245|      0|        }
 1246|      0|        let new_cap = len
 1247|      0|            .checked_add(additional)
 1248|      0|            .and_then(usize::checked_next_power_of_two)
 1249|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1250|      0|        self.try_grow(new_cap)
 1251|  2.02k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityBM_:
  928|  37.2k|    fn inline_capacity() -> usize {
  929|  37.2k|        if mem::size_of::<A::Item>() > 0 {
  930|  37.2k|            A::size()
  931|       |        } else {
  932|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  933|       |            // Therefore all items are at the same address,
  934|       |            // and any array size has capacity for infinitely many items.
  935|       |            // The capacity is limited by the bit width of the length field.
  936|       |            //
  937|       |            // `Vec` also does this:
  938|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  939|       |            //
  940|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  941|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  942|      0|            core::usize::MAX
  943|       |        }
  944|  37.2k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E3newBM_:
  781|  5.06k|    pub fn new() -> SmallVec<A> {
  782|  5.06k|        // Try to detect invalid custom implementations of `Array`. Hopefully,
  783|  5.06k|        // this check should be optimized away entirely for valid ones.
  784|  5.06k|        assert!(
  785|  5.06k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  786|  5.06k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  787|       |        );
  788|  5.06k|        SmallVec {
  789|  5.06k|            capacity: 0,
  790|  5.06k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  791|  5.06k|        }
  792|  5.06k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E6tripleBM_:
  973|  6.45k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  974|  6.45k|        unsafe {
  975|  6.45k|            if self.spilled() {
  976|      0|                let (ptr, len) = self.data.heap();
  977|      0|                (ptr, len, self.capacity)
  978|       |            } else {
  979|  6.45k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  980|       |            }
  981|       |        }
  982|  6.45k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E7reserveBM_:
 1221|  2.02k|    pub fn reserve(&mut self, additional: usize) {
 1222|  2.02k|        infallible(self.try_reserve(additional))
 1223|  2.02k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_E7spilledBM_:
 1003|  20.6k|    pub fn spilled(&self) -> bool {
 1004|  20.6k|        self.capacity > Self::inline_capacity()
 1005|  20.6k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E10triple_mutBO_:
  986|  14.4k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  987|  14.4k|        unsafe {
  988|  14.4k|            if self.spilled() {
  989|  1.75k|                let (ptr, len_ptr) = self.data.heap_mut();
  990|  1.75k|                (ptr, len_ptr, self.capacity)
  991|       |            } else {
  992|  12.7k|                (
  993|  12.7k|                    self.data.inline_mut(),
  994|  12.7k|                    &mut self.capacity,
  995|  12.7k|                    Self::inline_capacity(),
  996|  12.7k|                )
  997|       |            }
  998|       |        }
  999|  14.4k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  948|  1.01k|    pub fn inline_size(&self) -> usize {
  949|  1.01k|        Self::inline_capacity()
  950|  1.01k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  928|  34.8k|    fn inline_capacity() -> usize {
  929|  34.8k|        if mem::size_of::<A::Item>() > 0 {
  930|  34.8k|            A::size()
  931|       |        } else {
  932|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  933|       |            // Therefore all items are at the same address,
  934|       |            // and any array size has capacity for infinitely many items.
  935|       |            // The capacity is limited by the bit width of the length field.
  936|       |            //
  937|       |            // `Vec` also does this:
  938|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  939|       |            //
  940|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  941|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  942|      0|            core::usize::MAX
  943|       |        }
  944|  34.8k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E3newBO_:
  781|  1.01k|    pub fn new() -> SmallVec<A> {
  782|  1.01k|        // Try to detect invalid custom implementations of `Array`. Hopefully,
  783|  1.01k|        // this check should be optimized away entirely for valid ones.
  784|  1.01k|        assert!(
  785|  1.01k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  786|  1.01k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  787|       |        );
  788|  1.01k|        SmallVec {
  789|  1.01k|            capacity: 0,
  790|  1.01k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  791|  1.01k|        }
  792|  1.01k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_E7spilledBO_:
 1003|  18.5k|    pub fn spilled(&self) -> bool {
 1004|  18.5k|        self.capacity > Self::inline_capacity()
 1005|  18.5k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E10triple_mutBO_:
  986|  6.07k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  987|  6.07k|        unsafe {
  988|  6.07k|            if self.spilled() {
  989|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  990|      0|                (ptr, len_ptr, self.capacity)
  991|       |            } else {
  992|  6.07k|                (
  993|  6.07k|                    self.data.inline_mut(),
  994|  6.07k|                    &mut self.capacity,
  995|  6.07k|                    Self::inline_capacity(),
  996|  6.07k|                )
  997|       |            }
  998|       |        }
  999|  6.07k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E11inline_sizeBO_:
  948|  1.01k|    pub fn inline_size(&self) -> usize {
  949|  1.01k|        Self::inline_capacity()
  950|  1.01k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E15inline_capacityBO_:
  928|  14.1k|    fn inline_capacity() -> usize {
  929|  14.1k|        if mem::size_of::<A::Item>() > 0 {
  930|  14.1k|            A::size()
  931|       |        } else {
  932|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  933|       |            // Therefore all items are at the same address,
  934|       |            // and any array size has capacity for infinitely many items.
  935|       |            // The capacity is limited by the bit width of the length field.
  936|       |            //
  937|       |            // `Vec` also does this:
  938|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  939|       |            //
  940|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  941|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  942|      0|            core::usize::MAX
  943|       |        }
  944|  14.1k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E3newBO_:
  781|  1.01k|    pub fn new() -> SmallVec<A> {
  782|  1.01k|        // Try to detect invalid custom implementations of `Array`. Hopefully,
  783|  1.01k|        // this check should be optimized away entirely for valid ones.
  784|  1.01k|        assert!(
  785|  1.01k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  786|  1.01k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  787|       |        );
  788|  1.01k|        SmallVec {
  789|  1.01k|            capacity: 0,
  790|  1.01k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  791|  1.01k|        }
  792|  1.01k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E3popBO_:
 1132|  3.03k|    pub fn pop(&mut self) -> Option<A::Item> {
 1133|  3.03k|        unsafe {
 1134|  3.03k|            let (ptr, len_ptr, _) = self.triple_mut();
 1135|  3.03k|            let ptr: *const _ = ptr.as_ptr();
 1136|  3.03k|            if *len_ptr == 0 {
 1137|  1.01k|                return None;
 1138|  2.02k|            }
 1139|  2.02k|            let last_index = *len_ptr - 1;
 1140|  2.02k|            *len_ptr = last_index;
 1141|  2.02k|            Some(ptr::read(ptr.add(last_index)))
 1142|       |        }
 1143|  3.03k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E4pushBO_:
 1116|  2.02k|    pub fn push(&mut self, value: A::Item) {
 1117|  2.02k|        unsafe {
 1118|  2.02k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1119|  2.02k|            if *len == cap {
 1120|      0|                self.reserve_one_unchecked();
 1121|      0|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1122|      0|                ptr = heap_ptr;
 1123|      0|                len = heap_len;
 1124|  2.02k|            }
 1125|  2.02k|            ptr::write(ptr.as_ptr().add(*len), value);
 1126|  2.02k|            *len += 1;
 1127|  2.02k|        }
 1128|  2.02k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_E7spilledBO_:
 1003|  7.09k|    pub fn spilled(&self) -> bool {
 1004|  7.09k|        self.capacity > Self::inline_capacity()
 1005|  7.09k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E10triple_mutB1l_:
  986|  9.11k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  987|  9.11k|        unsafe {
  988|  9.11k|            if self.spilled() {
  989|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  990|      0|                (ptr, len_ptr, self.capacity)
  991|       |            } else {
  992|  9.11k|                (
  993|  9.11k|                    self.data.inline_mut(),
  994|  9.11k|                    &mut self.capacity,
  995|  9.11k|                    Self::inline_capacity(),
  996|  9.11k|                )
  997|       |            }
  998|       |        }
  999|  9.11k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E11inline_sizeB1l_:
  948|  1.01k|    pub fn inline_size(&self) -> usize {
  949|  1.01k|        Self::inline_capacity()
  950|  1.01k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E11try_reserveB1l_:
 1239|  2.02k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1240|  2.02k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1241|  2.02k|        // calls to it from callers.
 1242|  2.02k|        let (_, &mut len, cap) = self.triple_mut();
 1243|  2.02k|        if cap - len >= additional {
 1244|  2.02k|            return Ok(());
 1245|      0|        }
 1246|      0|        let new_cap = len
 1247|      0|            .checked_add(additional)
 1248|      0|            .and_then(usize::checked_next_power_of_two)
 1249|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1250|      0|        self.try_grow(new_cap)
 1251|  2.02k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E15inline_capacityB1l_:
  928|  52.0k|    fn inline_capacity() -> usize {
  929|  52.0k|        if mem::size_of::<A::Item>() > 0 {
  930|  52.0k|            A::size()
  931|       |        } else {
  932|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  933|       |            // Therefore all items are at the same address,
  934|       |            // and any array size has capacity for infinitely many items.
  935|       |            // The capacity is limited by the bit width of the length field.
  936|       |            //
  937|       |            // `Vec` also does this:
  938|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  939|       |            //
  940|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  941|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  942|      0|            core::usize::MAX
  943|       |        }
  944|  52.0k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E3newB1l_:
  781|  5.06k|    pub fn new() -> SmallVec<A> {
  782|  5.06k|        // Try to detect invalid custom implementations of `Array`. Hopefully,
  783|  5.06k|        // this check should be optimized away entirely for valid ones.
  784|  5.06k|        assert!(
  785|  5.06k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  786|  5.06k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  787|       |        );
  788|  5.06k|        SmallVec {
  789|  5.06k|            capacity: 0,
  790|  5.06k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  791|  5.06k|        }
  792|  5.06k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E6tripleB1l_:
  973|  13.8k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  974|  13.8k|        unsafe {
  975|  13.8k|            if self.spilled() {
  976|      0|                let (ptr, len) = self.data.heap();
  977|      0|                (ptr, len, self.capacity)
  978|       |            } else {
  979|  13.8k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  980|       |            }
  981|       |        }
  982|  13.8k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E7reserveB1l_:
 1221|  2.02k|    pub fn reserve(&mut self, additional: usize) {
 1222|  2.02k|        infallible(self.try_reserve(additional))
 1223|  2.02k|    }
_RNvMsc_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_E7spilledB1l_:
 1003|  28.0k|    pub fn spilled(&self) -> bool {
 1004|  28.0k|        self.capacity > Self::inline_capacity()
 1005|  28.0k|    }
_RNvXsf_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5derefBM_:
 1848|  6.45k|    fn deref(&self) -> &[A::Item] {
 1849|  6.45k|        unsafe {
 1850|  6.45k|            let (ptr, len, _) = self.triple();
 1851|  6.45k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1852|  6.45k|        }
 1853|  6.45k|    }
_RNvXsf_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_ENtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5derefB1l_:
 1848|  13.8k|    fn deref(&self) -> &[A::Item] {
 1849|  13.8k|        unsafe {
 1850|  13.8k|            let (ptr, len, _) = self.triple();
 1851|  13.8k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1852|  13.8k|        }
 1853|  13.8k|    }
_RNvXsg_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutBM_:
 1858|  5.06k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1859|  5.06k|        unsafe {
 1860|  5.06k|            let (ptr, &mut len, _) = self.triple_mut();
 1861|  5.06k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1862|  5.06k|        }
 1863|  5.06k|    }
_RNvXsg_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutBO_:
 1858|    988|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1859|    988|        unsafe {
 1860|    988|            let (ptr, &mut len, _) = self.triple_mut();
 1861|    988|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1862|    988|        }
 1863|    988|    }
_RNvXsg_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutBO_:
 1858|  1.01k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1859|  1.01k|        unsafe {
 1860|  1.01k|            let (ptr, &mut len, _) = self.triple_mut();
 1861|  1.01k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1862|  1.01k|        }
 1863|  1.01k|    }
_RNvXsg_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutB1l_:
 1858|  5.06k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1859|  5.06k|        unsafe {
 1860|  5.06k|            let (ptr, &mut len, _) = self.triple_mut();
 1861|  5.06k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1862|  5.06k|        }
 1863|  5.06k|    }
_RNvXsp_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCshZc3FwCJ069_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutBM_:
 2064|  5.06k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2065|  5.06k|        &mut (&mut **self)[index]
 2066|  5.06k|    }
_RNvXsp_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_EINtNtNtCshZc3FwCJ069_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutBO_:
 2064|    988|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2065|    988|        &mut (&mut **self)[index]
 2066|    988|    }
_RNvXsp_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_EINtNtNtCshZc3FwCJ069_4core3ops5index8IndexMutNtNtB1R_5range9RangeFullE9index_mutBO_:
 2064|  1.01k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2065|  1.01k|        &mut (&mut **self)[index]
 2066|  1.01k|    }
_RNvXsp_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_EINtNtNtCshZc3FwCJ069_4core3ops5index8IndexMutNtNtB2U_5range9RangeFullE9index_mutB1l_:
 2064|  5.06k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2065|  5.06k|        &mut (&mut **self)[index]
 2066|  5.06k|    }
_RNvXsu_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_ENtNtCshZc3FwCJ069_4core7default7Default7defaultBM_:
 2125|  2.02k|    fn default() -> SmallVec<A> {
 2126|  2.02k|        SmallVec::new()
 2127|  2.02k|    }
_RNvXsu_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_ENtNtCshZc3FwCJ069_4core7default7Default7defaultB1l_:
 2125|  2.02k|    fn default() -> SmallVec<A> {
 2126|  2.02k|        SmallVec::new()
 2127|  2.02k|    }
_RNvMsO_CsatVIoWEpIxB_8smallvecNtB5_12SetLenOnDrop3getCs6RNShWQ8XAz_8rsonpath:
 2374|  4.05k|    fn get(&self) -> usize {
 2375|  4.05k|        self.local_len
 2376|  4.05k|    }
_RNvMsO_CsatVIoWEpIxB_8smallvecNtB5_12SetLenOnDrop3newCs6RNShWQ8XAz_8rsonpath:
 2366|  4.05k|    fn new(len: &'a mut usize) -> Self {
 2367|  4.05k|        SetLenOnDrop {
 2368|  4.05k|            local_len: *len,
 2369|  4.05k|            len,
 2370|  4.05k|        }
 2371|  4.05k|    }
_RNvXsX_CsatVIoWEpIxB_8smallvecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB16_9automaton5state5StateEj2_NtB5_5Array4sizeB16_:
 2449|  57.0k|                fn size() -> usize { $size }
_RNvXsX_CsatVIoWEpIxB_8smallvecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeBx_:
 2449|  42.2k|                fn size() -> usize { $size }
_RNvXsP_CsatVIoWEpIxB_8smallvecNtB5_12SetLenOnDropNtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropCs6RNShWQ8XAz_8rsonpath:
 2386|  4.05k|    fn drop(&mut self) {
 2387|  4.05k|        *self.len = self.local_len;
 2388|  4.05k|    }
_RNvXsv_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtCs6RNShWQ8XAz_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropBM_:
 2146|  5.06k|    fn drop(&mut self) {
 2147|  5.06k|        unsafe {
 2148|  5.06k|            if self.spilled() {
 2149|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2150|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2151|  5.06k|            } else {
 2152|  5.06k|                ptr::drop_in_place(&mut self[..]);
 2153|  5.06k|            }
 2154|       |        }
 2155|  5.06k|    }
_RNvXsv_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_ENtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropBO_:
 2146|  1.01k|    fn drop(&mut self) {
 2147|  1.01k|        unsafe {
 2148|  1.01k|            if self.spilled() {
 2149|     25|                let (ptr, &mut len) = self.data.heap_mut();
 2150|     25|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2151|    988|            } else {
 2152|    988|                ptr::drop_in_place(&mut self[..]);
 2153|    988|            }
 2154|       |        }
 2155|  1.01k|    }
_RNvXsv_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropBO_:
 2146|  1.01k|    fn drop(&mut self) {
 2147|  1.01k|        unsafe {
 2148|  1.01k|            if self.spilled() {
 2149|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2150|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2151|  1.01k|            } else {
 2152|  1.01k|                ptr::drop_in_place(&mut self[..]);
 2153|  1.01k|            }
 2154|       |        }
 2155|  1.01k|    }
_RNvXsv_CsatVIoWEpIxB_8smallvecINtB5_8SmallVecATINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton5state5StateEj2_ENtNtNtCshZc3FwCJ069_4core3ops4drop4Drop4dropB1l_:
 2146|  5.06k|    fn drop(&mut self) {
 2147|  5.06k|        unsafe {
 2148|  5.06k|            if self.spilled() {
 2149|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2150|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2151|  5.06k|            } else {
 2152|  5.06k|                ptr::drop_in_place(&mut self[..]);
 2153|  5.06k|            }
 2154|       |        }
 2155|  5.06k|    }
_RNvXsX_CsatVIoWEpIxB_8smallvecANtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBz_:
 2449|  15.1k|                fn size() -> usize { $size }
_RNvXs1v_CsatVIoWEpIxB_8smallvecANtNtNtCs6RNShWQ8XAz_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2449|  35.9k|                fn size() -> usize { $size }

_RINvMCsedMgWpJety3_10vector_mapINtB3_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE3getBG_EBM_:
   87|  1.01k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RINvMCsedMgWpJety3_10vector_mapINtB3_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE8positionBG_EBM_:
   79|  4.05k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  4.05k|        self.keys.iter().position(|k| key == k)
   81|  4.05k|    }
_RINvMCsedMgWpJety3_10vector_mapINtB3_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE12contains_keyBG_EBM_:
   83|  3.03k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|  3.03k|        self.position(key).is_some()
   85|  3.03k|    }
_RINvMCsedMgWpJety3_10vector_mapINtB3_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE3getBG_EBM_:
   87|  4.05k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RINvMCsedMgWpJety3_10vector_mapINtB3_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE8positionBG_EBM_:
   79|  10.1k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  10.1k|        self.keys.iter().position(|k| key == k)
   81|  10.1k|    }
_RNCINvMCsedMgWpJety3_10vector_mapINtB5_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE3getBI_E0BO_:
   87|  1.01k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNCINvMCsedMgWpJety3_10vector_mapINtB5_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE8positionBI_E0BO_:
   80|  5.06k|        self.keys.iter().position(|k| key == k)
_RNCINvMCsedMgWpJety3_10vector_mapINtB5_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateE3getBI_E0BO_:
   87|  4.05k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNCINvMCsedMgWpJety3_10vector_mapINtB5_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateE8positionBI_E0BO_:
   80|  20.2k|        self.keys.iter().position(|k| key == k)
_RNCNCINvMCsedMgWpJety3_10vector_mapINtB7_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBO_3nfa10NfaStateIdE3getBK_E00BQ_:
   90|  1.01k|        self.position(key).map(|p| &self.values[p])
_RNCNCINvMCsedMgWpJety3_10vector_mapINtB7_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBO_5state5StateE3getBK_E00BQ_:
   90|  4.05k|        self.position(key).map(|p| &self.values[p])
_RNCNvMCsedMgWpJety3_10vector_mapINtB4_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1j_9automaton9small_set11SmallSet256E13with_capacity0B1j_:
   49|  2.02k|    #[post(ret.len() == 0)]
_RNCNvMCsedMgWpJety3_10vector_mapINtB4_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1j_9automaton9small_set11SmallSet256E3new0B1j_:
   41|  2.02k|    #[post(ret.len() == 0)]
_RNCNvMCsedMgWpJety3_10vector_mapINtB4_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE13with_capacity0BN_:
   49|  1.01k|    #[post(ret.len() == 0)]
_RNCNvMCsedMgWpJety3_10vector_mapINtB4_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE3new0BN_:
   41|  1.01k|    #[post(ret.len() == 0)]
_RNCNvMCsedMgWpJety3_10vector_mapINtB4_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE6insert0BN_:
   99|  3.03k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCsedMgWpJety3_10vector_mapINtB4_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE13with_capacity0BN_:
   49|  1.01k|    #[post(ret.len() == 0)]
_RNCNvMCsedMgWpJety3_10vector_mapINtB4_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE3new0BN_:
   41|  1.01k|    #[post(ret.len() == 0)]
_RNCNvMCsedMgWpJety3_10vector_mapINtB4_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE6insert0BN_:
   99|  3.03k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1h_9automaton9small_set11SmallSet256E13with_capacityB1h_:
   49|  2.02k|    #[post(ret.len() == 0)]
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1h_9automaton9small_set11SmallSet256E3newB1h_:
   41|  2.02k|    #[post(ret.len() == 0)]
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1h_9automaton9small_set11SmallSet256E8iter_mutB1h_:
  175|  2.02k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  2.02k|        IterMut {
  177|  2.02k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  2.02k|        }
  179|  2.02k|    }
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE13with_capacityBL_:
   49|  1.01k|    #[post(ret.len() == 0)]
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE3newBL_:
   41|  1.01k|    #[post(ret.len() == 0)]
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE6insertBL_:
   99|  3.03k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE13with_capacityBL_:
   49|  1.01k|    #[post(ret.len() == 0)]
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3lenBL_:
   60|  2.02k|    pub fn len(&self) -> usize {
   61|  2.02k|        self.keys.len()
   62|  2.02k|    }
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3newBL_:
   41|  1.01k|    #[post(ret.len() == 0)]
_RNvMCsedMgWpJety3_10vector_mapINtB2_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE6insertBL_:
   99|  3.03k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvXs4_CsedMgWpJety3_10vector_mapINtB5_6VecMapNtNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateEINtNtNtCshZc3FwCJ069_4core3ops5index5IndexRBI_E5indexBO_:
  277|  4.05k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|  4.05k|        self.get(key).unwrap()
  279|  4.05k|    }
_RNvXs7_CsedMgWpJety3_10vector_mapQINtB5_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB1l_:
  299|  2.02k|    fn into_iter(self) -> Self::IntoIter {
  300|  2.02k|        self.iter_mut()
  301|  2.02k|    }
_RNvXs8_CsedMgWpJety3_10vector_mapINtB5_6VecMapINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1k_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB1k_:
  307|  2.02k|    fn into_iter(self) -> Self::IntoIter {
  308|  2.02k|        IntoIter {
  309|  2.02k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  2.02k|        }
  311|  2.02k|    }
_RNvXs9_CsedMgWpJety3_10vector_mapINtB5_8IntoIterINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1m_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB1m_:
  322|  2.02k|    fn next(&mut self) -> Option<(K, V)> {
  323|  2.02k|        self.iter.next()
  324|  2.02k|    }
_RNvXs9_CsedMgWpJety3_10vector_mapINtB5_8IntoIterINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1m_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator9size_hintB1m_:
  326|  2.02k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  2.02k|        self.iter.size_hint()
  328|  2.02k|    }
_RNvXsr_CsedMgWpJety3_10vector_mapINtB5_7IterMutINtNtCs8f6x4lOZV33_5alloc4sync3ArcNtNtCs6RNShWQ8XAz_8rsonpath14string_pattern13StringPatternENtNtNtB1l_9automaton9small_set11SmallSet256ENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB1l_:
  494|  2.02k|            fn next(&mut self) -> Option<Self::Item> {
  495|  2.02k|                self.iter.next()
  496|  2.02k|            }

_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton12is_accepting:
  268|  37.8k|    pub fn is_accepting(&self, state: State) -> bool {
  269|  37.8k|        self[state].attributes.is_accepting()
  270|  37.8k|    }
_RNvXs1_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9AutomatonINtNtNtCshZc3FwCJ069_4core3ops5index5IndexNtNtB5_5state5StateE5index:
  102|   114k|    fn index(&self, index: State) -> &Self::Output {
  103|   114k|        &self.states[index.0 as usize]
  104|   114k|    }
_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton13initial_state:
  251|  2.02k|    pub fn initial_state(&self) -> State {
  252|  2.02k|        State(1)
  253|  2.02k|    }
_RNvMs7_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_10StateTable14fallback_state:
  407|  38.8k|    pub fn fallback_state(&self) -> State {
  408|  38.8k|        self.fallback_state
  409|  38.8k|    }
_RNvMs7_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_10StateTable17array_transitions:
  417|  4.42k|    pub fn array_transitions(&self) -> &[ArrayTransition] {
  418|  4.42k|        &self.array_transitions
  419|  4.42k|    }
_RNvMs7_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_10StateTable18member_transitions:
  427|  11.8k|    pub fn member_transitions(&self) -> &[MemberTransition] {
  428|  11.8k|        &self.member_transitions
  429|  11.8k|    }
_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton10is_unitary:
  391|  2.99k|    pub fn is_unitary(&self, state: State) -> bool {
  392|  2.99k|        self[state].attributes.is_unitary()
  393|  2.99k|    }
_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton12is_rejecting:
  370|  10.4k|    pub fn is_rejecting(&self, state: State) -> bool {
  371|  10.4k|        self[state].attributes.is_rejecting()
  372|  10.4k|    }
_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton14is_empty_query:
  221|  1.01k|    pub fn is_empty_query(&self) -> bool {
  222|  1.01k|        self.states.len() == 2
  223|      0|            && self.states[1].array_transitions.is_empty()
  224|      0|            && self.states[1].member_transitions.is_empty()
  225|      0|            && self.states[1].fallback_state == State(0)
  226|      0|            && !self.states[1].attributes.is_accepting()
  227|  1.01k|    }
_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton20is_select_root_query:
  190|  1.01k|    pub fn is_select_root_query(&self) -> bool {
  191|  1.01k|        self.states.len() == 2
  192|      0|            && self.states[1].array_transitions.is_empty()
  193|      0|            && self.states[1].member_transitions.is_empty()
  194|      0|            && self.states[1].fallback_state == State(0)
  195|      0|            && self.states[1].attributes.is_accepting()
  196|  1.01k|    }
_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton27has_transition_to_accepting:
  353|  7.96k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  354|  7.96k|        self[state].attributes.has_transition_to_accepting()
  355|  7.96k|    }
_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
  164|  1.01k|    pub fn new(query: &JsonPathQuery) -> Result<Self, CompilerError> {
  165|  1.01k|        let nfa = NondeterministicAutomaton::new(query)?;
  166|       |        debug!("NFA: {}", nfa);
  167|  1.01k|        Self::minimize(nfa)
  168|  1.01k|    }
_RNvXNtCs6RNShWQ8XAz_8rsonpath9automatonNtB2_10StateTableNtNtCshZc3FwCJ069_4core7default7Default7defaultB4_:
   69|  2.02k|    fn default() -> Self {
   70|  2.02k|        Self {
   71|  2.02k|            attributes: StateAttributes::default(),
   72|  2.02k|            member_transitions: SmallVec::default(),
   73|  2.02k|            array_transitions: SmallVec::default(),
   74|  2.02k|            fallback_state: State(0),
   75|  2.02k|        }
   76|  2.02k|    }
_RNvMs6_NtCs6RNShWQ8XAz_8rsonpath9automatonNtB5_9Automaton8minimize:
  395|  1.01k|    fn minimize(nfa: NondeterministicAutomaton) -> Result<Self, CompilerError> {
  396|  1.01k|        minimizer::minimize(nfa)
  397|  1.01k|    }

_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet3new:
   80|  2.02k|    pub(super) fn new() -> Self {
   81|  2.02k|        Self {
   82|  2.02k|            transitions: HashMap::new(),
   83|  2.02k|        }
   84|  2.02k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet10states_mut:
  126|  2.02k|    pub(super) fn states_mut(&mut self) -> impl Iterator<Item = &mut SmallSet256> {
  127|  2.02k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
  128|  2.02k|    }
_RNvMs_NtNtCs6RNShWQ8XAz_8rsonpath9automaton20array_transition_setNtB4_26ArrayTransitionSetIterator3new:
  132|  2.02k|    fn new(mut transitions: Vec<(LinearSet, LinearSetTransition)>) -> Self {
  133|  2.02k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
  134|  2.02k|        Self {
  135|  2.02k|            transitions: transitions.into_iter(),
  136|  2.02k|        }
  137|  2.02k|    }
_RNvXs0_NtNtCs6RNShWQ8XAz_8rsonpath9automaton20array_transition_setNtB5_18ArrayTransitionSetNtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iter:
  145|  2.02k|    fn into_iter(self) -> Self::IntoIter {
  146|  2.02k|        ArrayTransitionSetIterator::new(self.transitions.into_iter().collect())
  147|  2.02k|    }
_RNvXs1_NtNtCs6RNShWQ8XAz_8rsonpath9automaton20array_transition_setNtB5_26ArrayTransitionSetIteratorNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  153|  2.02k|    fn next(&mut self) -> Option<Self::Item> {
  154|  2.02k|        let (label, transition) = self.transitions.next()?;
  155|      0|        Some(match label {
  156|      0|            LinearSet::Singleton(idx) => (ArrayTransitionLabel::Index(idx), transition.target),
  157|      0|            LinearSet::BoundedSlice(start, end, step) => (
  158|      0|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, Some(end), step)),
  159|      0|                transition.target,
  160|      0|            ),
  161|      0|            LinearSet::OpenEndedSlice(start, step) => (
  162|      0|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, None, step)),
  163|      0|                transition.target,
  164|      0|            ),
  165|       |        })
  166|  2.02k|    }

_RNCNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0B8_:
  269|  3.03k|            .filter_map(|id| match self.nfa[id] {
  270|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  271|  2.02k|                    Some(id.next().map(|x| x.0))
  272|       |                }
  273|  1.01k|                _ => None,
  274|  3.03k|            })
_RNCNCNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Ba_:
  271|  2.02k|                    Some(id.next().map(|x| x.0))
_RNCNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB4_9Minimizer9normalize0B8_:
  395|  4.05k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNvNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizer8minimize:
   22|  1.01k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   23|  1.01k|    let minimizer = Minimizer {
   24|  1.01k|        nfa,
   25|  1.01k|        superstates: VecMap::new(),
   26|  1.01k|        checkpoints: VecMap::new(),
   27|  1.01k|        active_superstates: smallvec![],
   28|  1.01k|        dfa_states: vec![],
   29|  1.01k|        accepting: SmallSet256::default(),
   30|  1.01k|    };
   31|  1.01k|
   32|  1.01k|    minimizer.run()
   33|  1.01k|}
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer3run:
   85|  1.01k|    fn run(mut self) -> Result<Automaton, CompilerError> {
   86|  1.01k|        // Rejecting state has no outgoing transitions except for a self-loop.
   87|  1.01k|        self.dfa_states.push(StateTable {
   88|  1.01k|            array_transitions: smallvec![],
   89|  1.01k|            member_transitions: smallvec![],
   90|  1.01k|            fallback_state: Self::rejecting_state(),
   91|  1.01k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   92|  1.01k|        });
   93|  1.01k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   94|  1.01k|
   95|  1.01k|        // Initial superstate is {0}.
   96|  1.01k|        let initial_superstate = [0].into();
   97|  1.01k|        self.activate_if_new(initial_superstate)?;
   98|       |
   99|  3.03k|        while let Some(superstate) = self.active_superstates.pop() {
  100|  2.02k|            self.process_superstate(superstate)?;
  101|       |        }
  102|       |
  103|  1.01k|        Ok(Automaton {
  104|  1.01k|            states: self.dfa_states,
  105|  1.01k|        })
  106|  1.01k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer15rejecting_state:
  108|  6.07k|    fn rejecting_state() -> DfaStateId {
  109|  6.07k|        DfaStateId(0)
  110|  6.07k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  114|  3.03k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  115|  3.03k|        if !self.superstates.contains_key(&superstate) {
  116|  2.02k|            let identifier = self
  117|  2.02k|                .superstates
  118|  2.02k|                .len()
  119|  2.02k|                .try_into()
  120|  2.02k|                .map(DfaStateId)
  121|  2.02k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  122|  2.02k|            self.superstates.insert(superstate, identifier);
  123|  2.02k|            self.active_superstates.push(superstate);
  124|  2.02k|            self.dfa_states.push(StateTable::default());
  125|  2.02k|            debug!("New superstate created: {superstate:?} {identifier}");
  126|  2.02k|            if superstate.contains(self.nfa.accepting_state().0) {
  127|  1.01k|                self.accepting.insert(identifier.0);
  128|  1.01k|            }
  129|  1.01k|        }
  130|       |
  131|  3.03k|        Ok(())
  132|  3.03k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer18process_superstate:
  136|  2.02k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  137|  2.02k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  138|       |        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  139|       |
  140|  2.02k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  141|       |        debug!("Raw transitions: {:?}", transitions);
  142|       |
  143|  2.02k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  144|       |        debug!("Normalized transitions: {:?}", transitions);
  145|       |
  146|       |        // Translate the transitions to the data model expected by TransitionTable.
  147|  2.02k|        let array_transitions = transitions
  148|  2.02k|            .array
  149|  2.02k|            .into_iter()
  150|  2.02k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
  151|  2.02k|            .collect::<SmallVec<_>>();
  152|  2.02k|        let member_transitions = transitions
  153|  2.02k|            .member
  154|  2.02k|            .into_iter()
  155|  2.02k|            .map(|(label, state)| (label, self.superstates[&state]))
  156|  2.02k|            .collect::<SmallVec<_>>();
  157|  2.02k|        debug!("Translated transitions (array): {array_transitions:?}");
  158|  2.02k|        debug!("Translated transitions (member): {member_transitions:?}");
  159|  2.02k|
  160|  2.02k|        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  161|  2.02k|        // Otherwise, we set the fallback to the rejecting state.
  162|  2.02k|        let id = self.superstates[&current_superstate];
  163|  2.02k|        let fallback_state = self.superstates[&transitions.wildcard];
  164|  2.02k|        let attributes = self.build_attributes(id, &array_transitions, &member_transitions, fallback_state);
  165|  2.02k|        let table = &mut self.dfa_states[id.0 as usize];
  166|  2.02k|        table.array_transitions = array_transitions;
  167|  2.02k|        table.member_transitions = member_transitions;
  168|  2.02k|        table.fallback_state = fallback_state;
  169|  2.02k|        table.attributes = attributes;
  170|  2.02k|
  171|  2.02k|        Ok(())
  172|  2.02k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer16build_attributes:
  176|  2.02k|    fn build_attributes(
  177|  2.02k|        &self,
  178|  2.02k|        id: DfaStateId,
  179|  2.02k|        array_transitions: &[ArrayTransition],
  180|  2.02k|        member_transitions: &[(Arc<StringPattern>, DfaStateId)],
  181|  2.02k|        fallback: DfaStateId,
  182|  2.02k|    ) -> StateAttributes {
  183|  2.02k|        let mut attrs = StateAttributesBuilder::new();
  184|  2.02k|
  185|  2.02k|        if self.accepting.contains(id.0) {
  186|  1.01k|            debug!("{id} is accepting");
  187|  1.01k|            attrs = attrs.accepting();
  188|  1.01k|        }
  189|  2.02k|        if id == Self::rejecting_state() {
  190|      0|            debug!("{id} is rejecting");
  191|      0|            attrs = attrs.rejecting();
  192|  2.02k|        }
  193|       |
  194|  2.02k|        if self.accepting.contains(fallback.0)
  195|      0|            || array_transitions
  196|      0|                .iter()
  197|      0|                .any(|x| self.accepting.contains(x.target_state().0))
  198|      0|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
  199|  2.02k|        {
  200|  2.02k|            debug!("{id} has transitions to accepting");
  201|  2.02k|            attrs = attrs.transitions_to_accepting();
  202|  2.02k|        }
  203|  2.02k|        if !array_transitions.is_empty() {
  204|      0|            debug!("{id} has an array index transition");
  205|      0|            attrs = attrs.has_array_transition();
  206|  2.02k|        }
  207|  2.02k|        if array_transitions
  208|  2.02k|            .iter()
  209|  2.02k|            .any(|x| self.accepting.contains(x.target_state().0))
  210|      0|        {
  211|      0|            debug!("{id} has an accepting array index transition");
  212|      0|            attrs = attrs.has_array_transition_to_accepting();
  213|  2.02k|        }
  214|       |
  215|       |        // Unitarity check:
  216|       |        // 1. Fallback rejects.
  217|       |        // 2. Only one transition that can match at most one element in a JSON, either:
  218|       |        //   a) member transition; or
  219|       |        //   b) array transition that matches only one index.
  220|  2.02k|        let is_unitary = {
  221|  2.02k|            fallback == Self::rejecting_state()
  222|      0|                && ((member_transitions.len() == 1 && array_transitions.is_empty())
  223|      0|                    || (array_transitions.len() == 1
  224|      0|                        && member_transitions.is_empty()
  225|      0|                        && array_transitions[0].label.matches_at_most_once()))
  226|       |        };
  227|  2.02k|        if is_unitary {
  228|      0|            debug!("{id} is unitary");
  229|      0|            attrs = attrs.unitary();
  230|  2.02k|        }
  231|       |
  232|  2.02k|        attrs.into()
  233|  2.02k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  238|  2.02k|    fn determine_checkpoint(&mut self, superstate: SmallSet256) -> Option<NfaStateId> {
  239|  2.02k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  240|  1.01k|            self.checkpoints.insert(superstate, nfa_state);
  241|  1.01k|            Some(nfa_state)
  242|       |        } else {
  243|  1.01k|            self.checkpoints.get(&superstate).copied()
  244|       |        }
  245|  2.02k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  249|  2.02k|    fn as_checkpoint(&self, superstate: SmallSet256) -> Option<NfaStateId> {
  250|  2.02k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  251|  1.01k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  252|  1.01k|                return Some(single_state);
  253|      0|            }
  254|  1.01k|        }
  255|       |
  256|  1.01k|        None
  257|  2.02k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  261|  2.02k|    fn process_nfa_transitions(
  262|  2.02k|        &self,
  263|  2.02k|        current_superstate: SmallSet256,
  264|  2.02k|        current_checkpoint: Option<NfaStateId>,
  265|  2.02k|    ) -> Result<SuperstateTransitionTable, CompilerError> {
  266|  2.02k|        let mut wildcard_targets = current_superstate
  267|  2.02k|            .iter()
  268|  2.02k|            .map(NfaStateId)
  269|  2.02k|            .filter_map(|id| match self.nfa[id] {
  270|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  271|       |                    Some(id.next().map(|x| x.0))
  272|       |                }
  273|       |                _ => None,
  274|  2.02k|            })
  275|  2.02k|            .collect::<Result<SmallSet256, _>>()?;
  276|  2.02k|        if let Some(checkpoint) = current_checkpoint {
  277|  2.02k|            wildcard_targets.insert(checkpoint.0);
  278|  2.02k|        }
  279|       |
  280|       |        debug!("Wildcard target: {wildcard_targets:?}");
  281|       |
  282|  2.02k|        let mut transitions = SuperstateTransitionTable {
  283|  2.02k|            array: ArrayTransitionSet::new(),
  284|  2.02k|            member: VecMap::new(),
  285|  2.02k|            wildcard: wildcard_targets,
  286|  2.02k|        };
  287|       |
  288|  3.03k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  289|  3.03k|            match &self.nfa[nfa_state] {
  290|       |                // Direct states simply have a single transition to the next state in the NFA.
  291|       |                // Recursive transitions also have a self-loop, but that is handled by the
  292|       |                // checkpoints mechanism - here we only handle the forward transition.
  293|      0|                NfaState::Direct(nfa::Transition::Member(label))
  294|      0|                | NfaState::Recursive(nfa::Transition::Member(label)) => {
  295|       |                    debug!(
  296|       |                        "Considering member transition {nfa_state} --{}-> {}",
  297|       |                        std::str::from_utf8(label.unquoted()).unwrap_or("[invalid utf8]"),
  298|       |                        nfa_state.next()?,
  299|       |                    );
  300|       |                    // Add the target NFA state to the target superstate, or create a singleton
  301|       |                    // set if this is the first transition via this label encountered in the loop.
  302|      0|                    if let Some(target) = transitions.member.get_mut(label) {
  303|      0|                        target.insert(nfa_state.next()?.0);
  304|       |                    } else {
  305|      0|                        let mut new_set = transitions.wildcard;
  306|      0|                        new_set.insert(nfa_state.next()?.0);
  307|      0|                        transitions.member.insert(label.clone(), new_set);
  308|       |                    }
  309|       |                }
  310|      0|                NfaState::Direct(nfa::Transition::Array(label))
  311|      0|                | NfaState::Recursive(nfa::Transition::Array(label)) => {
  312|       |                    // Array transitions are trickier, as they can have overlap. For example,
  313|       |                    // a transition over [5] overlaps with a transition over [3::2].
  314|       |                    // If the incoming transition does not overlap with anything then it's easy and analogous
  315|       |                    // to the member case - create a new singleton set with a single transition.
  316|       |                    // Otherwise we need to solve conflicts with - potentially many! - existing transitions.
  317|       |                    // Fortunately, the conflicts can be resolved one at a time.
  318|       |                    // Assume we're processing --t1--> {s1} and there already is a --t2-->S2 (where S2 is a superstate),
  319|       |                    // such that t1 overlaps with t2 (overlap(t1, t2) = t3).
  320|       |                    // The resolution is to have the following transitions:
  321|       |                    //   --t3--> S2+{s1}
  322|       |                    //   --(t1-t3)--> {s1}
  323|       |                    //   --(t2-t3)--> S2
  324|       |                    // If t1 and t2 are slices then t3 is easy to compute and is also a slice.
  325|       |                    // This is not the case for (t1-t3) or (t2-t3). Turns out this is actually a hard problem to solve.
  326|       |                    // We can do away with a trick, however. As long as the engine always processes transitions in order
  327|       |                    // and takes the first one that matches, it is enough for the procedure here to emit
  328|       |                    //   --t3--> S2+{s1}
  329|       |                    //   --t1--> {s1}
  330|       |                    //   --t2--> S2
  331|       |                    // and make sure the transition over t3 is put before the other two.
  332|       |                    // The ArrayTransitionTable does that by assigning priorities to transitions and sorting them accordingly.
  333|       |                    debug!(
  334|       |                        "Considering array transition {nfa_state} --{}-> {}",
  335|       |                        label,
  336|       |                        nfa_state.next()?,
  337|       |                    );
  338|      0|                    let mut new_set = transitions.wildcard;
  339|      0|                    new_set.insert(nfa_state.next()?.0);
  340|      0|                    transitions.array.add_transition(*label, new_set);
  341|       |                }
  342|       |                NfaState::Direct(nfa::Transition::Wildcard)
  343|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  344|  3.03k|                | NfaState::Accepting => (),
  345|       |            }
  346|       |        }
  347|       |
  348|  2.02k|        Ok(transitions)
  349|  2.02k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  353|  2.02k|    fn normalize_superstate_transitions(
  354|  2.02k|        &mut self,
  355|  2.02k|        transitions: &mut SuperstateTransitionTable,
  356|  2.02k|        current_checkpoint: Option<NfaStateId>,
  357|  2.02k|    ) -> Result<(), CompilerError> {
  358|       |        fn normalize_one(
  359|       |            this: &mut Minimizer,
  360|       |            state: &mut SmallSet256,
  361|       |            current_checkpoint: Option<NfaStateId>,
  362|       |        ) -> Result<(), CompilerError> {
  363|       |            if let Some(checkpoint) = current_checkpoint {
  364|       |                state.insert(checkpoint.0);
  365|       |            }
  366|       |
  367|       |            this.normalize(state);
  368|       |            this.activate_if_new(*state)?;
  369|       |
  370|       |            if let Some(checkpoint) = current_checkpoint {
  371|       |                this.checkpoints.insert(*state, checkpoint);
  372|       |            }
  373|       |
  374|       |            Ok(())
  375|       |        }
  376|       |
  377|  2.02k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  378|  2.02k|        for (_, state) in &mut transitions.member {
  379|      0|            normalize_one(self, state, current_checkpoint)?;
  380|       |        }
  381|  2.02k|        for state in &mut transitions.array.states_mut() {
  382|      0|            normalize_one(self, state, current_checkpoint)?;
  383|       |        }
  384|       |
  385|  2.02k|        Ok(())
  386|  2.02k|    }
_RNvNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  358|  2.02k|        fn normalize_one(
  359|  2.02k|            this: &mut Minimizer,
  360|  2.02k|            state: &mut SmallSet256,
  361|  2.02k|            current_checkpoint: Option<NfaStateId>,
  362|  2.02k|        ) -> Result<(), CompilerError> {
  363|  2.02k|            if let Some(checkpoint) = current_checkpoint {
  364|  2.02k|                state.insert(checkpoint.0);
  365|  2.02k|            }
  366|       |
  367|  2.02k|            this.normalize(state);
  368|  2.02k|            this.activate_if_new(*state)?;
  369|       |
  370|  2.02k|            if let Some(checkpoint) = current_checkpoint {
  371|  2.02k|                this.checkpoints.insert(*state, checkpoint);
  372|  2.02k|            }
  373|       |
  374|  2.02k|            Ok(())
  375|  2.02k|        }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton9minimizerNtB2_9Minimizer9normalize:
  391|  2.02k|    fn normalize(&self, superstate: &mut SmallSet256) {
  392|  2.02k|        let furthest_checkpoint = superstate
  393|  2.02k|            .iter()
  394|  2.02k|            .map(NfaStateId)
  395|  2.02k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  396|  2.02k|            .max();
  397|       |
  398|  2.02k|        if let Some(cutoff) = furthest_checkpoint {
  399|  2.02k|            superstate.remove_all_before(cutoff.0);
  400|  2.02k|        }
  401|  2.02k|    }

_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton3nfaNtB2_10NfaStateId4next:
   53|  2.02k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   54|  2.02k|        self.0
   55|  2.02k|            .checked_add(1)
   56|  2.02k|            .ok_or(CompilerError::QueryTooComplex(None))
   57|  2.02k|            .map(Self)
   58|  2.02k|    }
_RNvMs_NtNtCs6RNShWQ8XAz_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   70|  1.01k|    pub(super) fn new<'q>(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   71|       |        use rsonpath_syntax::{Index, Selector};
   72|       |        use std::collections::hash_map::Entry;
   73|       |
   74|  1.01k|        let mut string_pattern_cache: HashMap<&'q JsonString, Arc<StringPattern>> = HashMap::new();
   75|  1.01k|
   76|  1.01k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   77|  1.01k|            .segments()
   78|  1.01k|            .iter()
   79|  1.01k|            .map(|segment| {
   80|       |                let selectors = segment.selectors();
   81|       |
   82|       |                if selectors.len() > 1 {
   83|       |                    Err(UnsupportedFeatureError::multiple_selectors().into())
   84|       |                } else {
   85|       |                    let transition = match selectors.first() {
   86|       |                        Selector::Name(name) => {
   87|       |                            let pattern = match string_pattern_cache.entry(name) {
   88|       |                                Entry::Occupied(pat) => pat.get().clone(),
   89|       |                                Entry::Vacant(entry) => {
   90|       |                                    let pat = Arc::new(StringPattern::new(name));
   91|       |                                    entry.insert(pat.clone());
   92|       |                                    pat
   93|       |                                }
   94|       |                            };
   95|       |                            Ok::<_, CompilerError>(Transition::Member(pattern))
   96|       |                        }
   97|       |                        Selector::Wildcard => Ok(Transition::Wildcard),
   98|       |                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   99|       |                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  100|       |                        Selector::Slice(slice) => {
  101|       |                            let start = match slice.start() {
  102|       |                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
  103|       |                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  104|       |                            }?;
  105|       |                            let end = match slice.end() {
  106|       |                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
  107|       |                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  108|       |                                None => Ok(None),
  109|       |                            }?;
  110|       |                            let step = match slice.step() {
  111|       |                                Step::Forward(step) => Ok::<_, CompilerError>(step),
  112|       |                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  113|       |                            }?;
  114|       |                            let simple_slice = SimpleSlice::new(start, end, step);
  115|       |                            Ok(Transition::Array(simple_slice.into()))
  116|       |                        }
  117|       |                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  118|       |                    }?;
  119|       |                    if segment.is_child() {
  120|       |                        Ok(Direct(transition))
  121|       |                    } else {
  122|       |                        Ok(Recursive(transition))
  123|       |                    }
  124|       |                }
  125|  1.01k|            })
  126|  1.01k|            .collect();
  127|  1.01k|        let mut states = states_result?;
  128|       |
  129|  1.01k|        states.push(Accepting);
  130|  1.01k|
  131|  1.01k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
  132|  1.01k|        if let Err(err) = accepting_state {
  133|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
  134|       |        } else {
  135|  1.01k|            Ok(Self { ordered_states: states })
  136|       |        }
  137|  1.01k|    }
_RNvMs_NtNtCs6RNShWQ8XAz_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
  139|  2.02k|    pub(super) fn accepting_state(&self) -> NfaStateId {
  140|  2.02k|        // CAST: safe because of the check in `new`.
  141|  2.02k|        NfaStateId((self.ordered_states.len() - 1) as u8)
  142|  2.02k|    }
_RNvXs0_NtNtCs6RNShWQ8XAz_8rsonpath9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCshZc3FwCJ069_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  148|  11.1k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  149|  11.1k|        &self.ordered_states[index.0 as usize]
  150|  11.1k|    }
_RNCNvMs_NtNtCs6RNShWQ8XAz_8rsonpath9automaton3nfaNtB6_25NondeterministicAutomaton3new0Ba_:
   79|  1.01k|            .map(|segment| {
   80|  1.01k|                let selectors = segment.selectors();
   81|  1.01k|
   82|  1.01k|                if selectors.len() > 1 {
   83|      0|                    Err(UnsupportedFeatureError::multiple_selectors().into())
   84|       |                } else {
   85|  1.01k|                    let transition = match selectors.first() {
   86|      0|                        Selector::Name(name) => {
   87|      0|                            let pattern = match string_pattern_cache.entry(name) {
   88|      0|                                Entry::Occupied(pat) => pat.get().clone(),
   89|      0|                                Entry::Vacant(entry) => {
   90|      0|                                    let pat = Arc::new(StringPattern::new(name));
   91|      0|                                    entry.insert(pat.clone());
   92|      0|                                    pat
   93|       |                                }
   94|       |                            };
   95|      0|                            Ok::<_, CompilerError>(Transition::Member(pattern))
   96|       |                        }
   97|  1.01k|                        Selector::Wildcard => Ok(Transition::Wildcard),
   98|      0|                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   99|      0|                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  100|      0|                        Selector::Slice(slice) => {
  101|      0|                            let start = match slice.start() {
  102|      0|                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
  103|      0|                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  104|      0|                            }?;
  105|      0|                            let end = match slice.end() {
  106|      0|                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
  107|      0|                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
  108|      0|                                None => Ok(None),
  109|      0|                            }?;
  110|      0|                            let step = match slice.step() {
  111|      0|                                Step::Forward(step) => Ok::<_, CompilerError>(step),
  112|      0|                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  113|      0|                            }?;
  114|      0|                            let simple_slice = SimpleSlice::new(start, end, step);
  115|      0|                            Ok(Transition::Array(simple_slice.into()))
  116|       |                        }
  117|      0|                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  118|      0|                    }?;
  119|  1.01k|                    if segment.is_child() {
  120|      0|                        Ok(Direct(transition))
  121|       |                    } else {
  122|  1.01k|                        Ok(Recursive(transition))
  123|       |                    }
  124|       |                }
  125|  1.01k|            })

_RNvXs_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB4_11SmallSet256INtNtCshZc3FwCJ069_4core7convert4FromAhj1_E4fromB8_:
  200|  1.01k|    fn from(arr: [u8; N]) -> Self {
  201|  1.01k|        Self::from_iter(arr)
  202|  1.01k|    }
_RINvXs4_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBa_:
  234|  1.01k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  235|  1.01k|        let mut result = Self::default();
  236|  2.02k|        for elem in iter {
  237|  1.01k|            result.insert(elem);
  238|  1.01k|        }
  239|  1.01k|        result
  240|  1.01k|    }
_RINvXs4_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1g_8adapters12GenericShuntINtNtB2o_10filter_map9FilterMapINtNtB2o_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4v_9Minimizer23process_nfa_transitions0EINtNtB1i_6result6ResultNtNtB1i_7convert10InfallibleNtNtB8_5error13CompilerErrorEEEBa_:
  234|  2.02k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  235|  2.02k|        let mut result = Self::default();
  236|  4.05k|        for elem in iter {
  237|  2.02k|            result.insert(elem);
  238|  2.02k|        }
  239|  2.02k|        result
  240|  2.02k|    }
_RNCNvXs6_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Bb_:
  259|  6.07k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   55|  8.10k|    fn insert(&mut self, elem: u8) {
   56|  8.10k|        if elem < 128 {
   57|  8.10k|            self.half_1.insert(elem)
   58|       |        } else {
   59|      0|            self.half_2.insert(elem - 128)
   60|       |        }
   61|  8.10k|    }
_RNvXNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   68|  6.07k|    fn contains(&self, elem: u8) -> bool {
   69|  6.07k|        if elem < 128 {
   70|  6.07k|            self.half_1.contains(elem)
   71|       |        } else {
   72|      0|            self.half_2.contains(elem - 128)
   73|       |        }
   74|  6.07k|    }
_RNvXNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iter:
   76|  6.07k|    fn iter(&self) -> SmallSet256Iter {
   77|  6.07k|        SmallSet256Iter {
   78|  6.07k|            half_1: self.half_1.iter(),
   79|  6.07k|            half_2: self.half_2.iter(),
   80|  6.07k|        }
   81|  6.07k|    }
_RNvXNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   83|  2.02k|    fn singleton(&self) -> Option<u8> {
   84|  2.02k|        if self.half_1.is_empty() {
   85|      0|            self.half_2.singleton().map(|x| x + 128)
   86|  2.02k|        } else if self.half_2.is_empty() {
   87|  2.02k|            self.half_1.singleton()
   88|       |        } else {
   89|      0|            None
   90|       |        }
   91|  2.02k|    }
_RNvXNtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   98|  2.02k|    fn remove_all_before(&mut self, cutoff: u8) {
   99|  2.02k|        if cutoff < 128 {
  100|  2.02k|            self.half_1.remove_all_before(cutoff)
  101|      0|        } else {
  102|      0|            self.half_1.clear();
  103|      0|            self.half_2.remove_all_before(cutoff - 128);
  104|      0|        }
  105|  2.02k|    }
_RNvXs6_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  258|  16.2k|    fn next(&mut self) -> Option<Self::Item> {
  259|  16.2k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  260|  16.2k|    }
_RNvXsd_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8is_empty:
  124|  4.05k|            fn is_empty(&self) -> bool {
  125|  4.05k|                self.bitmask == 0
  126|  4.05k|            }
_RNvXsd_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE6insert:
  128|  8.10k|            fn insert(&mut self, elem: u8) {
  129|  8.10k|                self.bitmask |= 1 << elem;
  130|  8.10k|            }
_RNvXsd_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8contains:
  136|  6.07k|            fn contains(&self, elem: u8) -> bool {
  137|  6.07k|                (self.bitmask & (1 << elem)) != 0
  138|  6.07k|            }
_RNvXsd_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE4iter:
  140|  12.1k|            fn iter(&self) -> $iter {
  141|  12.1k|                $iter {
  142|  12.1k|                    bitmask: self.bitmask,
  143|  12.1k|                }
  144|  12.1k|            }
_RNvXsd_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE9singleton:
  146|  2.02k|            fn singleton(&self) -> Option<u8> {
  147|  2.02k|                let elem = self.bitmask.trailing_zeros();
  148|  2.02k|                let elem_mask = (1 as $mask).wrapping_shl(elem);
  149|  2.02k|                let remainder = self.bitmask ^ elem_mask;
  150|  2.02k|
  151|  2.02k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  152|  2.02k|                (remainder == 0).then_some(elem as u8)
  153|  2.02k|            }
_RNvXsd_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE17remove_all_before:
  159|  2.02k|            fn remove_all_before(&mut self, cutoff: u8) {
  160|  2.02k|                let mask: $mask = <$mask>::MAX << cutoff;
  161|  2.02k|                self.bitmask &= mask;
  162|  2.02k|            }
_RNvXsf_NtNtCs6RNShWQ8XAz_8rsonpath9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  177|  22.2k|            fn next(&mut self) -> Option<Self::Item> {
  178|  22.2k|                let next_elem = self.bitmask.trailing_zeros();
  179|  22.2k|
  180|  22.2k|                if next_elem == $size {
  181|  12.1k|                    return None;
  182|  10.1k|                }
  183|  10.1k|
  184|  10.1k|                let elem_mask = 1 << next_elem;
  185|  10.1k|                self.bitmask ^= elem_mask;
  186|  10.1k|
  187|  10.1k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  188|  10.1k|                Some(next_elem as u8)
  189|  22.2k|            }

_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB5_15StateAttributes12is_accepting:
  119|  37.8k|    pub fn is_accepting(&self) -> bool {
  120|  37.8k|        self.is_set(StateAttribute::Accepting)
  121|  37.8k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB5_15StateAttributes6is_set:
  165|  59.3k|    fn is_set(&self, attr: StateAttribute) -> bool {
  166|  59.3k|        (self.0 & attr as u8) != 0
  167|  59.3k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB5_15StateAttributes10is_unitary:
  144|  2.99k|    pub fn is_unitary(&self) -> bool {
  145|  2.99k|        self.is_set(StateAttribute::Unitary)
  146|  2.99k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB5_15StateAttributes12is_rejecting:
  127|  10.4k|    pub fn is_rejecting(&self) -> bool {
  128|  10.4k|        self.is_set(StateAttribute::Rejecting)
  129|  10.4k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  135|  7.96k|    pub fn has_transition_to_accepting(&self) -> bool {
  136|  7.96k|        self.is_set(StateAttribute::TransitionsToAccepting)
  137|  7.96k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3new:
   38|  3.03k|    pub(crate) fn new() -> Self {
   39|  3.03k|        Self {
   40|  3.03k|            attrs: StateAttributes(0),
   41|  3.03k|        }
   42|  3.03k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9accepting:
   44|  1.01k|    pub(crate) fn accepting(self) -> Self {
   45|  1.01k|        self.set(StateAttribute::Accepting)
   46|  1.01k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9rejecting:
   48|  1.01k|    pub(crate) fn rejecting(self) -> Self {
   49|  1.01k|        self.set(StateAttribute::Rejecting)
   50|  1.01k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_accepting:
   56|  2.02k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   57|  2.02k|        self.set(StateAttribute::TransitionsToAccepting)
   58|  2.02k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder5build:
   68|  3.03k|    pub(crate) fn build(self) -> StateAttributes {
   69|  3.03k|        self.attrs
   70|  3.03k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3set:
   72|  4.05k|    fn set(self, attr: StateAttribute) -> Self {
   73|  4.05k|        Self {
   74|  4.05k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   75|  4.05k|        }
   76|  4.05k|    }
_RNvXs_NtNtCs6RNShWQ8XAz_8rsonpath9automaton5stateNtB4_15StateAttributesINtNtCshZc3FwCJ069_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   81|  3.03k|    fn from(value: StateAttributesBuilder) -> Self {
   82|  3.03k|        value.build()
   83|  3.03k|    }

_RNvNtNtNtCs6RNShWQ8XAz_8rsonpath14classification4mask3m6410combine_32:
   52|  16.9k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  16.9k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  16.9k|    }

_RINvMNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECse4uPzH624PE_20fuzz_arbitrary_bytes:
   22|  4.58k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   23|  4.58k|        block!(blocks[..64]);
   24|  4.58k|
   25|  4.58k|        let (block1, block2) = blocks.halves();
   26|  4.58k|        let classification1 = vector_256::classify_block(block1);
   27|  4.58k|        let classification2 = vector_256::classify_block(block2);
   28|  4.58k|
   29|  4.58k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   30|  4.58k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   31|  4.58k|
   32|  4.58k|        self.internal_classifier.classify(slashes, quotes)
   33|  4.58k|    }
_RNvMNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3new:
   15|  1.01k|    fn new() -> Self {
   16|  1.01k|        Self {
   17|  1.01k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   18|  1.01k|        }
   19|  1.01k|    }

_RNvXs1_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E10get_offsetCse4uPzH624PE_20fuzz_arbitrary_bytes:
  103|  27.2k|            fn get_offset(&self) -> usize {
  104|  27.2k|                self.iter.get_offset() - $size
  105|  27.2k|            }
_RNvXs0_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EENtBb_16FallibleIterator4nextCse4uPzH624PE_20fuzz_arbitrary_bytes:
   82|  5.33k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   83|  5.33k|                match self.iter.next().e()? {
   84|  4.58k|                    Some(block) => {
   85|  4.58k|                        // SAFETY: target_feature invariant
   86|  4.58k|                        let mask = unsafe { self.classifier.classify(&block) };
   87|  4.58k|                        let classified_block = QuoteClassifiedBlock {
   88|  4.58k|                            block,
   89|  4.58k|                            within_quotes_mask: mask,
   90|  4.58k|                        };
   91|  4.58k|                        Ok(Some(classified_block))
   92|       |                    }
   93|    750|                    None => Ok(None),
   94|       |                }
   95|  5.33k|            }
_RINvXs_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1L_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3d_5MatchEEKj40_EECse4uPzH624PE_20fuzz_arbitrary_bytes:
   23|  1.01k|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   24|  1.01k|            where
   25|  1.01k|                I: InputBlockIterator<'i, $size>,
   26|  1.01k|            {
   27|  1.01k|                Self::Classifier {
   28|  1.01k|                    iter,
   29|  1.01k|                    classifier: $core::new(),
   30|  1.01k|                    phantom: PhantomData,
   31|  1.01k|                }
   32|  1.01k|            }

_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared7mask_6411all_ones128:
   13|  4.58k|unsafe fn all_ones128() -> __m128i {
   14|  4.58k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  4.58k|}
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3new:
   26|  1.01k|    pub(crate) fn new() -> Self {
   27|  1.01k|        Self { prev_block_mask: 0 }
   28|  1.01k|    }
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_mask:
   31|  4.58k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  4.58k|        let slash_mask = u8::from(set_slash_mask);
   33|  4.58k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  4.58k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  4.58k|    }
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_mask:
   44|  4.66k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  4.66k|        u64::from(self.prev_block_mask & 0x01)
   46|  4.66k|    }
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_mask:
   49|  4.58k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  4.58k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  4.58k|    }
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  4.58k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  4.58k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  4.50k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|     77|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|     77|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|     77|            let odd_starts = ODD & starts;
   62|     77|            let even_starts = EVEN & starts;
   63|     77|
   64|     77|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|     77|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|     77|
   67|     77|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|     77|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|     77|
   70|     77|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|     77|
   72|     77|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  4.58k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  4.58k|
   77|  4.58k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  4.58k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  4.58k|
   80|  4.58k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  4.58k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|  4.58k|
   83|  4.58k|        bin_u64!("slashes", slashes);
   84|  4.58k|        bin_u64!("quotes", quotes);
   85|  4.58k|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|  4.58k|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|  4.58k|        bin_u64!("escaped", escaped);
   88|  4.58k|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|  4.58k|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|  4.58k|        bin_u64!("within_quotes", within_quotes);
   91|  4.58k|
   92|  4.58k|        within_quotes
   93|  4.58k|    }

_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  9.16k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  9.16k|    _mm256_set1_epi8(b'"' as i8)
    9|  9.16k|}
_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  9.16k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  9.16k|    _mm256_set1_epi8(b'\\' as i8)
   14|  9.16k|}
_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  9.16k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  9.16k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  9.16k|
   20|  9.16k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  9.16k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  9.16k|
   23|  9.16k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  9.16k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  9.16k|
   26|  9.16k|    BlockClassification256 { slashes, quotes }
   27|  9.16k|}

_RNvNtNtCs6RNShWQ8XAz_8rsonpath14classification4simd9configureCse4uPzH624PE_20fuzz_arbitrary_bytes:
  537|  1.01k|pub(crate) fn configure() -> SimdConfiguration {
  538|  1.01k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  539|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  540|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  541|  1.01k|    }
  542|       |
  543|       |    cfg_if! {
  544|       |        if #[cfg(not(feature = "simd"))]
  545|       |        {
  546|       |            let highest_simd = SimdTag::Nosimd;
  547|       |            let fast_quotes = false;
  548|       |            let fast_popcnt = false;
  549|       |        }
  550|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  551|       |        {
  552|  1.01k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  553|  1.01k|                SimdTag::Avx2
  554|      0|            } else if is_x86_feature_detected!("ssse3") {
  555|      0|                SimdTag::Ssse3
  556|      0|            } else if is_x86_feature_detected!("sse2") {
  557|      0|                SimdTag::Sse2
  558|       |            } else {
  559|      0|                SimdTag::Nosimd
  560|       |            };
  561|       |
  562|  1.01k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  563|  1.01k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  564|       |        }
  565|       |        else
  566|       |        {
  567|       |            let highest_simd = SimdTag::Nosimd;
  568|       |            let fast_quotes = false;
  569|       |            let fast_popcnt = false;
  570|       |        }
  571|       |    }
  572|       |
  573|  1.01k|    SimdConfiguration {
  574|  1.01k|        highest_simd,
  575|  1.01k|        fast_quotes,
  576|  1.01k|        fast_popcnt,
  577|  1.01k|    }
  578|  1.01k|}
_RNvXs1_NtNtCs6RNShWQ8XAz_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCse4uPzH624PE_20fuzz_arbitrary_bytes:
  370|  1.01k|    fn dispatch_tag(self) -> usize {
  371|  1.01k|        TARGET
  372|  1.01k|    }
_RNvMs0_NtNtCs6RNShWQ8XAz_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
  334|  1.01k|    pub(crate) fn new() -> Self {
  335|  1.01k|        Self { phantom: PhantomData }
  336|  1.01k|    }
_RINvXs1_NtNtCs6RNShWQ8XAz_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4p_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5R_5MatchEEKj40_EECse4uPzH624PE_20fuzz_arbitrary_bytes:
  375|  1.01k|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  376|  1.01k|    where
  377|  1.01k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  378|  1.01k|    {
  379|  1.01k|        Q::new(iter)
  380|  1.01k|    }
_RINvXs1_NtNtCs6RNShWQ8XAz_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4u_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5W_5MatchEEKj40_EECse4uPzH624PE_20fuzz_arbitrary_bytes:
  395|  1.01k|    fn classify_structural_characters<'i, I>(
  396|  1.01k|        self,
  397|  1.01k|        iter: Self::QuotesClassifier<'i, I>,
  398|  1.01k|    ) -> Self::StructuralClassifier<'i, I>
  399|  1.01k|    where
  400|  1.01k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  401|  1.01k|    {
  402|  1.01k|        S::new(iter)
  403|  1.01k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simd:
  475|  1.01k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  476|  1.01k|        self.highest_simd
  477|  1.01k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotes:
  479|  1.01k|    pub(crate) fn fast_quotes(&self) -> bool {
  480|  1.01k|        self.fast_quotes
  481|  1.01k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcnt:
  483|  1.01k|    pub(crate) fn fast_popcnt(&self) -> bool {
  484|  1.01k|        self.fast_popcnt
  485|  1.01k|    }

_RNvMNtNtCs6RNShWQ8XAz_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|  27.1k|    pub fn offset(self, amount: usize) -> Self {
   70|  27.1k|        match self {
   71|  3.02k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  4.44k|            Colon(idx) => Colon(idx + amount),
   73|  11.4k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  8.24k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|  27.1k|    }

_RINvMNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECse4uPzH624PE_20fuzz_arbitrary_bytes:
   28|  7.76k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   29|  7.76k|        &mut self,
   30|  7.76k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   31|  7.76k|    ) -> mask_64::StructuralsBlock<B> {
   32|  7.76k|        let (block1, block2) = quote_classified_block.block.halves();
   33|  7.76k|        let classification1 = self.internal_classifier.classify_block(block1);
   34|  7.76k|        let classification2 = self.internal_classifier.classify_block(block2);
   35|  7.76k|
   36|  7.76k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   37|  7.76k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   38|  7.76k|
   39|  7.76k|        bin_u64!("structural", structural);
   40|  7.76k|        bin_u64!("nonquoted_structural", nonquoted_structural);
   41|  7.76k|
   42|  7.76k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   43|  7.76k|    }
_RNvMNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   20|  1.01k|    fn new() -> Self {
   21|  1.01k|        Self {
   22|  1.01k|            // SAFETY: target feature invariant
   23|  1.01k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   24|  1.01k|        }
   25|  1.01k|    }

_RINvXs_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1U_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB3m_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECse4uPzH624PE_20fuzz_arbitrary_bytes:
   24|  1.01k|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   25|  1.01k|            where
   26|  1.01k|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   27|  1.01k|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   28|  1.01k|            {
   29|  1.01k|                Self::Classifier {
   30|  1.01k|                    iter,
   31|  1.01k|                    classifier: $core::new(),
   32|  1.01k|                    block: None,
   33|  1.01k|                    are_commas_on: false,
   34|  1.01k|                    are_colons_on: false,
   35|  1.01k|                }
   36|  1.01k|            }
_RNCNCNvXs1_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1F_7padding19TwoSidesPaddedInputINtNtNtBf_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB37_5MatchEEKj40_EINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00Cse4uPzH624PE_20fuzz_arbitrary_bytes:
  106|  27.1k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
_RNCNvXs1_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EENtBd_16FallibleIterator4next0Cse4uPzH624PE_20fuzz_arbitrary_bytes:
  106|  27.1k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
_RNvMs0_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCse4uPzH624PE_20fuzz_arbitrary_bytes:
   59|  3.28k|            fn reclassify(&mut self, idx: usize) {
   60|  3.28k|                if let Some(block) = self.block.take() {
   61|  3.28k|                    let quote_classified_block = block.quote_classified;
   62|  3.28k|                    let relevant_idx = idx + 1;
   63|  3.28k|                    let block_idx = (idx + 1) % $size;
   64|  3.28k|                    debug!("relevant_idx is {relevant_idx}.");
   65|  3.28k|
   66|  3.28k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   67|  3.18k|                        debug!("need to reclassify.");
   68|  3.18k|
   69|  3.18k|                        let mask = <$mask_ty>::MAX << block_idx;
   70|  3.18k|                        // SAFETY: target_feature invariant
   71|  3.18k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   72|  3.18k|                        new_block.structural_mask &= mask;
   73|  3.18k|                        self.block = Some(new_block);
   74|  3.18k|                    }
   75|      0|                }
   76|  3.28k|            }
_RNvMs0_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCse4uPzH624PE_20fuzz_arbitrary_bytes:
   52|  32.5k|            fn current_block_is_spent(&self) -> bool {
   53|  32.5k|                self.block
   54|  32.5k|                    .as_ref()
   55|  32.5k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   56|  32.5k|            }
_RNvXs1_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCse4uPzH624PE_20fuzz_arbitrary_bytes:
   88|  27.9k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   89|  32.5k|                while self.current_block_is_spent() {
   90|  5.33k|                    match self.iter.next() {
   91|  4.58k|                        Ok(Some(block)) => {
   92|  4.58k|                            // SAFETY: target_feature invariant
   93|  4.58k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   94|  4.58k|                        }
   95|       |                        Ok(None) => {
   96|    750|                            self.block = None;
   97|    750|                            break;
   98|       |                        }
   99|      0|                        Err(err) => return Err(err),
  100|       |                    }
  101|       |                }
  102|       |
  103|  27.9k|                Ok(self
  104|  27.9k|                    .block
  105|  27.9k|                    .as_mut()
  106|  27.9k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  107|  27.9k|            }
_RNvXs2_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_colons_onCse4uPzH624PE_20fuzz_arbitrary_bytes:
  170|  2.27k|            fn turn_colons_on(&mut self, idx: usize) {
  171|  2.27k|                if !self.are_colons_on {
  172|  2.27k|                    self.are_colons_on = true;
  173|  2.27k|                    debug!("Turning colons on at {idx}.");
  174|  2.27k|                    // SAFETY: target_feature invariant
  175|  2.27k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  176|  2.27k|
  177|  2.27k|                    self.reclassify(idx);
  178|  2.27k|                }
  179|  2.27k|            }
_RNvXs2_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_commas_onCse4uPzH624PE_20fuzz_arbitrary_bytes:
  148|  6.52k|            fn turn_commas_on(&mut self, idx: usize) {
  149|  6.52k|                if !self.are_commas_on {
  150|    436|                    self.are_commas_on = true;
  151|    436|                    debug!("Turning commas on at {idx}.");
  152|    436|                    // SAFETY: target_feature invariant
  153|    436|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  154|    436|
  155|    436|                    self.reclassify(idx);
  156|  6.09k|                }
  157|  6.52k|            }
_RNvXs2_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_colons_offCse4uPzH624PE_20fuzz_arbitrary_bytes:
  182|  5.33k|            fn turn_colons_off(&mut self) {
  183|  5.33k|                if self.are_colons_on {
  184|  2.50k|                    self.are_colons_on = false;
  185|  2.50k|                    debug!("Turning colons off.");
  186|  2.50k|                    // SAFETY: target_feature invariant
  187|  2.50k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  188|  2.82k|                }
  189|  5.33k|            }
_RNvXs2_NtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E25turn_colons_and_commas_onCse4uPzH624PE_20fuzz_arbitrary_bytes:
  116|  7.96k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  117|  7.96k|                if !self.are_commas_on && !self.are_colons_on {
  118|    572|                    self.are_commas_on = true;
  119|    572|                    self.are_colons_on = true;
  120|    572|                    debug!("Turning both commas and colons on at {idx}.");
  121|    572|                    // SAFETY: target_feature invariant
  122|    572|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  123|    572|
  124|    572|                    self.reclassify(idx);
  125|  7.39k|                } else if !self.are_commas_on {
  126|      0|                    self.turn_commas_on(idx);
  127|  7.39k|                } else if !self.are_colons_on {
  128|  2.27k|                    self.turn_colons_on(idx);
  129|  5.11k|                }
  130|  7.96k|            }

_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
   16|  7.76k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  7.76k|        Self {
   18|  7.76k|            quote_classified: block,
   19|  7.76k|            structural_mask,
   20|  7.76k|        }
   21|  7.76k|    }
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCse4uPzH624PE_20fuzz_arbitrary_bytes:
   29|  27.1k|    pub(crate) fn get_idx(&self) -> u32 {
   30|  27.1k|        self.structural_mask.trailing_zeros()
   31|  27.1k|    }
_RNvXs_NtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCse4uPzH624PE_20fuzz_arbitrary_bytes:
   38|  27.1k|    fn next(&mut self) -> Option<Structural> {
   39|  27.1k|        let idx = self.get_idx() as usize;
   40|  27.1k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  27.1k|        })
   57|  27.1k|    }
_RNCNvXs_NtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Cse4uPzH624PE_20fuzz_arbitrary_bytes:
   40|  27.1k|        (idx < SIZE).then(|| {
   41|  27.1k|            let bit_mask = 1 << idx;
   42|  27.1k|
   43|  27.1k|            self.structural_mask ^= bit_mask;
   44|  27.1k|
   45|  27.1k|            // The last match being a catch-all *is important*.
   46|  27.1k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|  27.1k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|  27.1k|            match self.quote_classified.block[idx] {
   49|  4.44k|                b':' => Structural::Colon(idx),
   50|  6.14k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  5.33k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  8.24k|                b',' => Structural::Comma(idx),
   53|    315|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  2.70k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  27.1k|        })
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCse4uPzH624PE_20fuzz_arbitrary_bytes:
   24|  31.4k|    pub(crate) fn is_empty(&self) -> bool {
   25|  31.4k|        self.structural_mask == 0
   26|  31.4k|    }

_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCse4uPzH624PE_20fuzz_arbitrary_bytes:
   80|  4.78k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  4.78k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  4.78k|    }
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCse4uPzH624PE_20fuzz_arbitrary_bytes:
   74|    436|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|    436|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|    436|    }
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCse4uPzH624PE_20fuzz_arbitrary_bytes:
   92|  15.5k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|  15.5k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|  15.5k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|  15.5k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|  15.5k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|  15.5k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|  15.5k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|  15.5k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|  15.5k|
  101|  15.5k|        BlockClassification256 { structural }
  102|  15.5k|    }
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCse4uPzH624PE_20fuzz_arbitrary_bytes:
   86|    572|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|    572|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|    572|    }
_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCse4uPzH624PE_20fuzz_arbitrary_bytes:
   31|  15.5k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|  15.5k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|  15.5k|}
_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCse4uPzH624PE_20fuzz_arbitrary_bytes:
   49|  5.35k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  5.35k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  5.35k|}
_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCse4uPzH624PE_20fuzz_arbitrary_bytes:
   43|  1.00k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  1.00k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  1.00k|}
_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCse4uPzH624PE_20fuzz_arbitrary_bytes:
   25|  15.5k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|  15.5k|    _mm256_set1_epi8(0x0F)
   27|  15.5k|}
_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCse4uPzH624PE_20fuzz_arbitrary_bytes:
   55|    572|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|    572|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|    572|}
_RNvNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|  1.01k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|  1.01k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|  1.01k|}
_RNvMNtNtNtNtCs6RNShWQ8XAz_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|  1.01k|    pub(crate) unsafe fn new() -> Self {
   67|  1.01k|        Self {
   68|  1.01k|            upper_nibble_mask: upper_nibble_mask(),
   69|  1.01k|        }
   70|  1.01k|    }

_RNvMNtCs6RNShWQ8XAz_8rsonpath5depthNtB2_5Depth9increment:
   21|  11.4k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  11.4k|        *self = (*self + 1)?;
   23|  11.4k|        Ok(())
   24|  11.4k|    }
_RNvMNtCs6RNShWQ8XAz_8rsonpath5depthNtB2_5Depth9decrement:
   28|  3.02k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  3.02k|        *self = (*self - 1)?;
   30|  3.01k|        Ok(())
   31|  3.02k|    }
_RNvXs0_NtCs6RNShWQ8XAz_8rsonpath5depthNtB5_5DepthNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
   80|  13.4k|    fn deref(&self) -> &Self::Target {
   81|  13.4k|        &self.0
   82|  13.4k|    }
_RNvXsb_NtCs6RNShWQ8XAz_8rsonpath5depthNtB5_5DepthINtNtNtCshZc3FwCJ069_4core3ops5arith3AddhE3addB7_:
   40|  11.4k|            fn add(self, rhs: u8) -> Self::Output {
   41|  11.4k|                self.0
   42|  11.4k|                    .checked_add(rhs)
   43|  11.4k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  11.4k|                    .map(Depth)
   45|  11.4k|            }
_RNvXse_NtCs6RNShWQ8XAz_8rsonpath5depthNtB5_5DepthINtNtNtCshZc3FwCJ069_4core3ops5arith3SubhE3subB7_:
   56|  3.02k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  3.02k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  3.02k|            }

_RNvMNtNtCs6RNShWQ8XAz_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1M_6quotes7avx2_6411ConstructorNtNtNtB1M_10structural7avx2_6411ConstructorNtNtNtB1M_5depth7avx2_6411ConstructorNtNtNtB1M_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
   98|  1.01k|    pub(super) fn new(bytes: &'b I, automaton: &Automaton, simd: V) -> Option<Self> {
   99|  1.01k|        let initial_state = automaton.initial_state();
  100|  1.01k|        let fallback_state = automaton[initial_state].fallback_state();
  101|  1.01k|        let transitions = automaton[initial_state].member_transitions();
  102|  1.01k|
  103|  1.01k|        if fallback_state == initial_state
  104|      0|            && transitions.len() == 1
  105|      0|            && automaton[initial_state].array_transitions().is_empty()
  106|       |        {
  107|      0|            let (member_name, target_state) = &transitions[0];
  108|      0|            debug!("Automaton starts with a descendant search, using memmem heuristic.");
  109|      0|            return Some(Self {
  110|      0|                bytes,
  111|      0|                state: *target_state,
  112|      0|                is_accepting: automaton.is_accepting(*target_state),
  113|      0|                member_name: member_name.clone(),
  114|      0|                simd,
  115|      0|            });
  116|  1.01k|        }
  117|  1.01k|
  118|  1.01k|        None
  119|  1.01k|    }

_RNvXs_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainNtB4_10MainEngineNtB6_8Compiler13compile_query:
   93|  1.01k|    fn compile_query(query: &JsonPathQuery) -> Result<Self, CompilerError> {
   94|  1.01k|        let automaton = Automaton::new(query)?;
   95|       |        debug!("DFA:\n {}", automaton);
   96|  1.01k|        let simd = simd::configure();
   97|  1.01k|        log::info!("SIMD configuration:\n {}", simd);
   98|  1.01k|        Ok(Self { automaton, simd })
   99|  1.01k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCse4uPzH624PE_20fuzz_arbitrary_bytes:
  751|  3.01k|    fn pop_if_at_or_below(&mut self, depth: u8) -> Option<StackFrame> {
  752|  3.01k|        if let Some(stack_frame) = self.peek() {
  753|  2.99k|            if depth <= stack_frame.depth {
  754|  2.99k|                return self.contents.pop();
  755|      0|            }
  756|     23|        }
  757|     23|        None
  758|  3.01k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainNtB5_10SmallStack4peekCse4uPzH624PE_20fuzz_arbitrary_bytes:
  746|  3.01k|    fn peek(&mut self) -> Option<StackFrame> {
  747|  3.01k|        self.contents.last().copied()
  748|  3.01k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainNtB5_10SmallStack4pushCse4uPzH624PE_20fuzz_arbitrary_bytes:
  761|  10.4k|    fn push(&mut self, value: StackFrame) {
  762|  10.4k|        self.contents.push(value)
  763|  10.4k|    }
_RINvNtNtCs6RNShWQ8XAz_8rsonpath6engine4main14query_executorNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1D_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB33_6quotes7avx2_6411ConstructorNtNtNtB33_10structural7avx2_6411ConstructorNtNtNtB33_5depth7avx2_6411ConstructorNtNtNtB33_6memmem7avx2_6411ConstructorKj1_EECse4uPzH624PE_20fuzz_arbitrary_bytes:
  249|  1.01k|fn query_executor<'i, 'r, I, R, V: Simd>(
  250|  1.01k|    automaton: &'i Automaton,
  251|  1.01k|    input: &'i I,
  252|  1.01k|    recorder: &'r R,
  253|  1.01k|    simd: V,
  254|  1.01k|) -> Executor<'i, 'r, I, R, V>
  255|  1.01k|where
  256|  1.01k|    I: Input,
  257|  1.01k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  258|  1.01k|{
  259|  1.01k|    Executor {
  260|  1.01k|        depth: Depth::ZERO,
  261|  1.01k|        state: automaton.initial_state(),
  262|  1.01k|        stack: SmallStack::new(),
  263|  1.01k|        automaton,
  264|  1.01k|        input,
  265|  1.01k|        recorder,
  266|  1.01k|        simd,
  267|  1.01k|        next_event: None,
  268|  1.01k|        is_list: false,
  269|  1.01k|        array_count: JsonUInt::ZERO,
  270|  1.01k|    }
  271|  1.01k|}
_RINvNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input8borrowed13BorrowedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2p_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3P_6quotes7avx2_6411ConstructorNtNtNtB3P_10structural7avx2_6411ConstructorNtNtNtB3P_5depth7avx2_6411ConstructorNtNtNtB3P_6memmem7avx2_6411ConstructorKj1_EECse4uPzH624PE_20fuzz_arbitrary_bytes:
  316|  1.01k|        {
  317|       |            loop {
  318|       |                // Fetch the next element only if the lookahead is empty.
  319|  27.9k|                if eng.next_event.is_none() {
  320|  27.9k|                    eng.next_event = match classifier.next() {
  321|  27.9k|                        Ok(e) => e,
  322|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  323|       |                    };
  324|      0|                }
  325|  27.9k|                if let Some(event) = eng.next_event.take() {
  326|       |                    debug!("====================");
  327|       |                    debug!("Event = {:?}", event);
  328|       |                    debug!("Depth = {:?}", eng.depth);
  329|       |                    debug!("Stack = {:?}", eng.stack);
  330|       |                    debug!("State = {:?}", eng.state);
  331|       |                    debug!("====================");
  332|       |
  333|  27.1k|                    match event {
  334|  4.44k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  335|  8.24k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  336|  11.4k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  337|  3.02k|                        Structural::Closing(_, idx) => {
  338|  3.02k|                            eng.handle_closing(classifier, idx)?;
  339|       |
  340|  3.01k|                            if eng.depth == Depth::ZERO {
  341|     23|                                break;
  342|  2.99k|                            }
  343|       |                        }
  344|       |                    }
  345|       |                } else {
  346|    750|                    break;
  347|       |                }
  348|       |            }
  349|       |
  350|    773|            Ok(())
_RINvXs0_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainNtB6_10MainEngineNtB8_6Engine7matchesNtNtNtBa_5input8borrowed13BorrowedBytesINtNtCs8f6x4lOZV33_5alloc3vec3VecNtNtBa_6result5MatchEECse4uPzH624PE_20fuzz_arbitrary_bytes:
  186|  1.01k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  187|  1.01k|    where
  188|  1.01k|        I: Input,
  189|  1.01k|        S: Sink<Match>,
  190|  1.01k|    {
  191|  1.01k|        if self.automaton.is_select_root_query() {
  192|      0|            return select_root_query::match_(input, sink);
  193|  1.01k|        }
  194|  1.01k|        if self.automaton.is_empty_query() {
  195|      0|            return Ok(());
  196|  1.01k|        }
  197|  1.01k|
  198|  1.01k|        let recorder = NodesRecorder::build_recorder(sink, input.leading_padding_len());
  199|  1.01k|        config_simd!(self.simd => |simd| {
  200|      0|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  201|      0|            executor.run()
  202|    987|        })?;
  203|       |
  204|     26|        Ok(())
  205|  1.01k|    }
_RNCNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_closing0Cse4uPzH624PE_20fuzz_arbitrary_bytes:
  587|      2|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
_RNCNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0Cse4uPzH624PE_20fuzz_arbitrary_bytes:
  522|      4|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNCNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0Cse4uPzH624PE_20fuzz_arbitrary_bytes:
  698|  22.3k|        .map(|x| x.0);
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCse4uPzH624PE_20fuzz_arbitrary_bytes:
  358|  4.44k|    fn handle_colon(
  359|  4.44k|        &mut self,
  360|  4.44k|        #[allow(unused_variables)] classifier: &mut Classifier!(),
  361|  4.44k|        idx: usize,
  362|  4.44k|    ) -> Result<(), EngineError> {
  363|       |        debug!("Colon");
  364|       |
  365|       |        // Lookahead to see if the next character is an opening.
  366|       |        // If yes, the logic will be handled in handle_opening and we bail.
  367|  4.44k|        if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  368|  4.36k|            if c == b'{' || c == b'[' {
  369|    675|                return Ok(());
  370|  3.69k|            }
  371|     75|        }
  372|       |
  373|       |        // Atomic values are only relevant if the automaton accepts.
  374|       |        // Look at accepting transitions and try to match them with the label.
  375|  3.76k|        let mut any_matched = false;
  376|       |
  377|  3.76k|        for (member_name, target) in self.automaton[self.state].member_transitions() {
  378|      0|            if self.automaton.is_accepting(*target) && self.is_match(idx, member_name.as_ref())? {
  379|      0|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  380|      0|                any_matched = true;
  381|      0|                break;
  382|      0|            }
  383|       |        }
  384|       |        // Alternatively, match consider the fallback transition if it accepts.
  385|  3.76k|        let fallback_state = self.automaton[self.state].fallback_state();
  386|  3.76k|        if !any_matched && self.automaton.is_accepting(fallback_state) {
  387|  3.76k|            self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  388|      0|        }
  389|       |
  390|       |        // Tail skipping.
  391|       |        // If we are in a unitary state and have matched a transition, we can skip the rest of the subtree,
  392|       |        // since member names are unique.
  393|  3.69k|        if any_matched && self.automaton.is_unitary(self.state) {
  394|       |            // We need to look ahead for some bookkeeping.
  395|       |            // 1. If the next event is closing then there's no reason to spin up the skipping machinery,
  396|       |            //    since it would exit immediately anyway.
  397|       |            // 2. If the next character is a comma then we need to notify the recorder.
  398|       |            // 3. Realistically, a colon should never happen. An opening is not interesting and will be skipped.
  399|      0|            self.next_event = classifier.next()?;
  400|      0|            match self.next_event {
  401|       |                None | Some(Structural::Closing(_, _)) => {
  402|      0|                    return Ok(());
  403|       |                }
  404|      0|                Some(Structural::Comma(idx)) => self.recorder.record_value_terminator(idx, self.depth)?,
  405|      0|                Some(Structural::Colon(_) | Structural::Opening(_, _)) => (),
  406|       |            }
  407|      0|            let bracket_type = self.current_node_bracket_type();
  408|       |            debug!("Skipping unique state from {bracket_type:?}");
  409|      0|            let stop_at = classifier.skip(bracket_type)?;
  410|       |            // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  411|       |            // handle a closing, so we set the lookahead to the correct character.
  412|      0|            self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  413|  3.69k|        }
  414|       |
  415|  3.69k|        Ok(())
  416|  4.44k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCse4uPzH624PE_20fuzz_arbitrary_bytes:
  422|  8.24k|    fn handle_comma(&mut self, _classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  423|  8.24k|        debug!("Comma");
  424|  8.24k|
  425|  8.24k|        self.recorder.record_value_terminator(idx, self.depth)?;
  426|       |
  427|  8.24k|        if self.is_list {
  428|       |            // If the index increment exceeds the field's limit, give up.
  429|  7.19k|            if self.array_count.try_increment().is_err() {
  430|      0|                return Ok(());
  431|  7.19k|            }
  432|       |
  433|       |            // Lookahead to see if the next character is an opening.
  434|       |            // If yes, the logic will be handled in handle_opening and we bail.
  435|  7.19k|            if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  436|  7.03k|                if c == b'{' || c == b'[' {
  437|    545|                    return Ok(());
  438|  6.49k|                }
  439|    159|            }
  440|       |
  441|       |            // Check the fallback transition first since it's cheap, then check for the specific index.
  442|  6.65k|            let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  443|  6.65k|
  444|  6.65k|            if is_fallback_accepting
  445|      0|                || self
  446|      0|                    .automaton
  447|      0|                    .has_array_index_transition_to_accepting(self.state, &self.array_count)
  448|       |            {
  449|       |                debug!("Accepting list item on comma.");
  450|  6.65k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  451|      0|            }
  452|  1.04k|        }
  453|       |
  454|  7.53k|        Ok(())
  455|  8.24k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCse4uPzH624PE_20fuzz_arbitrary_bytes:
  294|  1.01k|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  295|  1.01k|        let iter = self.input.iter_blocks(self.recorder);
  296|  1.01k|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  297|  1.01k|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  298|  1.01k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  299|  1.01k|
  300|  1.01k|        self.run_on_subtree(&mut classifier)?;
  301|       |
  302|    773|        self.verify_subtree_closed()
  303|  1.01k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE13transition_toCse4uPzH624PE_20fuzz_arbitrary_bytes:
  631|  10.4k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  632|  10.4k|        let target_is_list = opening == BracketType::Square;
  633|  10.4k|
  634|  10.4k|        let fallback = self.automaton[self.state].fallback_state();
  635|  10.4k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  636|  10.4k|        let searching_list = is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state);
  637|       |
  638|       |        // To keep the stack small, we only push if the state only changes in any meaningful way.
  639|  10.4k|        if target != self.state || target_is_list != self.is_list || searching_list {
  640|  10.4k|            debug!(
  641|  10.4k|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  642|  10.4k|                self.state, self.array_count
  643|  10.4k|            );
  644|  10.4k|
  645|  10.4k|            self.stack.push(StackFrame {
  646|  10.4k|                depth: *self.depth,
  647|  10.4k|                state: self.state,
  648|  10.4k|                is_list: self.is_list,
  649|  10.4k|                array_count: self.array_count,
  650|  10.4k|            });
  651|  10.4k|            self.state = target;
  652|  10.4k|        }
  653|  10.4k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCse4uPzH624PE_20fuzz_arbitrary_bytes:
  582|  3.02k|    fn handle_closing(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  583|  3.02k|        debug!("Closing, decreasing depth and popping stack.");
  584|  3.02k|
  585|  3.02k|        self.depth
  586|  3.02k|            .decrement()
  587|  3.02k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  588|  3.01k|        self.recorder.record_value_terminator(idx, self.depth)?;
  589|       |
  590|       |        // Restore the state from the stack if the transition was not a loop.
  591|  3.01k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  592|  2.99k|            self.state = stack_frame.state;
  593|  2.99k|            self.is_list = stack_frame.is_list;
  594|  2.99k|            self.array_count = stack_frame.array_count;
  595|  2.99k|
  596|  2.99k|            debug!("Restored array count to {}", self.array_count);
  597|  2.99k|
  598|  2.99k|            // We have taken a transition when entering the just-closed subtree. If the state is unitary
  599|  2.99k|            // we can just skip the rest of the current subtree.
  600|  2.99k|            if self.automaton.is_unitary(self.state) {
  601|      0|                let bracket_type = self.current_node_bracket_type();
  602|       |                debug!("Skipping unique state from {bracket_type:?}");
  603|      0|                let close_idx = classifier.skip(bracket_type)?;
  604|       |                // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  605|       |                // handle a closing, so we set the lookahead to the correct character.
  606|      0|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  607|      0|                return Ok(());
  608|  2.99k|            }
  609|     23|        }
  610|       |
  611|  3.01k|        if self.is_list {
  612|  1.19k|            if self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  613|      0|                || self.automaton.has_any_array_item_transition(self.state)
  614|  1.19k|            {
  615|  1.19k|                classifier.turn_commas_on(idx);
  616|  1.19k|            } else {
  617|      0|                classifier.turn_commas_off();
  618|      0|            }
  619|  1.82k|        } else if self.automaton.has_transition_to_accepting(self.state) {
  620|  1.82k|            classifier.turn_colons_and_commas_on(idx);
  621|  1.82k|        } else {
  622|      0|            classifier.turn_colons_off();
  623|      0|        }
  624|       |
  625|  3.01k|        Ok(())
  626|  3.02k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCse4uPzH624PE_20fuzz_arbitrary_bytes:
  459|  11.4k|    fn handle_opening(
  460|  11.4k|        &mut self,
  461|  11.4k|        classifier: &mut Classifier!(),
  462|  11.4k|        bracket_type: BracketType,
  463|  11.4k|        idx: usize,
  464|  11.4k|    ) -> Result<(), EngineError> {
  465|  11.4k|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  466|  11.4k|
  467|  11.4k|        // Check all transitions relevant to the current subtree - array if in list, member if not.
  468|  11.4k|        let mut any_matched = false;
  469|  11.4k|        if self.is_list {
  470|  4.42k|            for trans in self.automaton[self.state].array_transitions() {
  471|      0|                if trans.matches(self.array_count) {
  472|      0|                    let target = trans.target_state();
  473|      0|                    any_matched = true;
  474|      0|                    self.transition_to(target, bracket_type);
  475|      0|                    if self.automaton.is_accepting(target) {
  476|       |                        debug!("Accept {idx}");
  477|      0|                        self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  478|      0|                    }
  479|      0|                    break;
  480|      0|                }
  481|       |            }
  482|       |        } else {
  483|  7.05k|            let colon_idx = self.find_preceding_colon(idx);
  484|       |
  485|  7.05k|            for (member_name, target) in self.automaton[self.state].member_transitions() {
  486|      0|                if let Some(colon_idx) = colon_idx {
  487|      0|                    if self.is_match(colon_idx, member_name.as_ref())? {
  488|      0|                        any_matched = true;
  489|      0|                        self.transition_to(*target, bracket_type);
  490|      0|                        if self.automaton.is_accepting(*target) {
  491|       |                            debug!("Accept {idx}");
  492|      0|                            self.record_match_detected_at(colon_idx + 1, NodeType::Complex(bracket_type))?;
  493|      0|                        }
  494|      0|                        break;
  495|      0|                    }
  496|      0|                }
  497|       |            }
  498|       |        }
  499|       |
  500|       |        // If nothing matched trigger the fallback transition.
  501|  11.4k|        if !any_matched && self.depth != Depth::ZERO {
  502|  10.4k|            let fallback = self.automaton[self.state].fallback_state();
  503|  10.4k|            debug!("Falling back to {fallback}");
  504|  10.4k|
  505|  10.4k|            if self.automaton.is_rejecting(fallback) {
  506|       |                // Tail skipping. Skip the entire subtree. The skipping consumes the closing character.
  507|       |                // We still need to notify the recorder - in case the value being skipped was actually accepted.
  508|      0|                let closing_idx = classifier.skip(bracket_type)?;
  509|      0|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  510|  10.4k|            } else {
  511|  10.4k|                self.transition_to(fallback, bracket_type);
  512|  10.4k|            }
  513|  10.4k|
  514|  10.4k|            if self.automaton.is_accepting(fallback) {
  515|  10.4k|                self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  516|      0|            }
  517|  1.00k|        }
  518|       |
  519|       |        // At this point we will be actually digging into the subtree.
  520|  11.4k|        self.depth
  521|  11.4k|            .increment()
  522|  11.4k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  523|       |
  524|  11.4k|        self.is_list = bracket_type == BracketType::Square;
  525|  11.4k|        let mut needs_commas = false;
  526|  11.4k|
  527|  11.4k|        // If we're starting a list, there's a very hairy problem of accepting the first element in the list,
  528|  11.4k|        // if it is atomic. We process objects and arrays on their opening character, and atomics on their preceding comma.
  529|  11.4k|        // The first element doesn't have a preceding comma, so if it needs to be accepted we need to handle it now.
  530|  11.4k|        //
  531|  11.4k|        // Additionally, whether to enable commas or not depends on whether an item of the list can ever be accepted.
  532|  11.4k|        if self.is_list {
  533|  5.33k|            let fallback = self.automaton[self.state].fallback_state();
  534|  5.33k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  535|  5.33k|
  536|  5.33k|            if is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state) {
  537|  5.33k|                needs_commas = true;
  538|  5.33k|                self.array_count = JsonUInt::ZERO;
  539|       |                debug!("Initialized array count to {}", self.array_count);
  540|       |
  541|  5.33k|                let wants_first_item =
  542|  5.33k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  543|       |
  544|  5.33k|                if wants_first_item {
  545|  5.33k|                    let next = self.input.seek_non_whitespace_forward(idx + 1).e()?;
  546|       |
  547|       |                    // We only handle the match if it exists and is atomic. The possible cases
  548|       |                    // in a well-formed JSON for the next character are:
  549|       |                    // - '[', for an array value
  550|       |                    // - '{' for an object value
  551|       |                    // - ']' if the list was empty and has no values
  552|       |                    // - otherwise it's the first character of an atomic value.
  553|  5.33k|                    match next {
  554|  3.27k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  555|  1.73k|                        Some((value_idx, _)) => {
  556|  1.73k|                            self.record_match_detected_at(value_idx, NodeType::Atomic)?;
  557|       |                        }
  558|    324|                        _ => (),
  559|       |                    }
  560|      0|                }
  561|      0|            }
  562|  6.14k|        }
  563|       |
  564|       |        // Decide which structural characters need to be handled in this subtree.
  565|  11.4k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  566|  6.14k|            // When accepting values in an object we need colons for the member names,
  567|  6.14k|            // and commas to report where atomic values end (for the Recorder).
  568|  6.14k|            // This is the only case that needs colons.
  569|  6.14k|            classifier.turn_colons_and_commas_on(idx);
  570|  6.14k|        } else if needs_commas {
  571|  5.33k|            classifier.turn_colons_off();
  572|  5.33k|            classifier.turn_commas_on(idx);
  573|  5.33k|        } else {
  574|      0|            classifier.turn_colons_and_commas_off();
  575|      0|        }
  576|       |
  577|  11.4k|        Ok(())
  578|  11.4k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCse4uPzH624PE_20fuzz_arbitrary_bytes:
  308|  1.01k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  309|  1.01k|        dispatch_simd!(self.simd; self, classifier =>
  310|       |        fn<'i, 'r, I, R, V>(eng: &mut Executor<'i, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  311|       |        where
  312|       |            'i: 'r,
  313|       |            I: Input,
  314|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  315|       |            V: Simd
  316|       |        {
  317|       |            loop {
  318|       |                // Fetch the next element only if the lookahead is empty.
  319|       |                if eng.next_event.is_none() {
  320|       |                    eng.next_event = match classifier.next() {
  321|       |                        Ok(e) => e,
  322|       |                        Err(err) => return Err(EngineError::InputError(err)),
  323|       |                    };
  324|       |                }
  325|       |                if let Some(event) = eng.next_event.take() {
  326|       |                    debug!("====================");
  327|       |                    debug!("Event = {:?}", event);
  328|       |                    debug!("Depth = {:?}", eng.depth);
  329|       |                    debug!("Stack = {:?}", eng.stack);
  330|       |                    debug!("State = {:?}", eng.state);
  331|       |                    debug!("====================");
  332|       |
  333|       |                    match event {
  334|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  335|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  336|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  337|       |                        Structural::Closing(_, idx) => {
  338|       |                            eng.handle_closing(classifier, idx)?;
  339|       |
  340|       |                            if eng.depth == Depth::ZERO {
  341|       |                                break;
  342|       |                            }
  343|       |                        }
  344|       |                    }
  345|       |                } else {
  346|       |                    break;
  347|       |                }
  348|       |            }
  349|       |
  350|       |            Ok(())
  351|       |        })
  352|  1.01k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCse4uPzH624PE_20fuzz_arbitrary_bytes:
  656|  7.05k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  657|  7.05k|        if self.depth == Depth::ZERO {
  658|  1.00k|            None
  659|       |        } else {
  660|  6.04k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  661|       |
  662|  6.04k|            (char == b':').then_some(char_idx)
  663|       |        }
  664|  7.05k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCse4uPzH624PE_20fuzz_arbitrary_bytes:
  707|    773|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  708|    773|        if self.depth != Depth::ZERO {
  709|    747|            Err(EngineError::MissingClosingCharacter())
  710|       |        } else {
  711|     26|            Ok(())
  712|       |        }
  713|    773|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCse4uPzH624PE_20fuzz_arbitrary_bytes:
  690|  22.6k|    fn record_match_detected_at(&mut self, start_idx: usize, ty: NodeType) -> Result<(), EngineError> {
  691|       |        debug!("Reporting result somewhere after {start_idx} with node type {ty:?}");
  692|       |
  693|  22.6k|        let index = match ty {
  694|  5.57k|            NodeType::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{']).e()?,
  695|  4.89k|            NodeType::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'[']).e()?,
  696|  12.1k|            NodeType::Atomic => self.input.seek_non_whitespace_forward(start_idx).e()?,
  697|       |        }
  698|  22.6k|        .map(|x| x.0);
  699|  22.6k|
  700|  22.6k|        match index {
  701|  22.3k|            Some(idx) => self.recorder.record_match(idx, self.depth, ty.into()),
  702|    234|            None => Err(EngineError::MissingItem()),
  703|       |        }
  704|  22.6k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE3runCse4uPzH624PE_20fuzz_arbitrary_bytes:
  280|  1.01k|    fn run(mut self) -> Result<(), EngineError> {
  281|  1.01k|        // First we check if head-skipping is possible for a given query automaton.
  282|  1.01k|        // If yes, delegate the control to HeadSkip and give it full access to this Executor.
  283|  1.01k|        // Otherwise, we run our normal one-shot engine.
  284|  1.01k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  285|  1.01k|
  286|  1.01k|        match mb_head_skip {
  287|      0|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  288|  1.01k|            None => self.run_and_exit(),
  289|       |        }
  290|  1.01k|    }
_RNvXs4_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCshZc3FwCJ069_4core7convert4FromNtB5_8NodeTypeE4from:
  803|  22.3k|    fn from(value: NodeType) -> Self {
  804|  22.3k|        match value {
  805|  11.9k|            NodeType::Atomic => Self::Atomic,
  806|  10.4k|            NodeType::Complex(_) => Self::Complex,
  807|       |        }
  808|  22.3k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6engine4mainNtB5_10SmallStack3new:
  741|  1.01k|    fn new() -> Self {
  742|  1.01k|        Self { contents: smallvec![] }
  743|  1.01k|    }

_RNvMNtNtCs6RNShWQ8XAz_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
   28|  1.01k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  1.01k|        Self {
   30|  1.01k|            classifier: Some(classifier),
   31|  1.01k|            simd,
   32|  1.01k|            _phantom: (PhantomData, PhantomData),
   33|  1.01k|        }
   34|  1.01k|    }
_RNvXs0_NtNtCs6RNShWQ8XAz_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1c_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2E_5MatchEEKj40_EINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB4c_10structural7avx2_6416Avx2Classifier64B17_B45_EINtNtB4c_4simd12ResolvedSimdNtB48_11ConstructorNtB5h_11ConstructorNtNtNtB4c_5depth7avx2_6411ConstructorNtNtNtB4c_6memmem7avx2_6411ConstructorKj1_EKB40_ENtNtNtCshZc3FwCJ069_4core3ops5deref8DerefMut9deref_mutCse4uPzH624PE_20fuzz_arbitrary_bytes:
  138|  47.7k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|  47.7k|        self.classifier
  140|  47.7k|            .as_mut()
  141|  47.7k|            .expect("tail skip must always hold a classifier")
  142|  47.7k|    }

_RNvXNtCs6RNShWQ8XAz_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCse4uPzH624PE_20fuzz_arbitrary_bytes:
  206|  12.3k|    fn halves(&self) -> (&[u8], &[u8]) {
  207|  12.3k|        assert_eq!(N % 2, 0);
  208|  12.3k|        (&self[..N / 2], &self[N / 2..])
  209|  12.3k|    }
_RINvNtCs6RNShWQ8XAz_8rsonpath5input8align_toKj80_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
  225|  1.01k|fn align_to<const N: usize>(bytes: &[u8]) -> (&[u8], &[u8], &[u8]) {
  226|  1.01k|    let ptr = bytes.as_ptr();
  227|  1.01k|    let offset = ptr.align_offset(N);
  228|  1.01k|    if offset > bytes.len() {
  229|    376|        (bytes, &[], &[])
  230|       |    } else {
  231|    637|        let (left, rest) = bytes.split_at(offset);
  232|    637|        let middle_len = (rest.len() / N) * N;
  233|    637|        let (middle, right) = rest.split_at(middle_len);
  234|    637|
  235|    637|        (left, middle, right)
  236|       |    }
  237|  1.01k|}

_RNvXs2_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input27seek_non_whitespace_forwardCse4uPzH624PE_20fuzz_arbitrary_bytes:
  178|  29.1k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, Infallible> {
  179|  29.1k|        return Ok(
  180|  29.1k|            // The hot path is when we start and end within the middle section.
  181|  29.1k|            // We use the regular slice path for that scenario, and fall back to the very expensive
  182|  29.1k|            // TwoSidesPaddedInput with all bells and whistles only when that doesn't work.
  183|  29.1k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  184|  16.3k|                match self.middle_bytes.seek_non_whitespace_forward(from - MAX_BLOCK_SIZE) {
  185|  16.3k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  186|     77|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len()),
  187|       |                }
  188|       |            } else {
  189|  12.7k|                self.as_padded_input().seek_non_whitespace_forward(from)
  190|       |            },
  191|       |        );
  192|       |
  193|       |        #[cold]
  194|       |        #[inline(never)]
  195|       |        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  196|       |            last_block
  197|       |                .bytes()
  198|       |                .seek_non_whitespace_forward(0)
  199|       |                .map(|(x, y)| (x + offset, y))
  200|       |        }
  201|  29.1k|    }
_RNvXs2_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input28seek_non_whitespace_backwardCse4uPzH624PE_20fuzz_arbitrary_bytes:
  204|  6.04k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  205|  6.04k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  206|  2.50k|            match self.middle_bytes.seek_non_whitespace_backward(from - MAX_BLOCK_SIZE) {
  207|  2.49k|                Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  208|     11|                None => handle_first(&self.first_block),
  209|       |            }
  210|       |        } else {
  211|  3.53k|            self.as_padded_input().seek_non_whitespace_backward(from)
  212|       |        };
  213|       |
  214|       |        #[cold]
  215|       |        #[inline(never)]
  216|       |        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  217|       |            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  218|       |        }
  219|  6.04k|    }
_RINvNvXs3_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB2N_5MatchEEKj40_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
  266|  4.40k|        fn cold_path<'a, 'r, R, const N: usize>(
  267|  4.40k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  268|  4.40k|        ) -> Option<&'a [u8]>
  269|  4.40k|        where
  270|  4.40k|            R: InputRecorder<&'a [u8]>,
  271|  4.40k|        {
  272|  4.40k|            let block = iter.input.try_slice(iter.idx, N);
  273|       |
  274|  4.40k|            if let Some(b) = block {
  275|  3.65k|                iter.recorder.record_block_start(b);
  276|  3.65k|                iter.idx += N;
  277|  3.65k|            }
  278|       |
  279|  4.40k|            block
  280|  4.40k|        }
_RINvXs2_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input12seek_forwardKj1_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
  151|  10.4k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, Infallible> {
  152|  10.4k|        return Ok(
  153|  10.4k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  154|  4.54k|                match self.middle_bytes.seek_forward(from - MAX_BLOCK_SIZE, needles) {
  155|  4.54k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  156|      0|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len(), needles),
  157|       |                }
  158|       |            } else {
  159|  5.92k|                self.as_padded_input().seek_forward(from, needles)
  160|       |            },
  161|       |        );
  162|       |
  163|       |        #[cold]
  164|       |        #[inline(never)]
  165|       |        fn handle_last<const N: usize>(
  166|       |            last_block: &PaddedBlock,
  167|       |            offset: usize,
  168|       |            needles: [u8; N],
  169|       |        ) -> Option<(usize, u8)> {
  170|       |            last_block
  171|       |                .bytes()
  172|       |                .seek_forward(0, needles)
  173|       |                .map(|(x, y)| (x + offset, y))
  174|       |        }
  175|  10.4k|    }
_RNvXs3_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E10get_offsetCse4uPzH624PE_20fuzz_arbitrary_bytes:
  291|  27.2k|    fn get_offset(&self) -> usize {
  292|  27.2k|        debug!("getting input iter {}", self.idx);
  293|  27.2k|        self.idx
  294|  27.2k|    }
_RNvXs3_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E4nextCse4uPzH624PE_20fuzz_arbitrary_bytes:
  250|  5.33k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  251|  5.33k|        debug!("next!");
  252|  5.33k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  253|    934|            let start = self.idx - MAX_BLOCK_SIZE;
  254|    934|            // SAFETY: Bounds check above.
  255|    934|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  256|    934|            // By construction, middle has length divisible by N.
  257|    934|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  258|    934|            self.recorder.record_block_start(block);
  259|    934|            self.idx += N;
  260|    934|            Ok(Some(block))
  261|       |        } else {
  262|  4.40k|            Ok(cold_path(self))
  263|       |        };
  264|       |
  265|       |        #[cold]
  266|       |        fn cold_path<'a, 'r, R, const N: usize>(
  267|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  268|       |        ) -> Option<&'a [u8]>
  269|       |        where
  270|       |            R: InputRecorder<&'a [u8]>,
  271|       |        {
  272|       |            let block = iter.input.try_slice(iter.idx, N);
  273|       |
  274|       |            if let Some(b) = block {
  275|       |                iter.recorder.record_block_start(b);
  276|       |                iter.idx += N;
  277|       |            }
  278|       |
  279|       |            block
  280|       |        }
  281|  5.33k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB2_13BorrowedBytes3new:
   44|  1.01k|    pub fn new(bytes: &'a [u8]) -> Self {
   45|  1.01k|        let (first, middle, last) = align_to::<MAX_BLOCK_SIZE>(bytes);
   46|  1.01k|        let first_block = PaddedBlock::pad_first_block(first);
   47|  1.01k|        let last_block = PaddedBlock::pad_last_block(last);
   48|  1.01k|
   49|  1.01k|        Self {
   50|  1.01k|            middle_bytes: middle,
   51|  1.01k|            first_block,
   52|  1.01k|            last_block,
   53|  1.01k|        }
   54|  1.01k|    }
_RINvXs2_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB1z_5MatchEEKj40_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
  119|  1.01k|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  120|  1.01k|    where
  121|  1.01k|        R: InputRecorder<&'b [u8]>,
  122|  1.01k|    {
  123|  1.01k|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  124|  1.01k|
  125|  1.01k|        Self::BlockIterator {
  126|  1.01k|            idx: 0,
  127|  1.01k|            input: padded_input,
  128|  1.01k|            recorder,
  129|  1.01k|        }
  130|  1.01k|    }
_RNvXs2_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input19leading_padding_len:
  104|  1.01k|    fn leading_padding_len(&self) -> usize {
  105|  1.01k|        self.first_block.padding_len()
  106|  1.01k|    }
_RNCNvNvXs2_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB9_13BorrowedBytesNtBb_5Input27seek_non_whitespace_forward11handle_last0Bd_:
  199|     24|                .map(|(x, y)| (x + offset, y))
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB2_13BorrowedBytes15as_padded_input:
   56|  22.2k|    pub(super) fn as_padded_input(&self) -> TwoSidesPaddedInput {
   57|  22.2k|        TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block)
   58|  22.2k|    }
_RNvNvXs2_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input27seek_non_whitespace_forward11handle_last:
  195|     77|        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  196|     77|            last_block
  197|     77|                .bytes()
  198|     77|                .seek_non_whitespace_forward(0)
  199|     77|                .map(|(x, y)| (x + offset, y))
  200|     77|        }
_RNvNvXs2_NtNtCs6RNShWQ8XAz_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input28seek_non_whitespace_backward12handle_first:
  216|     11|        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  217|     11|            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  218|     11|        }

_RNvXNtNtCs6RNShWQ8XAz_8rsonpath5input5errorINtNtCshZc3FwCJ069_4core6result6ResultINtNtBK_6option6OptionRShENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCse4uPzH624PE_20fuzz_arbitrary_bytes:
   50|  5.33k|    fn e(self) -> Result<T, InputError> {
   51|  5.33k|        self.map_err(std::convert::Into::into)
   52|  5.33k|    }
_RNvXNtNtCs6RNShWQ8XAz_8rsonpath5input5errorINtNtCshZc3FwCJ069_4core6result6ResultINtNtBK_6option6OptionTjhEENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCse4uPzH624PE_20fuzz_arbitrary_bytes:
   50|  39.5k|    fn e(self) -> Result<T, InputError> {
   51|  39.5k|        self.map_err(std::convert::Into::into)
   52|  39.5k|    }

_RINvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput22seek_forward_from_lastKj1_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
  373|  2.44k|    fn seek_forward_from_last<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  374|  2.44k|        assert!(N > 0);
  375|  2.44k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  376|  2.44k|        let bytes = &self.last_block.bytes;
  377|  2.44k|
  378|  2.44k|        seek_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needles)
  379|  2.44k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  380|  2.44k|    }
_RINvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput23seek_forward_from_firstKj1_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
  349|  3.48k|    fn seek_forward_from_first<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  350|  3.48k|        assert!(N > 0);
  351|  3.48k|        debug_assert!(from < MAX_BLOCK_SIZE);
  352|  3.48k|        let bytes = &self.first_block.bytes;
  353|  3.48k|
  354|  3.48k|        seek_forward_impl(bytes, from, needles).or_else(|| {
  355|       |            if self.middle.is_empty() {
  356|       |                self.seek_forward_from_last(bytes.len(), needles)
  357|       |            } else {
  358|       |                self.seek_forward_from_middle(bytes.len(), needles)
  359|       |            }
  360|  3.48k|        })
  361|  3.48k|    }
_RINvNtNtCs6RNShWQ8XAz_8rsonpath5input7padding17seek_forward_implKj1_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
  538|  5.92k|fn seek_forward_impl<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  539|  5.92k|    let mut idx = from;
  540|  5.92k|    if idx >= bytes.len() {
  541|      0|        return None;
  542|  5.92k|    }
  543|       |
  544|       |    loop {
  545|  5.92k|        let b = bytes[idx];
  546|  5.92k|        if needles.contains(&b) {
  547|  5.92k|            return Some((idx, b));
  548|      0|        }
  549|      0|        idx += 1;
  550|      0|        if idx == bytes.len() {
  551|      0|            return None;
  552|      0|        }
  553|       |    }
  554|  5.92k|}
_RINvXs0_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInputNtB8_13SliceSeekable12seek_forwardKj1_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
  126|  5.92k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  127|  5.92k|        if from < MAX_BLOCK_SIZE {
  128|  3.48k|            self.seek_forward_from_first(from, needles)
  129|  2.44k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  130|      0|            self.seek_forward_from_middle(from, needles)
  131|       |        } else {
  132|  2.44k|            self.seek_forward_from_last(from, needles)
  133|       |        }
  134|  5.92k|    }
_RNCINvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput22seek_forward_from_lastKj1_E0Cse4uPzH624PE_20fuzz_arbitrary_bytes:
  379|  2.44k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6middle:
  314|  4.24k|    pub(super) fn middle(&self) -> &'a [u8] {
  315|  4.24k|        self.middle
  316|  4.24k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB2_11PaddedBlock3len:
   22|     11|    pub(super) const fn len(&self) -> usize {
   23|     11|        MAX_BLOCK_SIZE
   24|     11|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB2_11PaddedBlock11padding_len:
   26|  1.01k|    pub(super) fn padding_len(&self) -> usize {
   27|  1.01k|        self.padding_len
   28|  1.01k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB2_11PaddedBlock5bytes:
   30|     88|    pub(super) fn bytes(&self) -> &[u8] {
   31|     88|        &self.bytes
   32|     88|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB2_11PaddedBlock15pad_first_block:
   34|  1.01k|    pub(super) fn pad_first_block(bytes: &[u8]) -> Self {
   35|  1.01k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   36|  1.01k|        let mut block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   37|  1.01k|        let block_start = MAX_BLOCK_SIZE - bytes.len();
   38|  1.01k|
   39|  1.01k|        block_buf[block_start..].copy_from_slice(bytes);
   40|  1.01k|
   41|  1.01k|        Self {
   42|  1.01k|            bytes: block_buf,
   43|  1.01k|            padding_len: block_start,
   44|  1.01k|        }
   45|  1.01k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB2_11PaddedBlock14pad_last_block:
   47|  1.01k|    pub(super) fn pad_last_block(bytes: &[u8]) -> Self {
   48|  1.01k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   49|  1.01k|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   50|  1.01k|        let block_end = bytes.len();
   51|  1.01k|
   52|  1.01k|        last_block_buf[..block_end].copy_from_slice(bytes);
   53|  1.01k|
   54|  1.01k|        Self {
   55|  1.01k|            bytes: last_block_buf,
   56|  1.01k|            padding_len: MAX_BLOCK_SIZE - block_end,
   57|  1.01k|        }
   58|  1.01k|    }
_RNvXs0_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable27seek_non_whitespace_forward:
  138|  12.7k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
  139|  12.7k|        if from < MAX_BLOCK_SIZE {
  140|  6.69k|            self.seek_non_whitespace_forward_from_first(from)
  141|  6.04k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  142|      0|            self.seek_non_whitespace_forward_from_middle(from)
  143|       |        } else {
  144|  6.04k|            self.seek_non_whitespace_forward_from_last(from)
  145|       |        }
  146|  12.7k|    }
_RNvXs0_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable28seek_non_whitespace_backward:
  150|  3.53k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  151|  3.53k|        if from < MAX_BLOCK_SIZE {
  152|  2.04k|            self.seek_non_whitespace_backward_from_first(from)
  153|  1.48k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  154|      0|            self.seek_non_whitespace_backward_from_middle(from)
  155|       |        } else {
  156|  1.48k|            self.seek_non_whitespace_backward_from_last(from)
  157|       |        }
  158|  3.53k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput3new:
  305|  23.2k|    pub(super) fn new(first: &'a PaddedBlock, middle: &'a [u8], last: &'a PaddedBlock) -> Self {
  306|  23.2k|        Self {
  307|  23.2k|            first_block: first,
  308|  23.2k|            middle,
  309|  23.2k|            last_block: last,
  310|  23.2k|        }
  311|  23.2k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first:
  382|  6.69k|    fn seek_non_whitespace_forward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  383|  6.69k|        debug_assert!(from < MAX_BLOCK_SIZE);
  384|  6.69k|        let bytes = &self.first_block.bytes;
  385|  6.69k|
  386|  6.69k|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  387|       |            if self.middle.is_empty() {
  388|       |                self.seek_non_whitespace_forward_from_last(bytes.len())
  389|       |            } else {
  390|       |                self.seek_non_whitespace_forward_from_middle(bytes.len())
  391|       |            }
  392|  6.69k|        })
  393|  6.69k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle:
  395|     25|    fn seek_non_whitespace_forward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  396|     25|        debug_assert!(from >= MAX_BLOCK_SIZE);
  397|     25|        let bytes = self.middle;
  398|     25|
  399|     25|        seek_non_whitespace_forward_impl(bytes, from - MAX_BLOCK_SIZE)
  400|     25|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  401|     25|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
  402|     25|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last:
  404|  6.37k|    fn seek_non_whitespace_forward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  405|  6.37k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  406|  6.37k|        let bytes = &self.last_block.bytes;
  407|  6.37k|
  408|  6.37k|        seek_non_whitespace_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  409|  6.37k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  410|  6.37k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_backward_from_first:
  412|  2.20k|    fn seek_non_whitespace_backward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  413|  2.20k|        debug_assert!(from < MAX_BLOCK_SIZE);
  414|  2.20k|        let bytes = &self.first_block.bytes;
  415|  2.20k|
  416|  2.20k|        seek_non_whitespace_backward_impl(bytes, from)
  417|  2.20k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle:
  419|     27|    fn seek_non_whitespace_backward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  420|     27|        debug_assert!(from >= MAX_BLOCK_SIZE);
  421|     27|        let bytes = self.middle;
  422|     27|
  423|     27|        seek_non_whitespace_backward_impl(bytes, from - MAX_BLOCK_SIZE)
  424|     27|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  425|     27|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
  426|     27|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last:
  428|  1.48k|    fn seek_non_whitespace_backward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  429|  1.48k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  430|  1.48k|        let bytes = &self.last_block.bytes;
  431|  1.48k|
  432|  1.48k|        seek_non_whitespace_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  433|  1.48k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  434|  1.48k|            .or_else(|| {
  435|       |                if self.middle.is_empty() {
  436|       |                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  437|       |                } else {
  438|       |                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  439|       |                }
  440|  1.48k|            })
  441|  1.48k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput9try_slice:
  443|  4.40k|    pub(super) fn try_slice(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  444|  4.40k|        debug_assert!(len < MAX_BLOCK_SIZE);
  445|       |
  446|  4.40k|        if start < MAX_BLOCK_SIZE {
  447|  2.02k|            Some(self.slice_first(start, len))
  448|  2.37k|        } else if start < self.middle.len() + MAX_BLOCK_SIZE {
  449|      0|            Some(self.slice_middle(start, len))
  450|       |        } else {
  451|  2.37k|            self.slice_last(start, len)
  452|       |        }
  453|  4.40k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_first:
  455|  2.02k|    fn slice_first(&self, start: usize, len: usize) -> &'a [u8] {
  456|  2.02k|        &self.first_block.bytes[start..start + len]
  457|  2.02k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput10slice_last:
  464|  2.37k|    fn slice_last(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  465|  2.37k|        let start = start - self.middle.len() - MAX_BLOCK_SIZE;
  466|  2.37k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
  467|  2.37k|    }
_RNvNtNtCs6RNShWQ8XAz_8rsonpath5input7padding32seek_non_whitespace_forward_impl:
  557|  13.0k|fn seek_non_whitespace_forward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  558|  13.0k|    let mut idx = from;
  559|  13.0k|    if idx >= bytes.len() {
  560|      0|        return None;
  561|  13.0k|    }
  562|       |
  563|       |    loop {
  564|   117k|        let b = bytes[idx];
  565|   117k|        if !b.is_ascii_whitespace() {
  566|  12.0k|            return Some((idx, b));
  567|   105k|        }
  568|   105k|        idx += 1;
  569|   105k|        if idx == bytes.len() {
  570|  1.09k|            return None;
  571|   104k|        }
  572|       |    }
  573|  13.0k|}
_RNvNtNtCs6RNShWQ8XAz_8rsonpath5input7padding33seek_non_whitespace_backward_impl:
  576|  3.71k|fn seek_non_whitespace_backward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  577|  3.71k|    let mut idx = from;
  578|  3.71k|    if idx >= bytes.len() {
  579|      0|        return None;
  580|  3.71k|    }
  581|       |
  582|       |    loop {
  583|  32.0k|        let b = bytes[idx];
  584|  32.0k|        if !b.is_ascii_whitespace() {
  585|  3.53k|            return Some((idx, b));
  586|  28.5k|        }
  587|  28.5k|        if idx == 0 {
  588|    179|            return None;
  589|  28.3k|        }
  590|  28.3k|        idx -= 1;
  591|       |    }
  592|  3.71k|}
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first0Bb_:
  386|    346|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  387|    346|            if self.middle.is_empty() {
  388|    321|                self.seek_non_whitespace_forward_from_last(bytes.len())
  389|       |            } else {
  390|     25|                self.seek_non_whitespace_forward_from_middle(bytes.len())
  391|       |            }
  392|    346|        })
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle0Bb_:
  400|     19|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middles_0Bb_:
  401|      6|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last0Bb_:
  409|  5.63k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle0Bb_:
  424|     25|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middles_0Bb_:
  425|      2|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last0Bb_:
  433|  1.31k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_lasts_0Bb_:
  434|    177|            .or_else(|| {
  435|    177|                if self.middle.is_empty() {
  436|    150|                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  437|       |                } else {
  438|     27|                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  439|       |                }
  440|    177|            })
_RNCNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput10slice_last0Bb_:
  466|  1.62k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])

_RINvXNtNtCs6RNShWQ8XAz_8rsonpath5input5sliceRShNtB5_13SliceSeekable12seek_forwardKj1_ECse4uPzH624PE_20fuzz_arbitrary_bytes:
   33|  4.54k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
   34|  4.54k|        let bytes = self.as_ref();
   35|  4.54k|
   36|  4.54k|        assert!(N > 0);
   37|  4.54k|        let mut idx = from;
   38|  4.54k|
   39|  4.54k|        if idx >= bytes.len() {
   40|      0|            return None;
   41|  4.54k|        }
   42|       |
   43|       |        loop {
   44|  4.54k|            let b = bytes[idx];
   45|  4.54k|            if needles.contains(&b) {
   46|  4.54k|                return Some((idx, b));
   47|      0|            }
   48|      0|            idx += 1;
   49|      0|            if idx == bytes.len() {
   50|      0|                return None;
   51|      0|            }
   52|       |        }
   53|  4.54k|    }
_RNvXNtNtCs6RNShWQ8XAz_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardB6_:
   56|  16.4k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|  16.4k|        let bytes = self.as_ref();
   58|  16.4k|        let mut idx = from;
   59|  16.4k|
   60|  16.4k|        if idx >= bytes.len() {
   61|      0|            return None;
   62|  16.4k|        }
   63|       |
   64|       |        loop {
   65|  31.6k|            let b = bytes[idx];
   66|  31.6k|            if !b.is_ascii_whitespace() {
   67|  16.3k|                return Some((idx, b));
   68|  15.3k|            }
   69|  15.3k|            idx += 1;
   70|  15.3k|            if idx == bytes.len() {
   71|    130|                return None;
   72|  15.2k|            }
   73|       |        }
   74|  16.4k|    }
_RNvXNtNtCs6RNShWQ8XAz_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardB6_:
   77|  2.51k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|  2.51k|        let bytes = self.as_ref();
   79|  2.51k|        let mut idx = from;
   80|  2.51k|
   81|  2.51k|        if idx >= bytes.len() {
   82|      0|            return None;
   83|  2.51k|        }
   84|       |
   85|       |        loop {
   86|  5.20k|            let b = bytes[idx];
   87|  5.20k|            if !b.is_ascii_whitespace() {
   88|  2.50k|                return Some((idx, b));
   89|  2.69k|            }
   90|  2.69k|            if idx == 0 {
   91|     11|                return None;
   92|  2.68k|            }
   93|  2.68k|            idx -= 1;
   94|       |        }
   95|  2.51k|    }

_RNvCs6RNShWQ8XAz_8rsonpath18is_json_whitespace:
  303|  6.16k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  304|  6.16k|    JSON_WHITESPACE_BYTES.contains(&x)
  305|  6.16k|}

_RNvXs2_NtCs6RNShWQ8XAz_8rsonpath6resultINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCse4uPzH624PE_20fuzz_arbitrary_bytes:
  144|  7.93k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  7.93k|        self.push(data);
  146|  7.93k|        Ok(())
  147|  7.93k|    }

_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_blockCse4uPzH624PE_20fuzz_arbitrary_bytes:
  156|  4.58k|    fn record_block(&mut self, block: B) {
  157|  4.58k|        match self {
  158|  3.17k|            Self::Simple(r) => r.record_block(block),
  159|  1.41k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  4.58k|    }
_RNvXs_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCse4uPzH624PE_20fuzz_arbitrary_bytes:
   41|  4.58k|    fn record_block_start(&self, new_block: B) {
   42|  4.58k|        self.internal.borrow_mut().record_block(new_block)
   43|  4.58k|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB4_5MatchEE14build_recorderCse4uPzH624PE_20fuzz_arbitrary_bytes:
   28|  1.01k|    pub(crate) fn build_recorder(sink: &'s mut S, leading_padding_len: usize) -> Self {
   29|  1.01k|        Self {
   30|  1.01k|            internal: RefCell::new(InternalRecorder::new(sink, leading_padding_len)),
   31|  1.01k|        }
   32|  1.01k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_matchCse4uPzH624PE_20fuzz_arbitrary_bytes:
  165|  22.3k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  22.3k|        match self {
  167|  7.19k|            Self::Simple(simple) => {
  168|  7.19k|                if !simple.try_record_match(idx, depth, ty) {
  169|    662|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    662|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    662|                    let mut stack = simple.transform_to_stack();
  174|    662|                    stack.record_match(idx, depth, ty);
  175|    662|                    *self = Self::Stack(stack);
  176|  6.53k|                }
  177|       |            }
  178|  15.1k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  22.3k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCse4uPzH624PE_20fuzz_arbitrary_bytes:
  185|  11.2k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  11.2k|        match self {
  187|  6.11k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  5.14k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  11.2k|    }
_RNvMs1_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
  151|  1.01k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  152|  1.01k|        Self::Simple(SimpleRecorder::new(sink, leading_padding_len))
  153|  1.01k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_blockCse4uPzH624PE_20fuzz_arbitrary_bytes:
  224|  3.17k|    fn record_block(&mut self, block: B) {
  225|  3.17k|        if let Some(finished) = self.current_block.as_ref() {
  226|  2.16k|            if let Some(node) = self.node.as_mut() {
  227|       |                debug!("Continuing node, idx is {}", self.idx);
  228|    845|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  229|  1.31k|            }
  230|       |
  231|  2.16k|            self.idx += finished.len();
  232|  1.01k|        }
  233|       |
  234|  3.17k|        self.current_block = Some(block);
  235|  3.17k|        debug!("New block, idx = {}", self.idx);
  236|  3.17k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCse4uPzH624PE_20fuzz_arbitrary_bytes:
  268|  7.19k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  269|  7.19k|        if self.node.is_some() {
  270|       |            debug!("nested match detected, switching to stack");
  271|    662|            return false;
  272|  6.53k|        }
  273|  6.53k|
  274|  6.53k|        let node = SimplePartialNode {
  275|  6.53k|            start_idx: idx,
  276|  6.53k|            start_depth: depth,
  277|  6.53k|            buf: vec![],
  278|  6.53k|            ty,
  279|  6.53k|        };
  280|  6.53k|        self.node = Some(node);
  281|  6.53k|
  282|  6.53k|        true
  283|  7.19k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCse4uPzH624PE_20fuzz_arbitrary_bytes:
  285|    662|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  286|    662|        match self.node {
  287|    662|            Some(node) => StackRecorder {
  288|    662|                idx: self.idx,
  289|    662|                match_count: 1,
  290|    662|                current_block: self.current_block,
  291|    662|                stack: vec![PartialNode {
  292|    662|                    id: 0,
  293|    662|                    start_idx: node.start_idx,
  294|    662|                    start_depth: node.start_depth,
  295|    662|                    buf: node.buf,
  296|    662|                    ty: node.ty,
  297|    662|                }],
  298|    662|                output_queue: OutputQueue::new(),
  299|    662|                sink: self.sink,
  300|    662|                leading_padding_len: self.leading_padding_len,
  301|    662|            },
  302|      0|            None => StackRecorder {
  303|      0|                idx: self.idx,
  304|      0|                match_count: 0,
  305|      0|                current_block: self.current_block,
  306|      0|                stack: vec![],
  307|      0|                output_queue: OutputQueue::new(),
  308|      0|                sink: self.sink,
  309|      0|                leading_padding_len: self.leading_padding_len,
  310|      0|            },
  311|       |        }
  312|    662|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCse4uPzH624PE_20fuzz_arbitrary_bytes:
  238|  6.11k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  239|       |        debug!("Value terminator at {idx}, depth {depth}");
  240|  6.11k|        if let Some(node) = self.node.as_ref() {
  241|  5.88k|            if node.start_depth >= depth {
  242|  5.67k|                let mut node = self.node.take().expect("node is Some");
  243|  5.67k|                debug!("Mark node as ended at {}", idx + 1);
  244|  5.67k|                append_final_block(
  245|  5.67k|                    &mut node.buf,
  246|  5.67k|                    self.current_block
  247|  5.67k|                        .as_ref()
  248|  5.67k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  249|  5.67k|                    self.idx,
  250|  5.67k|                    node.start_idx,
  251|  5.67k|                    idx + 1,
  252|  5.67k|                );
  253|  5.67k|                finalize_node(&mut node.buf, node.ty);
  254|  5.67k|
  255|  5.67k|                debug!("Committing and outputting node");
  256|  5.67k|                self.sink
  257|  5.67k|                    .add_match(Match {
  258|  5.67k|                        span_start: node.start_idx - self.leading_padding_len,
  259|  5.67k|                        bytes: node.buf,
  260|  5.67k|                    })
  261|  5.67k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  262|    201|            }
  263|    238|        }
  264|       |
  265|  6.11k|        Ok(())
  266|  6.11k|    }
_RNvMs2_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
  214|  1.01k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  215|  1.01k|        Self {
  216|  1.01k|            idx: 0,
  217|  1.01k|            current_block: None,
  218|  1.01k|            node: None,
  219|  1.01k|            sink,
  220|  1.01k|            leading_padding_len,
  221|  1.01k|        }
  222|  1.01k|    }
_RNvMs3_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_blockCse4uPzH624PE_20fuzz_arbitrary_bytes:
  338|  1.41k|    fn record_block(&mut self, block: B) {
  339|  1.41k|        if let Some(finished) = self.current_block.as_ref() {
  340|  54.6k|            for node in &mut self.stack {
  341|       |                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  342|  53.2k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  343|       |            }
  344|       |
  345|  1.41k|            self.idx += finished.len();
  346|      0|        }
  347|       |
  348|  1.41k|        self.current_block = Some(block);
  349|  1.41k|        debug!("New block, idx = {}", self.idx);
  350|  1.41k|    }
_RNvMs3_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE12record_matchCse4uPzH624PE_20fuzz_arbitrary_bytes:
  352|  15.8k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  353|  15.8k|        let node = PartialNode {
  354|  15.8k|            id: self.match_count,
  355|  15.8k|            start_idx: idx,
  356|  15.8k|            start_depth: depth,
  357|  15.8k|            buf: vec![],
  358|  15.8k|            ty,
  359|  15.8k|        };
  360|  15.8k|
  361|  15.8k|        debug!("New node {node:?}");
  362|  15.8k|        self.match_count += 1;
  363|  15.8k|        self.stack.push(node);
  364|  15.8k|    }
_RNvMs3_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCse4uPzH624PE_20fuzz_arbitrary_bytes:
  367|  5.14k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  368|       |        debug!("Value terminator at {idx}, depth {depth}");
  369|  11.5k|        while let Some(node) = self.stack.last() {
  370|  10.9k|            if node.start_depth >= depth {
  371|       |                debug!("Mark node {node:?} as ended at {}", idx + 1);
  372|  6.44k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  373|  6.44k|                append_final_block(
  374|  6.44k|                    &mut node.buf,
  375|  6.44k|                    self.current_block
  376|  6.44k|                        .as_ref()
  377|  6.44k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  378|  6.44k|                    self.idx,
  379|  6.44k|                    node.start_idx,
  380|  6.44k|                    idx + 1,
  381|  6.44k|                );
  382|  6.44k|                finalize_node(&mut node.buf, node.ty);
  383|  6.44k|
  384|  6.44k|                debug!("Committing node: {node:?}");
  385|  6.44k|                self.output_queue.insert(
  386|  6.44k|                    node.id,
  387|  6.44k|                    Match {
  388|  6.44k|                        span_start: node.start_idx - self.leading_padding_len,
  389|  6.44k|                        bytes: node.buf,
  390|  6.44k|                    },
  391|  6.44k|                );
  392|       |            } else {
  393|  4.49k|                break;
  394|       |            }
  395|       |        }
  396|       |
  397|  5.14k|        if self.stack.is_empty() {
  398|       |            debug!("Outputting batch of nodes.");
  399|    648|            self.output_queue
  400|    648|                .output_to(self.sink)
  401|    648|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  402|  4.49k|        }
  403|       |
  404|  5.14k|        Ok(())
  405|  5.14k|    }
_RNvNtNtCs6RNShWQ8XAz_8rsonpath6result5nodes12append_block:
  409|  54.0k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  410|  54.0k|    if read_start >= src_start + src.len() {
  411|    323|        return;
  412|  53.7k|    }
  413|       |
  414|  53.7k|    let to_extend = if read_start > src_start {
  415|  12.0k|        let in_block_start = read_start - src_start;
  416|  12.0k|        &src[in_block_start..]
  417|       |    } else {
  418|  41.6k|        src
  419|       |    };
  420|       |
  421|  53.7k|    dest.extend(to_extend);
  422|  54.0k|}
_RNvNtNtCs6RNShWQ8XAz_8rsonpath6result5nodes13finalize_node:
  435|  12.1k|fn finalize_node(buf: &mut Vec<u8>, ty: MatchedNodeType) {
  436|  12.1k|    debug!("Finalizing node");
  437|  12.1k|
  438|  12.1k|    if ty == MatchedNodeType::Atomic {
  439|       |        // Atomic nodes are finished when the next structural character is matched.
  440|       |        // The buffer includes that character and all preceding whitespace.
  441|       |        // We need to remove it before saving the result.
  442|  9.12k|        if buf.len() <= 1 {
  443|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  444|  5.60k|            buf.truncate(0)
  445|       |        } else {
  446|  3.51k|            let mut i = buf.len() - 2;
  447|  6.16k|            while is_json_whitespace(buf[i]) {
  448|  2.64k|                i -= 1;
  449|  2.64k|            }
  450|       |
  451|  3.51k|            buf.truncate(i + 1);
  452|       |        }
  453|  2.99k|    }
  454|  12.1k|}
_RNvNtNtCs6RNShWQ8XAz_8rsonpath6result5nodes18append_final_block:
  425|  12.1k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  426|  12.1k|    debug!("src_start: {src_start}, read_start: {read_start}, read_end: {read_end}");
  427|  12.1k|    debug_assert!(read_end >= src_start);
  428|  12.1k|    let in_block_start = read_start.saturating_sub(src_start);
  429|  12.1k|    let in_block_end = read_end - src_start;
  430|  12.1k|
  431|  12.1k|    dest.extend(&src[in_block_start..in_block_end]);
  432|  12.1k|}
_RNvXs0_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCse4uPzH624PE_20fuzz_arbitrary_bytes:
   52|  22.3k|    fn record_match(&self, idx: usize, depth: Depth, ty: MatchedNodeType) -> Result<(), EngineError> {
   53|  22.3k|        debug!("Recording match at {idx}");
   54|  22.3k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  22.3k|        Ok(())
   56|  22.3k|    }
_RNvXs0_NtNtCs6RNShWQ8XAz_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCs8f6x4lOZV33_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCse4uPzH624PE_20fuzz_arbitrary_bytes:
   59|  11.2k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  11.2k|        self.internal
   61|  11.2k|            .borrow_mut()
   62|  11.2k|            .record_value_terminator(idx, depth)
   63|  11.2k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  11.2k|    }

_RINvMNtNtCs6RNShWQ8XAz_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCs8f6x4lOZV33_5alloc3vec3VecB18_EECse4uPzH624PE_20fuzz_arbitrary_bytes:
   52|    648|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|    648|    where
   54|    648|        S: Sink<D>,
   55|    648|    {
   56|    648|        self.offset += self.nodes.len();
   57|       |
   58|  2.25k|        for node in self.nodes.drain(..) {
   59|  2.25k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|    648|        Ok(())
   63|    648|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCse4uPzH624PE_20fuzz_arbitrary_bytes:
   18|    662|    pub(super) fn new() -> Self {
   19|    662|        Self {
   20|    662|            offset: 0,
   21|    662|            nodes: vec![],
   22|    662|        }
   23|    662|    }
_RNvMNtNtCs6RNShWQ8XAz_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCse4uPzH624PE_20fuzz_arbitrary_bytes:
   29|  6.44k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  6.44k|        let actual_idx = id - self.offset;
   31|       |
   32|  18.3k|        while self.nodes.len() <= actual_idx {
   33|  11.9k|            self.nodes.push(None);
   34|  11.9k|        }
   35|       |
   36|  6.44k|        self.nodes[actual_idx] = Some(node);
   37|  6.44k|    }

_RNvMs_NtCs2Ab18eK5UZw_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3new:
   47|  1.01k|    pub(crate) fn new() -> Self {
   48|  1.01k|        Self { syntax_errors: vec![] }
   49|  1.01k|    }
_RNvMs_NtCs2Ab18eK5UZw_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8is_empty:
   59|  1.01k|    pub(crate) fn is_empty(&self) -> bool {
   60|  1.01k|        self.syntax_errors.is_empty()
   61|  1.01k|    }
_RNvXs3_NtCs2Ab18eK5UZw_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCselIyhuOc7xF_3nom5error10ParseErrorReE15from_error_kind:
  462|  1.01k|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  463|  1.01k|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  464|  1.01k|    }

_RNvCs2Ab18eK5UZw_15rsonpath_syntax5parseCse4uPzH624PE_20fuzz_arbitrary_bytes:
  283|  1.01k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  284|  1.01k|    Parser::default().parse(str)
  285|  1.01k|}
_RNvMs2_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB5_6Parser5parseCse4uPzH624PE_20fuzz_arbitrary_bytes:
  307|  1.01k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  308|  1.01k|        crate::parser::parse_with_options(str, &self.options)
  309|  1.01k|    }
_RNvXs0_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCshZc3FwCJ069_4core7default7Default7default:
  232|  1.01k|    fn default() -> Self {
  233|  1.01k|        Self {
  234|  1.01k|            recursion_limit: Some(Parser::RECURSION_LIMIT_DEFAULT),
  235|  1.01k|            relaxed_whitespace: false,
  236|  1.01k|        }
  237|  1.01k|    }
_RNvMsr_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  834|  1.01k|    pub fn segments(&self) -> &[Segment] {
  835|  1.01k|        &self.segments
  836|  1.01k|    }
_RNvMss_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB5_7Segment8is_child:
  859|  1.01k|    pub fn is_child(&self) -> bool {
  860|  1.01k|        matches!(self, Self::Child(_))
  861|  1.01k|    }
_RNvMss_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB5_7Segment9selectors:
  843|  1.01k|    pub fn selectors(&self) -> &Selectors {
  844|  1.01k|        match self {
  845|  1.01k|            Self::Child(s) | Self::Descendant(s) => s,
  846|  1.01k|        }
  847|  1.01k|    }
_RNvXsx_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
 1077|  1.01k|    fn deref(&self) -> &Self::Target {
 1078|  1.01k|        &self.inner
 1079|  1.01k|    }
_RNvMst_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB5_9Selectors5firstCs6RNShWQ8XAz_8rsonpath:
  924|  1.01k|    pub fn first(&self) -> &Selector {
  925|  1.01k|        &self.inner[0]
  926|  1.01k|    }
_RNvMst_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB5_9Selectors3one:
  901|  1.01k|    pub fn one(selector: Selector) -> Self {
  902|  1.01k|        Self { inner: vec![selector] }
  903|  1.01k|    }
_RNvMs_Cs2Ab18eK5UZw_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowed:
  225|  1.01k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  226|  1.01k|        self.relaxed_whitespace
  227|  1.01k|    }

_RNvMs8_NtCs2Ab18eK5UZw_15rsonpath_syntax3numNtB5_8JsonUInt13try_incrementCse4uPzH624PE_20fuzz_arbitrary_bytes:
  425|  7.19k|    pub fn try_increment(&mut self) -> Result<(), JsonIntOverflowError> {
  426|  7.19k|        let new_index = self.0 + 1;
  427|  7.19k|        if new_index <= JSON_UINT_UPPER_LIMIT {
  428|  7.19k|            self.0 = new_index;
  429|  7.19k|            Ok(())
  430|       |        } else {
  431|      0|            Err(JsonIntOverflowError::uint_pos_overflow(new_index))
  432|       |        }
  433|  7.19k|    }

_RNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser7segment0B5_:
  145|  1.01k|        |q| descendant_segment(q, ctx),
_RNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18descendant_segment0B5_:
  157|  1.01k|                |q| bracketed_selection(q, ctx),
_RINvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  187|  1.01k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  188|       |    move |q: &str| {
  189|       |        let rest = skip_one(q)
  190|       |            .trim_start_matches('.')
  191|       |            .trim_start_matches(|x| x != '.' && x != '[');
  192|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  193|       |    }
  194|  1.01k|}
_RINvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  187|  1.01k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  188|       |    move |q: &str| {
  189|       |        let rest = skip_one(q)
  190|       |            .trim_start_matches('.')
  191|       |            .trim_start_matches(|x| x != '.' && x != '[');
  192|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  193|       |    }
  194|  1.01k|}
_RNCNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser17wildcard_selector0B5_:
  297|  1.01k|    map(tag("*"), |_| Selector::Wildcard).parse(q)
_RNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser15skip_whitespace:
   13|  3.03k|fn skip_whitespace(q: &str) -> &str {
   14|  3.03k|    q.trim_start_matches(WHITESPACE)
   15|  3.03k|}
_RNvMNtCs2Ab18eK5UZw_15rsonpath_syntax6parserNtB2_8ParseCtx3new:
   44|  1.01k|    fn new(options: &'a ParserOptions) -> Self {
   45|  1.01k|        Self {
   46|  1.01k|            options,
   47|  1.01k|            current_nesting: 0,
   48|  1.01k|        }
   49|  1.01k|    }
_RNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18parse_with_options:
   62|  1.01k|pub(crate) fn parse_with_options(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   63|  1.01k|    parse_json_path_query(q, ParseCtx::new(options))
   64|  1.01k|}
_RNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser21parse_json_path_query:
   66|  1.01k|fn parse_json_path_query(q: &str, ctx: ParseCtx) -> Result<JsonPathQuery> {
   67|  1.01k|    let original_input = q;
   68|  1.01k|    let mut parse_error = ParseErrorBuilder::new();
   69|  1.01k|    let mut segments = vec![];
   70|  1.01k|    let q = skip_whitespace(q);
   71|  1.01k|    let leading_whitespace_len = original_input.len() - q.len();
   72|  1.01k|    if leading_whitespace_len > 0 && !ctx.options.is_leading_whitespace_allowed() {
   73|      0|        parse_error.add(SyntaxError::new(
   74|      0|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   75|      0|            original_input.len(),
   76|      0|            leading_whitespace_len,
   77|      0|        ));
   78|  1.01k|    }
   79|  1.01k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   80|  1.01k|        Ok((q, _)) => skip_whitespace(q),
   81|      0|        Err(e) => {
   82|      0|            parse_error.add(SyntaxError::new(
   83|      0|                SyntaxErrorKind::MissingRootIdentifier,
   84|      0|                e.input.len(),
   85|      0|                q.chars().next().map_or(1, char::len_utf8),
   86|      0|            ));
   87|      0|            e.input
   88|       |        }
   89|       |    };
   90|       |
   91|  1.01k|    let mut q = q;
   92|  2.02k|    while !q.is_empty() {
   93|  1.01k|        q = match segment(q, ctx).finish() {
   94|  1.01k|            Ok((rest, segment)) => {
   95|  1.01k|                segments.push(segment);
   96|  1.01k|                rest
   97|       |            }
   98|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
   99|      0|                parse_error.add(err);
  100|      0|                rest
  101|       |            }
  102|      0|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
  103|      0|                parse_error.add_many(errs);
  104|      0|                rest
  105|       |            }
  106|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  107|      0|                return Err(ParseErrorBuilder::recursion_limit_exceeded(
  108|      0|                    original_input.to_owned(),
  109|      0|                    ctx.options
  110|      0|                        .recursion_limit
  111|      0|                        .expect("recursion limit should exists when exceeded"),
  112|      0|                ));
  113|       |            }
  114|      0|            Err(InternalParseError::NomError(err)) => panic!(
  115|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  116|      0|            ),
  117|       |        };
  118|  1.01k|        q = skip_whitespace(q);
  119|       |    }
  120|       |
  121|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
  122|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
  123|  1.01k|    if !ctx.options.is_trailing_whitespace_allowed() {
  124|  1.01k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
  125|  1.01k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
  126|  1.01k|        if trailing_whitespace_len > 0 {
  127|      0|            parse_error.add(SyntaxError::new(
  128|      0|                SyntaxErrorKind::DisallowedTrailingWhitespace,
  129|      0|                trailing_whitespace_len,
  130|      0|                trailing_whitespace_len,
  131|      0|            ));
  132|  1.01k|        }
  133|      0|    }
  134|       |
  135|  1.01k|    if parse_error.is_empty() {
  136|  1.01k|        Ok(JsonPathQuery { segments })
  137|       |    } else {
  138|      0|        Err(parse_error.build(original_input.to_owned()))
  139|       |    }
  140|  1.01k|}
_RNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser7segment:
  142|  1.01k|fn segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  143|  1.01k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  144|  1.01k|    alt((
  145|  1.01k|        |q| descendant_segment(q, ctx),
  146|  1.01k|        |q| child_segment(q, ctx),
  147|  1.01k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  148|  1.01k|    ))
  149|  1.01k|    .parse(q)
  150|  1.01k|}
_RNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser18descendant_segment:
  152|  1.01k|fn descendant_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  153|  1.01k|    map(
  154|  1.01k|        preceded(
  155|  1.01k|            tag(".."),
  156|  1.01k|            cut(alt((
  157|  1.01k|                |q| bracketed_selection(q, ctx),
  158|  1.01k|                map(wildcard_selector, Selectors::one),
  159|  1.01k|                member_name_shorthand,
  160|  1.01k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  161|  1.01k|            ))),
  162|  1.01k|        ),
  163|  1.01k|        Segment::Descendant,
  164|  1.01k|    )
  165|  1.01k|    .parse(q)
  166|  1.01k|}
_RNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser19bracketed_selection:
  196|  1.01k|fn bracketed_selection<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selectors, InternalParseError<'q>> {
  197|  1.01k|    let (mut q, _) = char('[')(q)?;
  198|      0|    let mut selectors = vec![];
  199|      0|    let mut syntax_errors = vec![];
  200|       |
  201|       |    loop {
  202|      0|        match selector(q, ctx).finish() {
  203|      0|            Ok((rest, selector)) => {
  204|      0|                selectors.push(selector);
  205|      0|                q = rest;
  206|      0|            }
  207|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  208|      0|                syntax_errors.push(err);
  209|      0|                q = rest;
  210|      0|            }
  211|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  212|      0|                syntax_errors.append(&mut errs);
  213|      0|                q = rest;
  214|      0|            }
  215|      0|            Err(err) => return Err(Err::Failure(err)),
  216|       |        }
  217|      0|        q = skip_whitespace(q);
  218|      0|
  219|      0|        match char::<_, nom::error::Error<_>>(',')(q) {
  220|      0|            Ok((rest, _)) => q = rest,
  221|       |            Err(_) => {
  222|      0|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  223|      0|                    q = rest;
  224|      0|                    break;
  225|      0|                } else if q.is_empty() {
  226|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  227|      0|                    break;
  228|       |                } else {
  229|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  230|       |                }
  231|       |            }
  232|       |        }
  233|       |    }
  234|       |
  235|      0|    if syntax_errors.is_empty() {
  236|      0|        Ok((q, Selectors::many(selectors)))
  237|       |    } else {
  238|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  239|       |    }
  240|  1.01k|}
_RNvNtCs2Ab18eK5UZw_15rsonpath_syntax6parser17wildcard_selector:
  296|  1.01k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  297|  1.01k|    map(tag("*"), |_| Selector::Wildcard).parse(q)
  298|  1.01k|}

_RNCNvXNvCse4uPzH624PE_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCs3HmALEVcYcb_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   17|  1.01k|#[derive(Arbitrary)]
_RNCNvXNvCse4uPzH624PE_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCs3HmALEVcYcb_9arbitrary9Arbitrary13try_size_hint0B6_:
   17|  1.01k|#[derive(Arbitrary)]

